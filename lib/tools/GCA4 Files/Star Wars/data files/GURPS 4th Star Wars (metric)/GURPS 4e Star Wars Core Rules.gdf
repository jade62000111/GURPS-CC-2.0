Encoding=UTF-8
Version=3
* The version information above MUST be the first line of the data file
Description=This data file contains information taken from the GURPS Star Wars Core Rules.

Program=4.0.423
Requires=
LoadAfter=
Incomplete=Yes

[AUTHOR]
******************************************************************************************************************
* GURPS(R) Character Assistant
* Filename: GURPS 4e Star Wars Core Rules.GDF
* Created:  July 14 2009
* Last Update: Juli 12 2014
*
* Requires GCA v b4.0.423 or later!
*
* This data file contains information taken from the GURPS 4th Edition Core Rules.
*
* Information in this file includes:
*      Attributes
*      Advantages, Perks
*      Disadvantages, Quirks
*      Modifiers
*      Skills
*      Groups
*      Equipment
*      Templates

******************************************************************************************************************
* If you find any errors, omissions or solutions in this file please contact the Data File creator at:
*
* Contact: Dark.Lord.Azagthoth@gmail.com
*
* Updates can be found at:
*
* http://members.upc.nl/l.deckers3/sw_gurps.html
*
* Known problems:
*
******************************************************************************************************************
* GURPS is a registered trademark of Steve Jackson Games Incorporated,
* used with GCA by permission of Steve Jackson Games. All rights reserved.
*
* The GURPS game is copyright (c) 1986-1989, 1991-2011 by Steve Jackson
* Games Incorporated. This product includes copyrighted material from the
* GURPS game, which is used by permission of Steve Jackson Games
* Incorporated. All rights reserved by Steve Jackson Games Incorporated.
******************************************************************************************************************
* Star Wars is a registered trademark of Lucasfilm, Ltd (LFL).
* All Rights Reserved.
*
* Star Wars: The Roleplaying game is copyright (c) 1993, by West End Games
* under authorization of LFL. All rights Reserved by Lucasfilm, Ltd
*
* Star Wars Roleplaying Game is copyright (c) 2006-2009, by Wizards of the Coast.
*
* No infringement of copyright is intended.
* This product is not for sale. 
******************************************************************************************************************

[Settings]
ModMaxNegPercentLimit = -80
NeedsDefaultSkillTag = baseapppoints
NeedsDefaultSkillValue = 0
NeedsDefaultSpellTag = baseapppoints
NeedsDefaultSpellValue = 0
RuleOf = 20

//NeedsDefaultSkillTag = points
//NeedsDefaultSkillValue = 0
//NeedsDefaultSpellTag = points
//NeedsDefaultSpellValue = 0
*********************************************************************************************************************
[SKILLTYPES]
*********************************************************************************************************************
N/A, cost(0/1), base(0), defaultstat(0), relname()
N|A, cost(0/1), base(0), defaultstat(%default), relname(def), subzero(yes)

DX/E, cost(1/2/4/8), base(-1), defaultstat(ST:DX), relname(DX)
DX/A, cost(1/2/4/8), base(-2), defaultstat(ST:DX), relname(DX)
DX/H, cost(1/2/4/8), base(-3), defaultstat(ST:DX), relname(DX)
DX/VH, cost(1/2/4/8), base(-4), defaultstat(ST:DX), relname(DX)
DX/WC, cost(3/6/12/24), base(-4), defaultstat(ST:DX), relname(DX)

IQ/E, cost(1/2/4/8), base(-1), defaultstat(ST:IQ), relname(IQ)
IQ/A, cost(1/2/4/8), base(-2), defaultstat(ST:IQ), relname(IQ)
IQ/H, cost(1/2/4/8), base(-3), defaultstat(ST:IQ), relname(IQ)
IQ/VH, cost(1/2/4/8), base(-4), defaultstat(ST:IQ), relname(IQ)
IQ/WC, cost(3/6/12/24), base(-4), defaultstat(ST:IQ), relname(IQ)

HT/E, cost(1/2/4/8), base(-1), defaultstat(ST:HT), relname(HT)
HT/A, cost(1/2/4/8), base(-2), defaultstat(ST:HT), relname(HT)
HT/H, cost(1/2/4/8), base(-3), defaultstat(ST:HT), relname(HT)
HT/VH, cost(1/2/4/8), base(-4), defaultstat(ST:HT), relname(HT)
HT/WC, cost(3/6/12/24), base(-4), defaultstat(ST:HT), relname(HT)

Will/E, cost(1/2/4/8), base(-1), defaultstat(ST:Will), relname(Will)
Will/A, cost(1/2/4/8), base(-2), defaultstat(ST:Will), relname(Will)
Will/H, cost(1/2/4/8), base(-3), defaultstat(ST:Will), relname(Will)
Will/VH, cost(1/2/4/8), base(-4), defaultstat(ST:Will), relname(Will)
Will/WC, cost(3/6/12/24), base(-4), defaultstat(ST:Will), relname(Will)

Per/E, cost(1/2/4/8), base(-1), defaultstat(ST:Perception), relname(Per)
Per/A, cost(1/2/4/8), base(-2), defaultstat(ST:Perception), relname(Per)
Per/H, cost(1/2/4/8), base(-3), defaultstat(ST:Perception), relname(Per)
Per/VH, cost(1/2/4/8), base(-4), defaultstat(ST:Perception), relname(Per)
Per/WC, cost(3/6/12/24), base(-4), defaultstat(ST:Perception), relname(Per)

Tech/A, cost(1/2/3), base(0), defaultstat(%default), relname(def), subzero(yes)
Tech/H, cost(2/3/4), base(0), defaultstat(%default), relname(def), subzero(yes)
*********************************************************************************************************************
[BASICDAMAGE]
*********************************************************************************************************************
* Starting this section will clear any existing 
* basic damage items.
*
* You must list the following items in order, because
* GCA will not sort them, but it does search through
* them in order.
*
* st() is the score that Damage Base must be <= 
* thr() is the basic thrust damage
* sw() is the basic swing damage

st(1), thr(1d-6), sw(1d-5)
st(2), thr(1d-6), sw(1d-5)
st(3), thr(1d-5), sw(1d-4)
st(4), thr(1d-5), sw(1d-4)
st(5), thr(1d-4), sw(1d-3)

st(6), thr(1d-4), sw(1d-3)
st(7), thr(1d-3), sw(1d-2)
st(8), thr(1d-3), sw(1d-2)
st(9), thr(1d-2), sw(1d-1)
st(10), thr(1d-2), sw(1d)

st(11), thr(1d-1), sw(1d+1)
st(12), thr(1d-1), sw(1d+2)
st(13), thr(1d), sw(2d-1)
st(14), thr(1d), sw(2d)
st(15), thr(1d+1), sw(2d+1)

st(16), thr(1d+1), sw(2d+2)
st(17), thr(1d+2), sw(3d-1)
st(18), thr(1d+2), sw(3d)
st(19), thr(2d-1), sw(3d+1)
st(20), thr(2d-1), sw(3d+2)

st(21), thr(2d), sw(4d-1)
st(22), thr(2d), sw(4d)
st(23), thr(2d+1), sw(4d+1)
st(24), thr(2d+1), sw(4d+2)
st(25), thr(2d+2), sw(5d-1)

st(26), thr(2d+2), sw(5d)
st(27), thr(3d-1), sw(5d+1)
st(28), thr(3d-1), sw(5d+1)
st(29), thr(3d), sw(5d+2)
st(30), thr(3d), sw(5d+2)

st(31), thr(3d+1), sw(6d-1)
st(32), thr(3d+1), sw(6d-1)
st(33), thr(3d+2), sw(6d)
st(34), thr(3d+2), sw(6d)
st(35), thr(4d-1), sw(6d+1)

st(36), thr(4d-1), sw(6d+1)
st(37), thr(4d), sw(6d+2)
st(38), thr(4d), sw(6d+2)
st(39), thr(4d+1), sw(7d-1)

st(40), thr(4d+1), sw(7d-1)
st(45), thr(5d), sw(7d+1)
st(50), thr(5d+2), sw(8d-1)
st(55), thr(6d), sw(8d+1)
st(60), thr(7d-1), sw(9d)
st(65), thr(7d+1), sw(9d+2)
st(70), thr(8d), sw(10d)
st(75), thr(8d+2), sw(10d+2)
st(80), thr(9d), sw(11d)
st(85), thr(9d+2), sw(11d+2)
st(90), thr(10d), sw(12d)
st(95), thr(10d+2), sw(12d+2)

st(100), thr(11d), sw(13d)

* The LAST item in the list is always the item that is to be used
* for anything that didn't fall under the preceding items.

st(0), thr((@int(ST:Striking ST/10)+1)d), sw((@int(ST:Striking ST/10)+3)d)

* you must use the extra set of parents to separate the math part from the 'd' for the dice.
*********************************************************************************************************************
[CONVERTDICE]
*********************************************************************************************************************
* Convert damage bonus into extra dice, as per the Optional Rule: Modifying Dice + Adds on p. ?.
*
* Starting this section will clear any existing
* convert dice items
*
* break()	'if the bonus is this Value or more ...
* adddice()   '... add this Value to the damage dice ...
* subtract()  '... then subtract this amount from the bonus
*
* you need to start with the biggest break you want to deal with,
* and work down to the smallest, because GCA doesn't sort these either
* 

break(7), adddice(2), subtract(7)
break(4), adddice(1), subtract(4)
************************************************************************************************************************
[BODY]
************************************************************************************************************************
//All entries within a group() tag are in descending order. That is, the most all encompassing group comes first in the list, followed
//by the next most encompassing, down to the least encompassing group. This means that if there's a question as to which
//DR value should be used you can start with the rightmost group and work your way left, the first with a unique DR value
//is the one that takes precedence.
//  e.g. armor that has DR 30 on the Front Chest, DR 20 on the rest of the Torso, and DR 12 from the neck down
//		location(Full Suit, Torso, Front Chest),
//		basedr(12, 20, 30)
//
// We can further expand this; lets say the same armor provides a uniform DR 3 against Burning attacks and half DR against crushing:
//		location(Full Suit, Torso, Front Chest),
//		basedr(12, 20, 30), burningdr(3), crushingdr(6, 10, 15)
//
//	useful tags here include:
//		basedr(), cuttingdr(), crushingdr(), impalingdr(), piercingdr(), burningdr()
//	other's to condier, but which may not be necessary are:
//		corrosiondr(), fatiguedr(), toxicdr(), otherdr()
//		with otherdr() being a catch-all for other types of DR that may not fit into the regular categories.

<Humanoid>
name(Eyes), group(All, Head, Face, Eyes), basedb(0), basedr(0), basehp(0), display(-1), posx(6), posy(0), expanded(-1)
name(Right Eye), group(All, Head, Face, Eyes, Right Eye), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Eye), group(All, Head, Face, Eyes, Left Eye), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)

name(All), group(All), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Full Suit), group(All, Full Suit), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Body), group(All, Full Suit, Body), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Limbs), group(All, Full Suit, Limbs), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)

name(Head), group(All, Head), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Skull), group(All, Head, Skull), basedb(0), basedr(2), basehp(0), display(-1), posx(155), posy(0), expanded(-1)
name(Face), group(All, Head, Face), basedb(0), basedr(0), basehp(0), display(-1), posx(155), posy(50), expanded(-1)
name(Neck), group(All, Full Suit, Body, Neck), basedb(0), basedr(0), basehp(0), display(-1), posx(6), posy(50), expanded(-1)
name(Torso), group(All, Full Suit, Body, Torso), basedb(0), basedr(0), basehp(0), display(-1), posx(4), posy(110), expanded(-1)
name(Chest), group(All, Full Suit, Body, Torso, Chest), basedb(0), basedr(0), basehp(0), display(-1), posx(4), posy(170), expanded(-1)
name(Abdomen), group(All, Full Suit, Body, Torso, Abdomen), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Groin), group(All, Full Suit, Body, Groin), basedb(0), basedr(0), basehp(0), display(-1), posx(195), posy(275), expanded(-1)
name(Arms), group(All, Full Suit, Limbs, Arms), basedb(0), basedr(0), basehp(0), display(-1), posx(200), posy(130), expanded(-1)
name(Shoulders), group(All, Full Suit, Limbs, Arms, Shoulders), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Upper Arms), group(All, Full Suit, Limbs, Arms, Upper Arms), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Elbows), group(All, Full Suit, Limbs, Arms, Elbows), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Forearms), group(All, Full Suit, Limbs, Arms, Forearms), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Hands), group(All, Full Suit, Hands), basedb(0), basedr(0), basehp(0), display(-1), posx(210), posy(180), expanded(-1)
name(Legs), group(All, Full Suit, Limbs, Legs), basedb(0), basedr(0), basehp(0), display(-1), posx(168), posy(340), expanded(-1)
name(Thighs), group(All, Full Suit, Limbs, Legs, Thighs), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Knees), group(All, Full Suit, Limbs, Legs, Knees), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Shins), group(All, Full Suit, Limbs, Legs, Shins), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Feet), group(All, Full Suit, Feet), basedb(0), basedr(0), basehp(0), display(-1), posx(168), posy(392), expanded(-1)
name(Right Arm), group(All, Full Suit, Limbs, Arms, Right Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Right Shoulder), group(All, Full Suit, Limbs, Arms, Shoulders, Right Arm, Right Shoulder), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Right Upper Arm), group(All, Full Suit, Limbs, Arms, Upper Arms, Right Arm, Right Upper Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Right Elbow), group(All, Full Suit, Limbs, Arms, Elbows, Right Arm, Right Elbow), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Right Forearm), group(All, Full Suit, Limbs, Arms, Forearms, Right Arm, Right Forearm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Right Hand), group(All, Full Suit, Hands, Right Hand), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Right Leg), group(All, Full Suit, Limbs, Legs, Right Leg), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Right Thigh), group(All, Full Suit, Limbs, Legs, Thighs, Right Leg, Right Thigh), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Right Knee), group(All, Full Suit, Limbs, Legs, Knees, Right Leg, Right Knee), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Right Shin), group(All, Full Suit, Limbs, Legs, Shins, Right Leg, Right Shin), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Right Foot), group(All, Full Suit, Feet, Right Foot), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Arm), group(All, Full Suit, Limbs, Arms, Left Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Shoulder), group(All, Full Suit, Limbs, Arms, Shoulders, Left Arm, Left Shoulder), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Upper Arm), group(All, Full Suit, Limbs, Arms, Upper Arms, Left Arm, Left Upper Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Elbow), group(All, Full Suit, Limbs, Arms, Elbows, Left Arm, Left Elbow), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Forearm), group(All, Full Suit, Limbs, Arms, Forearms, Left Arm, Left Forearm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Hand), group(All, Full Suit, Hands, Left Hand), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Leg), group(All, Full Suit, Limbs, Legs, Left Leg), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Thigh), group(All, Full Suit, Limbs, Legs, Thighs, Left Leg, Left Thigh), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Knee), group(All, Full Suit, Limbs, Legs, Knees, Left Leg, Left Knee), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Shin), group(All, Full Suit, Limbs, Legs, Shins, Left Leg, Left Shin), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Left Foot), group(All, Full Suit, Feet, Left Foot), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Neck), group(All, Full Suit, Body, Neck, Front Neck), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Torso), group(All, Full Suit, Body, Torso, Front Torso), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Chest), group(All, Full Suit, Body, Torso, Chest, Front Torso, Front Chest), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Abdomen), group(All, Full Suit, Body, Torso, Abdomen, Front Torso, Front Abdomen), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Groin), group(All, Full Suit, Body, Groin, Front Groin), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Arms), group(All, Full Suit, Limbs, Arms, Front Arms), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Shoulders), group(All, Full Suit, Limbs, Arms, Shoulders, Front Arms, Front Shoulders), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Upper Arms), group(All, Full Suit, Limbs, Arms, Upper Arms, Front Arms, Front Upper Arms), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Elbows), group(All, Full Suit, Limbs, Arms, Elbows, Front Arms, Front Elbows), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Forearms), group(All, Full Suit, Limbs, Arms, Forearms, Front Arms, Front Forearms), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Hands), group(All, Full Suit, Hands, Front Hands), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Legs), group(All, Full Suit, Limbs, Legs, Front Legs), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Thighs), group(All, Full Suit, Limbs, Legs, Thighs, Front Legs, Front Thighs), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Knees), group(All, Full Suit, Limbs, Legs, Knees, Front Legs, Front Knees), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Shins), group(All, Full Suit, Limbs, Legs, Shins, Front Legs, Front Shins), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Top Feet), group(All, Full Suit, Feet, Front Feet), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Right Arm), group(All, Full Suit, Limbs, Arms, Right Arm, Front Arms, Front Right Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Right Shoulder), group(All, Full Suit, Limbs, Arms, Shoulders, Right Arm, Right Shoulder, Front Arms, Front Shoulders, Front Right Arm, Front Right Shoulder), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Right Upper Arm), group(All, Full Suit, Limbs, Arms, Upper Arms, Right Arm, Right Upper Arm, Front Arms, Front Upper Arms, Front Right Arm, Front Right Upper Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Right Elbow), group(All, Full Suit, Limbs, Arms, Elbows, Right Arm, Right Elbow, Front Arms, Front Elbows, Front Right Arm, Front Right Elbow), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Right Forearm), group(All, Full Suit, Limbs, Arms, Forearms, Right Arm, Right Forearm, Front Arms, Front Forearms, Front Right Arm, Front Right Forearm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Right Hand), group(All, Full Suit, Hands, Right Hand, Front Hands, Front Right Hand), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Right Leg), group(All, Full Suit, Limbs, Legs, Right Leg, Front Legs, Front Right Leg), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Right Thigh), group(All, Full Suit, Limbs, Legs, Thighs, Right Leg, Right Thigh, Front Legs, Front Thighs, Front Right Leg, Front Right Thigh), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Right Knee), group(All, Full Suit, Limbs, Legs, Knees, Right Leg, Right Knee, Front Legs, Front Knees, Front Right Leg, Front Right Knee), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Right Shin), group(All, Full Suit, Limbs, Legs, Shins, Right Leg, Right Shin, Front Legs, Front Shins, Front Right Leg, Front Right Shin), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Top Right Foot), group(All, Full Suit, Feet, Right Foot, Front Feet, Front Right Foot), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Left Arm), group(All, Full Suit, Limbs, Arms, Left Arm, Front Arms, Front Left Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Left Shoulder), group(All, Full Suit, Limbs, Arms, Shoulders, Left Arm, Left Shoulder, Front Arms, Front Shoulders, Front Left Arm, Front Left Shoulder), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Left Upper Arm), group(All, Full Suit, Limbs, Arms, Upper Arms, Left Arm, Left Upper Arm, Front Arms, Front Upper Arms, Front Left Arm, Front Left Upper Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Left Elbow), group(All, Full Suit, Limbs, Arms, Elbows, Left Arm, Left Elbow, Front Arms, Front Elbows, Front Left Arm, Front Left Elbow), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Left Forearm), group(All, Full Suit, Limbs, Arms, Forearms, Left Arm, Left Forearm, Front Arms, Front Forearms, Front Left Arm, Front Left Forearm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Left Hand), group(All, Full Suit, Hands, Left Hand, Front Hands, Front Left Hand), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Left Leg), group(All, Full Suit, Limbs, Legs, Left Leg, Front Legs, Front Left Leg), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Left Thigh), group(All, Full Suit, Limbs, Legs, Thighs, Left Leg, Left Thigh, Front Legs, Front Thighs, Front Left Leg, Front Left Thigh), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Left Knee), group(All, Full Suit, Limbs, Legs, Knees, Left Leg, Left Knee, Front Legs, Front Knees, Front Left Leg, Front Left Knee), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Front Left Shin), group(All, Full Suit, Limbs, Legs, Shins, Left Leg, Left Shin, Front Legs, Front Shins, Front Left Leg, Front Left Shin), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Top Left Foot), group(All, Full Suit, Feet, Left Foot, Front Feet, Front Left Foot), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Neck), group(All, Full Suit, Body, Neck, Back Neck), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Torso), group(All, Full Suit, Body, Torso, Back Torso), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Chest), group(All, Full Suit, Body, Torso, Chest, Back Torso, Back Chest), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Abdomen), group(All, Full Suit, Body, Torso, Abdomen, Back Torso, Back Abdomen), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Groin), group(All, Full Suit, Body, Groin, Back Groin), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Arms), group(All, Full Suit, Limbs, Arms, Back Arms), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Shoulders), group(All, Full Suit, Limbs, Arms, Shoulders, Back Arms, Back Shoulders), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Upper Arms), group(All, Full Suit, Limbs, Arms, Upper Arms, Back Arms, Back Upper Arms), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Elbows), group(All, Full Suit, Limbs, Arms, Elbows, Back Arms, Back Elbows), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Forearms), group(All, Full Suit, Limbs, Arms, Forearms, Back Arms, Back Forearms), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Hands), group(All, Full Suit, Hands, Back Hands), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Legs), group(All, Full Suit, Limbs, Legs, Back Legs), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Thighs), group(All, Full Suit, Limbs, Legs, Thighs, Back Legs, Back Thighs), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Knees), group(All, Full Suit, Limbs, Legs, Knees, Back Legs, Back Knees), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Shins), group(All, Full Suit, Limbs, Legs, Shins, Back Legs, Back Shins), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Bottom Feet), group(All, Full Suit, Feet, Back Feet), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Right Arm), group(All, Full Suit, Limbs, Arms, Right Arm, Back Arms, Back Right Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Right Shoulder), group(All, Full Suit, Limbs, Arms, Shoulders, Right Arm, Right Shoulder, Back Arms, Back Shoulders, Back Right Arm, Back Right Shoulder), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Right Upper Arm), group(All, Full Suit, Limbs, Arms, Upper Arms, Right Arm, Right Upper Arm, Back Arms, Back Upper Arms, Back Right Arm, Back Right Upper Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Right Elbow), group(All, Full Suit, Limbs, Arms, Elbows, Right Arm, Right Elbow, Back Arms, Back Elbows, Back Right Arm, Back Right Elbow), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Right Forearm), group(All, Full Suit, Limbs, Arms, Forearms, Right Arm, Right Forearm, Back Arms, Back Forearms, Back Right Arm, Back Right Forearm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Right Hand), group(All, Full Suit, Hands, Right Hand, Back Hands, Back Right Hand), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Right Leg), group(All, Full Suit, Limbs, Legs, Right Leg, Back Legs, Back Right Leg), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Right Thigh), group(All, Full Suit, Limbs, Legs, Thighs, Right Leg, Right Thigh, Back Legs, Back Thighs, Back Right Leg, Back Right Thigh), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Right Knee), group(All, Full Suit, Limbs, Legs, Knees, Right Leg, Right Knee, Back Legs, Back Knees, Back Right Leg, Back Right Knee), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Right Shin), group(All, Full Suit, Limbs, Legs, Shins, Right Leg, Right Shin, Back Legs, Back Shins, Back Right Leg, Back Right Shin), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Bottom Right Foot), group(All, Full Suit, Feet, Right Foot, Back Feet, Back Right Foot), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Left Arm), group(All, Full Suit, Limbs, Arms, Left Arm, Back Arms, Back Left Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Left Shoulder), group(All, Full Suit, Limbs, Arms, Shoulders, Left Arm, Left Shoulder, Back Arms, Back Shoulders, Back Left Arm, Back Left Shoulder), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Left Upper Arm), group(All, Full Suit, Limbs, Arms, Upper Arms, Left Arm, Left Upper Arm, Back Arms, Back Upper Arms, Back Left Arm, Back Left Upper Arm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Left Elbow), group(All, Full Suit, Limbs, Arms, Elbows, Left Arm, Left Elbow, Back Arms, Back Elbows, Back Left Arm, Back Left Elbow), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Left Forearm), group(All, Full Suit, Limbs, Arms, Forearms, Left Arm, Left Forearm, Back Arms, Back Forearms, Back Left Arm, Back Left Forearm), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Left Hand), group(All, Full Suit, Hands, Left Hand, Back Hands, Back Left Hand), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Left Leg), group(All, Full Suit, Limbs, Legs, Left Leg, Back Legs, Back Left Leg), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Left Thigh), group(All, Full Suit, Limbs, Legs, Thighs, Left Leg, Left Thigh, Back Legs, Back Thighs, Back Left Leg, Back Left Thigh), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Left Knee), group(All, Full Suit, Limbs, Legs, Knees, Left Leg, Left Knee, Back Legs, Back Knees, Back Left Leg, Back Left Knee), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Back Left Shin), group(All, Full Suit, Limbs, Legs, Shins, Left Leg, Left Shin, Back Legs, Back Shins, Back Left Leg, Back Left Shin), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
name(Bottom Left Foot), group(All, Full Suit, Feet, Left Foot, Back Feet, Back Left Foot), basedb(0), basedr(0), basehp(0), display(0), posx(0), posy(0), expanded(0)
*********************************************************************************************************************
[ATTRIBUTES]
*********************************************************************************************************************
* mainwin() positions:
*  1 ST
*  2 DX
*  3 IQ
*  4 HT
*  5 Hit Points
*  6 Fatigue Points
*  7 Will
*  8 Perception
*  9 Basic Speed
* 10 Basic Move
* 11 Reserved for movement attributes activated by taking advantages or disadvantages
*	(e.g. Flight, Tunneling, No Legs (Aquatic))
* 12 Size Modifier
* 13 --------------------
* 14 Tech Level
* 15 Credits
* 16 Status



* Basic Attributes
ST, symbol(ST), basevalue(10), step(1), maxscore(1000000), minscore(0 - me::syslevels), 
	up(10), down(-10), mainwin(1), mods(No Fine Manipulators, Size), 
	disadat(-1), display(no),
	initmods( Size, -10%, group(Size ST), 
			formula(-@if(ST:Size Modifier > 0 & ST:ST::Score > 10 then ST:Size Modifier * 10 else 0)),
			forceformula(yes) _
		| No Fine Manipulators, -40%, group(No Fine Manipulators Stat),
			formula(-@if(ST:No Fine Manipulators >0 & owner::score > 10 then 40 else 0)), 
			forceformula(yes) _
		)

DX, symbol(DX), basevalue(10), step(1), maxscore(1000000), minscore(0 - me::syslevels), 
	up(20), down(-20), mainwin(2), mods(No Fine Manipulators Stat), 
	disadat(-1), display(no),
	parryat(@int(me::score/2)+3), blockat(@int(me::score/2)+1),
	initmods(No Fine Manipulators, -0%, formula(-@if(ST:No Fine Manipulators >0 & owner::score > 10 then 40 else 0)), forceformula(yes), group(No Fine Manipulators Stat), page(CR?))

IQ, symbol(IQ), basevalue(10), step(1), maxscore(1000000), minscore(0 - me::syslevels), up(20), down(-20), mainwin(3), disadat(-1), display(no)
HT, symbol(HT), basevalue(10), step(1), maxscore(1000000), minscore(0 - me::syslevels), up(10), down(-10), mainwin(4), disadat(-1), display(no)

* Secondary Characteristics
Basic Lift, basevalue(@int(100 * ST:Lifting ST * ST:Lifting ST / 11)/100), maxscore(1000000), minscore(0), symbol(BL), round(@if(ST:Lifting ST::score <= 7 then 0 else 1))

Hit Points, basevalue(ST:ST), step(1), maxscore(1000000), minscore(-1000000 - me::syslevels), 
	up(2), down(-2), symbol(HP), mods(Size HP), mainwin(5),
	display(no), disadat(-1),
	initmods( Size, -10%, group(Size HP), 
			formula(-@if(ST:Size Modifier > 0 THEN @if(ST:Hit Points::Score > 10 then ST:Size Modifier * 10 else 0) else 0)),
			forceformula(yes) _
		)

Fatigue Points, basevalue(ST:HT), step(1), maxscore(1000000), minscore(0 - me::syslevels), up(3), down(-3), symbol(FP), display(No), mainwin(6), disadat(-1)
Will, basevalue(ST:IQ), step(1), maxscore(1000000), minscore(0 - me::syslevels), up(5), down(-5), mainwin(7), disadat(-1)
Perception, basevalue(ST:IQ), step(1), maxscore(1000000), minscore(0 - me::syslevels), up(5), down(-5), symbol(Per), mainwin(8), disadat(-1)
Basic Speed, basevalue((ST:HT + ST:DX) / 4), step(0.25), maxscore(1000000), minscore(0 - me::syslevels), up(5), down(-5), display(No), mainwin(9), disadat(-1)
Basic Move, basevalue(@if(DI:No Legs (Sessile) THEN 0 ELSE ST:Basic Speed)), step(1), maxscore(1000000), minscore(0 - me::syslevels), up(5), down(-5), round(-1), display(No), mainwin(10), disadat(-1)
Striking ST, basevalue(ST:ST), step(1), maxscore(1000000), minscore(ST:ST), up(5), down(0), round(-1), display(No)
Lifting ST, basevalue(ST:ST), step(1), maxscore(1000000), minscore(ST:ST), up(3), down(0), round(-1), display(No)
Size Modifier, symbol(SM), basevalue(0), maxscore(1000000), minscore(-100), round(-1), up(0), down(0), step(1), mainwin(12)


Vision, basevalue(ST:Perception), maxscore(1000000), minscore(0)
Hearing, basevalue(ST:Perception), maxscore(1000000), minscore(0)
Taste/Smell, basevalue(ST:Perception), maxscore(1000000), minscore(0)
Touch, basevalue(ST:Perception), maxscore(1000000), minscore(0)

Dodge, basevalue(ST:Basic Speed + 3), maxscore(1000000), minscore(0), round(-1), display(No)
Parry, basevalue(0), maxscore(1000000), minscore(0), display(No)
Block, basevalue(0), maxscore(1000000), minscore(0), display(No)
DB, basevalue(0), maxscore(1000000), minscore(0), display(No)

One Arm SM, basevalue(ST:Size Modifier), maxscore(1000000), minscore(0), display(no),
	gives(_
		=+@if(me::score < 1 THEN 0 ELSE @if(me::score = 1 THEN 0.5 ELSE @if(me::score = 2 THEN 1 ELSE (@indexedvalue((me::score- (6 * @int(me::score / 6))) + 1, 0.7,1,1.5,2,3,5) * (10 ^ @int(me::score / 6)))))) to ST:One Arm Reach _
		)

Two Arm SM, basevalue(ST:Size Modifier), maxscore(1000000), minscore(0), display(no),
	gives(_
 		=+@if(me::score < 1 THEN 0 ELSE @if(me::score = 1 THEN 0.5 ELSE @if(me::score = 2 THEN 1 ELSE (@indexedvalue((me::score- (6 * @int(me::score / 6))) + 1, 0.7,1,1.5,2,3,5) * (10 ^ @int(me::score / 6)))))) to ST:Two Arm Reach _
		)

Extra Arm SM, basevalue(ST:Size Modifier), maxscore(1000000), minscore(0), display(no),
	gives(_
		=+@if(me::score < 1 THEN 0 ELSE @if(me::score = 1 THEN 0.5 ELSE @if(me::score = 2 THEN 1 ELSE (@indexedvalue((me::score- (6 * @int(me::score / 6))) + 1, 0.7,1,1.5,2,3,5) * (10 ^ @int(me::score / 6)))))) to ST:Extra Arm Reach _
		)

Leg SM, basevalue(ST:Size Modifier), maxscore(1000000), minscore(0), display(no),
	gives(=+@if(me::score < 1 THEN 0 ELSE @if(me::score = 1 THEN 0.5 ELSE @if(me::score = 2 THEN 1 ELSE (@indexedvalue((me::score- (6 * @int(me::score / 6))) + 1, 0.7,1,1.5,2,3,5) * (10 ^ @int(me::score / 6)))))) to ST:Leg Reach)

Neck SM, basevalue(ST:Size Modifier), maxscore(1000000), minscore(0), display(no),
	gives(=+@if(me::score < 1 THEN 0 ELSE @if(me::score = 1 THEN 0.5 ELSE @if(me::score = 2 THEN 1 ELSE (@indexedvalue((me::score- (6 * @int(me::score / 6))) + 1, 0.7,1,1.5,2,3,5) * (10 ^ @int(me::score / 6)))))) to ST:Neck Reach)



One Arm Reach, basevalue(0), maxscore(1000000), minscore(0), display(No)
Two Arm Reach, basevalue(0), maxscore(1000000), minscore(0), display(No)
Extra Arm Reach, basevalue(0), maxscore(1000000), minscore(0), display(No)
Leg Reach, basevalue(0), maxscore(1000000), minscore(0), display(No)
Neck Reach, basevalue(0), maxscore(1000000), minscore(0), display(No)

Fright Check, basevalue(ST:Will)
Consciousness Check, basevalue(ST:HT::score), maxscore(1000000), minscore(0), display(yes)
Death Check, basevalue(ST:HT::score), maxscore(1000000), minscore(0), display(yes)
DR, symbol(DR), round(-1), display(no)
Damage Base, symbol(DamageBase), basevalue(ST:Striking ST), display(no)

* Encumbrance
No Encumbrance, basevalue(ST:BL), maxscore(10000000), minscore(0), symbol(NEnc), round(0), display(No)
Light Encumbrance, basevalue(2 * ST:BL), maxscore(10000000), minscore(0), symbol(LEnc), round(0), display(No)
Medium Encumbrance, basevalue(3 * ST:BL), maxscore(10000000), minscore(0), symbol(MEnc), round(0), display(No)
Heavy Encumbrance, basevalue(6 * ST:BL), maxscore(10000000), minscore(0), symbol(HEnc), round(0), display(No)
X-Heavy Encumbrance, basevalue(10 * ST:BL), maxscore(10000000), minscore(0), symbol(XEnc), round(0), display(No)

No Encumbrance Move, basevalue(@MAX(@if(ST:Ground Move = 0 THEN 0 ELSE 1), ST:Ground Move)), maxscore(10000000), minscore(0), symbol(NEncMove), round(-1), display(No)
Light Encumbrance Move, basevalue(@MAX(@if(ST:Ground Move = 0 THEN 0 ELSE 1), 0.8 * ST:Ground Move)), maxscore(1000000), minscore(0), symbol(LEncMove), round(-1), display(No)
Medium Encumbrance Move, basevalue(@MAX(@if(ST:Ground Move = 0 THEN 0 ELSE 1), 0.6 * ST:Ground Move)), maxscore(1000000), minscore(0), symbol(MEncMove), round(-1), display(No)
Heavy Encumbrance Move, basevalue(@MAX(@if(ST:Ground Move = 0 THEN 0 ELSE 1), 0.4 * ST:Ground Move)), maxscore(1000000), minscore(0), symbol(HEncMove), round(-1), display(No)
X-Heavy Encumbrance Move, basevalue(@MAX(@if(ST:Ground Move = 0 THEN 0 ELSE 1), 0.2 * ST:Ground Move)), maxscore(1000000), minscore(0), symbol(XEncMove), round(-1), display(No)

* Arm ST/Physical Feats
One Arm Lifting ST, basevalue(ST:Lifting ST), maxscore(1000000), minscore(0), round(-1)
One Arm Striking ST, basevalue(ST:Striking ST), maxscore(1000000), minscore(0), round(-1)
Two Arm Lifting ST, basevalue(ST:Lifting ST), maxscore(1000000), minscore(0), round(-1)
Two Arm Striking ST, basevalue(ST:Striking ST), maxscore(1000000), minscore(0), round(-1)
Three Arm Lifting ST, basevalue(@if(AD:Extra Arms > 0 THEN ST:Lifting ST ELSE 0)), maxscore(1000000), minscore(0), round(-1)
Three Arm Striking ST, basevalue(@if(AD:Extra Arms > 0 THEN ST:Striking ST ELSE 0)), maxscore(1000000), minscore(0), round(-1)

One-Handed Lift, basevalue(2 * @if(ST:One Arm Lifting ST::score <= 7 then ST:One Arm Lifting ST * ST:One Arm Lifting ST / 11 else @int((ST:One Arm Lifting ST * ST:One Arm Lifting ST / 11)+0.5))), maxscore(1000000), minscore(0), round(1), page(CR?), units(kg)
Two-Handed Lift, basevalue(8 * @if(ST:Two Arm Lifting ST::score <= 7 then ST:Two Arm Lifting ST * ST:Two Arm Lifting ST / 11 else @int((ST:Two Arm Lifting ST * ST:Two Arm Lifting ST / 11)+0.5))), maxscore(1000000), minscore(0), round(1), page(CR?), units(kg)

High Jump, basevalue((((6 * @max(ST:Ground Move, SK:Jumping::level / 2)) - 10) * 2.5) * (2 ^ ST:Super Jump)), maxscore(1000000), minscore(0), page(CR?), units(cm)
Broad Jump, basevalue((((2 * @max(ST:Ground Move, SK:Jumping::level / 2)) - 3) / 3) * (2 ^ ST:Super Jump)), maxscore(1000000), minscore(0), page(CR?), units(m)

Shove/Knock Over, basevalue(12 * ST:Basic Lift), maxscore(1000000), minscore(0), page(CR?), units(kg)
Carry on Back, basevalue(15 * ST:Basic Lift), maxscore(1000000), minscore(0), page(CR?), units(kg)
Shift Slightly, basevalue(50 * ST:Basic Lift), maxscore(1000000), minscore(0), page(CR?), units(kg)

* Movement
Ground Move, basevalue(ST:Basic Ground Move), maxscore(1000000), minscore(0), round(-1)
Water Move, basevalue(ST:Basic Water Move), step(1), maxscore(1000000), minscore(0), up(5), down(-5), round(-1)
Air Move, basevalue(ST:Basic Air Move), maxscore(1000000), minscore(0), hide(yes), display(no), up(2), down(-2), step(1), round(-1)
Space Move, basevalue(@if(_
					@itemhasmod(AD:Flight, Newtonian Space Flight) THEN 2 * Basic Speed ELSE _
						@if(_
							@itemhasmod(AD:Flight, Space Flight) THEN 2 * Basic Speed ELSE 0 _
						    )_
				   )_
				), maxscore(1000000), minscore(0), hide(yes), display(no), up(2), down(-2), step(1), round(-1)
Tunneling Move, basevalue(@itemhasmod(AD:Tunneling, Tunneling Move)), maxscore(1000000), minscore(0), hide(yes), display(no)

* Social Background
--------------------, basevalue(0), mainwin(13), display(no)
Tech Level, basevalue(0), step(1), maxscore(11), minscore(0), up(5), down(-5), symbol(TL), round(1), mainwin(14), mods(Tech Level)
Credits, basevalue((ST:Starting Wealth * @max(_
								@if(@hasmod(5% of Starting Wealth) THEN 0.05),
								@if(@hasmod(10% of Starting Wealth) THEN 0.1),
								@if(@hasmod(15% of Starting Wealth) THEN 0.15),
								@if(@hasmod(20% of Starting Wealth) THEN 0.2),
								@if(@hasmod(30% of Starting Wealth) THEN 0.3),
								@if(@hasmod(40% of Starting Wealth) THEN 0.4),
								@if(@hasmod(50% of Starting Wealth) THEN 0.5),
								@if(@hasmod(60% of Starting Wealth) THEN 0.6),
								@if(@hasmod(70% of Starting Wealth) THEN 0.7),
								@if(@hasmod(80% of Starting Wealth) THEN 0.8),
								@if(@hasmod(90% of Starting Wealth) THEN 0.9),
								@if(@hasmod(100% of Starting Wealth) THEN 1) _
								) _
				) - char::equipmentcost),
	 step(0), minscore(0), display(No), round(1), mainwin(15), initmods(10% of Starting Wealth, +0), mods(Credits)

Starting Wealth, basevalue(ST:Wealth Modifier * @indexedvalue(ST:Tech Level::basevalue + 1, 0, 50, 75, 100, 200, 500, 1000, 1500, 2000, 3000, 5000, 7500)), step(1), minscore(0), display(No), round(1)
Remaining Funds, basevalue(ST:Starting Wealth - char::equipmentcost), step(0), minscore(0), display(No), round(1)
Wealth Modifier, basevalue(10), step(1), minscore(0), display(No), round(-1)
Signature Gear, basevalue(0), display(No), hide(yes), step(0), minscore(0), round(1)

* Melee Weapon Table listings
Punch, display(no), mode(Punch), mods(Combat Table), damage(_
		  thr-1 + _
			@if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + _
			@max(_
				@if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Punch) else 0),
				@if("SK:Punching::level" = ST:DX+1 then @basethdice(ST:Punch) else @if("SK:Punching::level" > ST:DX+1 then 2 * @:basethdice(ST:Punch) else 0)),
				@if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0)) _
			   ) _
		  ), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(0), skillused(DX, Brawling, Punching, Striking), mods(Punch/Kick), damagebasedon(ST:Punch), basevalue(ST:One Arm Striking ST)

Kick, display(no), mode(Kick), mods(Combat Table), damage(_
		 thr + _
		   @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Hooves)::level" = 1 then @basethdice(ST:Kick) else 0))) + _
                                       @if("DI:Horizontal::level" = 1 then -@basethdice(ST:Kick) else 0) + _
		   @max(_
			   @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Kick) else 0),
			   @if("SK:Striking::level" = ST:DX then @basethdice(ST:Kick) else @if("SK:Striking::level" > ST:DX then 2 *@basethdice(ST:Kick) else 0)) _
			  ) _
		 ), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C,1), parry(No), skillused(DX-2, Brawling-2, Striking-2, Kicking (Striking), Kicking (Brawling)), mods(Punch/Kick), damagebasedon(ST:Kick), basevalue(ST:Striking ST)

Bite, display(no), mode(Bite), mods(Combat Table), damage(_
		 thr-1 + _
		   @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Bite) else 0) + _
		   -@if("DI:Weak Bite::level" = 1 then 2 * @basethdice(ST:Bite) else 0)_
		 ), damtype($if("AD:Teeth (Sharp Teeth)::level" = 1 THEN "cut" ELSE $if("AD:Teeth (Sharp Beak)::level" = 1 THEN "pi+" ELSE $if("AD:Teeth (Fangs)::level" = 1 THEN "imp" ELSE $if("AD:Vampiric Bite::level" = 1 THEN "cut" ELSE "cr"))))), reach(C), parry(No), skillused(DX, Brawling), damagebasedon(ST:Bite), basevalue(ST:Striking ST)

* Helper stats
Status Max, basevalue(ST:Status), display(no), hide(yes)
Super Jump, basevalue(0), hide(yes), display(no)
Enhanced Ground Move, basevalue(0), hide(yes), display(no),
	   gives(_
		   =@if( me::score = @int(me::score) then _
			   @power(2, me::score) _
		   else _
			   @power(2, @int(me::score)) * 1.5 _
			  ) * ST:Ground Move::basescore - ST:Ground Move::basescore _
		   to ST:Ground Move _
		  )
Enhanced Air Move, basevalue(0), hide(yes), display(no),
	   gives(_
		   =@if( me::score = @int(me::score) then _
			   @power(2, me::score) _
		   else _
			   @power(2, @int(me::score)) * 1.5 _
			  ) * ST:Air Move::basescore - ST:Air Move::basescore _
		   to ST:Air Move _
		  )
Enhanced Space Move, basevalue(0), hide(yes), display(no),
	   gives(_
		   =@if( me::score = @int(me::score) then _
			   @power(2, me::score) _
		   else _
			   @power(2, @int(me::score)) * 1.5 _
			  ) * ST:Space Move::basescore - ST:Space Move::basescore _
		   to ST:Space Move _
		  )
Enhanced Water Move, basevalue(0), hide(yes), display(no),
	   gives(_
		   =@if( me::score = @int(me::score) then _
			   @power(2, me::score) _
		   else _
			   @power(2, @int(me::score)) * 1.5 _
			  ) * ST:Water Move::basescore - ST:Water Move::basescore _
		   to ST:Water Move _
		  )

Basic Ground Move, maxscore(1000000), minscore(0), hide(yes), display(no), round(-1),
	basevalue(@if(DI:No Legs (Aerial) THEN 0 ELSE @if(DI:No Legs (Aquatic) THEN 0 ELSE @if(DI:No Legs (Semi-Aquatic) THEN ST:Basic Move/5 ELSE @if(DI:No Legs (Sessile) THEN 0 ELSE ST:Basic Move)))))
Basic Water Move, maxscore(1000000), minscore(0), hide(yes), display(no), round(-1),
	basevalue(ST:Basic Move / @if(AD:Amphibious THEN 1 ELSE @if(DI:No Legs (Aquatic) THEN 1 ELSE @if(DI:No Legs (Semi-Aquatic) THEN 1 ELSE 5))))
Basic Air Move, maxscore(1000000), minscore(0), hide(yes), display(no), round(-1),
	basevalue(@if(AD:Brachiator THEN ST:Basic Move / 2 ELSE @if(AD:Walk on Air THEN ST:Ground Move ELSE @if(AD:Flight THEN @if(@itemhasmod(Flight, Space Flight Only) THEN 0 ELSE 2 * ST:Basic Speed) ELSE 0)))) 
Basic Space Move, maxscore(1000000), minscore(0), hide(yes), display(no), round(-1),
	basevalue(@if(@itemhasmod(AD:Flight, Newtonian Space Flight) THEN 2 * Basic Speed ELSE @if(@itemhasmod(AD:Flight, Space Flight) THEN 2 * Basic Speed ELSE 0 )))

No Fine Manipulators, basevalue(0), display(no), hide(yes)
Native Languages, basevalue(0), display(no), hide(yes)
Native Cultural Familiarities, basevalue(0), display(no), hide(yes)

* Reaction
Appealing, basevalue(0), display(no)
Unappealing, basevalue(0), display(no)
Reaction, basevalue(0), display(no)
Status, basevalue(0), display(no), round(-1), mainwin(16)
*********************************************************************************************************************
[ADVANTAGES]
*********************************************************************************************************************
<Attributes>
Extra ST, 10/20, mods(Extra ST, Size, No Fine Manipulators), initmods(Affects displayed ST score, +0%, gives(+Owner::Level to ST:ST), group(Extra ST), description(This modifier causes the Extra ST advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra ST advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra ST advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Extra DX, 20/40, mods(Extra DX, No Fine Manipulators), initmods(Affects displayed DX score, +0%, gives(+Owner::Level to ST:DX), group(Extra DX), description(This modifier causes the Extra DX advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra DX advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra DX advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Extra IQ, 20/40, mods(Extra IQ), initmods(Affects displayed IQ score, +0%, gives(+Owner::Level to ST:IQ), group(Extra IQ), description(This modifier causes the Extra IQ advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra IQ advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra IQ advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Extra HT, 10/20, mods(Extra HT), initmods(Affects displayed HT score, +0%, gives(+Owner::Level to ST:HT), group(Extra HT), description(This modifier causes the Extra HT advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra HT advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra HT advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)

Extra Will, 5/10, mods(Extra Will), initmods(Affects displayed Will score, +0%, gives(+Owner::Level to ST:Will), group(Extra Will), description(This modifier causes the Extra Will advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra Will advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra Will advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Extra Perception, 5/10, mods(Extra Perception), initmods(Affects displayed Per score, +0%, gives(+Owner::Level to ST:Perception), group(Extra Perception), description(This modifier causes the Extra Perception advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra Perception advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra Perception advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Extra Hit Points, 2/4, mods(Extra Hit Points, Size), initmods(Affects displayed HP score, +0%, gives(+Owner::Level to ST:Hit Points), group(Extra Hit Points), description(This modifier causes the Extra Hit Points advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra Hit Points advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra Hit Points advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Extra Fatigue Points, 3/6, mods(Extra Fatigue Points), initmods(Affects displayed FP score, +0%, gives(+Owner::Level to ST:Fatigue Points), group(Extra Fatigue Points), description(This modifier causes the Extra Fatigue Points advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra Fatigue advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra Fatigue advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)

Extra Basic Move, 5/10, mods(Extra Basic Move), initmods(Affects displayed Basic Move score, +0%, gives(+Owner::Level to ST:Basic Move), group(Extra Basic Move), description(This modifier causes the Extra Basic Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra Basic Move advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra Basic Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Extra Basic Speed, 5/10, mods(Extra Basic Speed), upto(80), initmods(Affects displayed Basic Speed score, +0%, gives(+(Owner::Level/4) to ST:Basic Speed), group(Extra Basic Speed), description(This modifier causes the Extra Basic Speed advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra Basic Speed advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra Basic Speed advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.),
	levelnames(_
			+0.25, +0.5, +0.75, +1, +1.25, +1.5, +1.75, +2, +2.25, +2.5, +2.75, +3, +3.25, +3.5, +3.75, +4, +4.25, +4.5, +4.75, +5, +5.25, +5.5, +5.75, +6, +6.25, +6.5, +6.75, +7, +7.25, +7.5, +7.75, +8, +8.25, +8.5, +8.75, +9, +9.25, +9.5, +9.75, +10,
			+10.25, +10.5, +10.75, +11, +11.25, +11.5, +11.75, +12, +12.25, +12.5, +12.75, +13, +13.25, +13.5, +13.75, +14, +14.25, +14.5, +14.75, +15, +15.25, +15.5, +15.75, +16, +16.25, +16.5, +16.75, +17, +17.25, +17.5, +17.75, +18, +18.25, +18.5, +18.75, +19, +19.25, +19.5, +19.75, +20 _
			)
Extra Water Move, 5/10, mods(Extra Water Move), initmods(Affects displayed Water Move score, +0%, gives(+Owner::Level to ST:Basic Water Move), group(Extra Water Move), description(This modifier causes the Extra Water Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra Water Move advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra Water Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Extra Air Move, 2/4, mods(Extra Air Move), initmods(Affects displayed Air Move score, +0%, gives(+Owner::Level to ST:Basic Air Move), group(Extra Air Move), description(This modifier causes the Extra Air Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Extra Air Move advantage allows you to take extra levels of the attribute which you can then apply enhancements and limitations to. The "Affects displayed score" modifier causes the Extra Air Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
High TL, 5/10, page(CR?), gives(+1 to ST:Tech Level), cat(Mundane, Social, Mundane Social)


<General>
_New Advantage, [cost], displaycost(varies), noresync(yes),
	x(#InputToTagReplace("Plese enter the name of this Advantage:" , name, ,"New Advantage"),
	  #InputReplace("Please enter the Cost of this advantage:", "[cost]", , "New Advantage"),
	  #edit_
		)
_New Leveled Advantage, %costaliaslist%, displaycost(varies), noresync(yes),
	x(#InputToTagReplace("Plese enter the name of this Advantage:" , name, ,"New Advantage"),
	  #ChoiceList(_
			 name(cost),
			 title(New Leveled Advantage: Cost),
			 text(Choose the point cost for this advantage),
			 picksallowed(1),
			 method(bynumber),
			 list(_
				"  1/level",
				"  2/level",
				"  3/level",
				"  4/level",
				"  5/level",
				" 10/level",
				" 15/level",
				" 20/level",
				" 25/level",
				" 30/level",
				" 35/level",
				" 40/level",
				" 45/level",
				" 50/level",
				" 75/level",
				"100/level"_
				),
			 aliaslist(_
					1/2,
					2/4,
					3/6,
					4/8,
					5/10,
					10/20,
					15/30,
					20/40,
					25/50,
					30/60,
					35/70,
					40/80,
					45/90,
					50/100,
					75/150,
					100/200_
				)_
			)_
	#edit_
		)

<Exotic Physical>
360° Vision, 25, mods(360° Vision), page(CR?), cat(Exotic, Physical), taboo(DI:Blindness)

Absolute Direction, 5, gives(+3 To GR:Absolute Direction), mods(Absolute Direction), page(CR?), cat(Exotic Mental, Exotic, Physical, Mental), taboo(AD:3D Spatial Sense)

Amphibious, 10, page(CR?), cat(Exotic, Physical), 
	replacetags(in "ST:Water Move" with "mainwin(11)")

Arm DX, 12/24, mods(Arm DX), page(CR?), cat(Exotic, Physical),
	initmods(_
			One arm, *1, group(Arm DX) _
			)

Arm ST, 3/6, mods(Arm ST, Punch/Kick), page(CR?), cat(Exotic, Physical), taboo(DI:Weak Arms),
	damage(_
		  $if(@hasmod(One Arm) THEN @sw(ST:One Arm Striking ST::score) ELSE $if(@hasmod(Two Arms) THEN @sw(ST:Two Arm Striking ST::score) ELSE $if(@hasmod(Three Arms) THEN @sw(ST:Three Arm Striking ST::score) ELSE 0))) _
		| $if(@hasmod(One Arm) THEN @thr(ST:One Arm Striking ST::score) ELSE $if(@hasmod(Two Arms) THEN @thr(ST:Two Arm Striking ST::score) ELSE $if(@hasmod(Three Arms) THEN @thr(ST:Three Arm Striking ST::score) ELSE 0))) _
		| $if(@hasmod(One Arm) THEN @thr(ST:One Arm Striking ST::score) ELSE $if(@hasmod(Two Arms) THEN @thr(ST:Two Arm Striking ST::score) ELSE $if(@hasmod(Three Arms) THEN @thr(ST:Three Arm Striking ST::score) ELSE 0))) _
			-1 + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + _
			@max(_
				@if("SK:Brawling::level" > ST:DX+1 THEN $if(@hasmod(One Arm) THEN @basethdice(ST:One Arm Striking ST::score) ELSE $if(@hasmod(Two Arms) THEN @basethdice(ST:Two Arm Striking ST::score) ELSE $if(@hasmod(Three Arms) THEN @basethdice(ST:Three Arm Striking ST::score) ELSE 0))) ELSE 0),
				@if("SK:Punching::level" = ST:DX+1 then $if(@hasmod(One Arm) THEN @basethdice(ST:One Arm Striking ST::score) ELSE $if(@hasmod(Two Arms) THEN @basethdice(ST:Two Arm Striking ST::score) ELSE $if(@hasmod(Three Arms) THEN @basethdice(ST:Three Arm Striking ST::score) ELSE 0))) else @if("SK:Punching::level" > ST:DX+1 then 2 * $if(@hasmod(One Arm) THEN @basethdice(ST:One Arm Striking ST::score) ELSE $if(@hasmod(Two Arms) THEN @basethdice(ST:Two Arm Striking ST::score) ELSE $if(@hasmod(Three Arms) THEN @basethdice(ST:Three Arm Striking ST::score) ELSE 0))) else 0)),
				@if("SK:Striking::level" = ST:DX then $if(@hasmod(One Arm) THEN @basethdice(ST:One Arm Striking ST::score) ELSE $if(@hasmod(Two Arms) THEN @basethdice(ST:Two Arm Striking ST::score) ELSE $if(@hasmod(Three Arms) THEN @basethdice(ST:Three Arm Striking ST::score) ELSE 0))) else @if("SK:Striking::level" > ST:DX then 2 * $if(@hasmod(One Arm) THEN @basethdice(ST:One Arm Striking ST::score) ELSE $if(@hasmod(Two Arms) THEN @basethdice(ST:Two Arm Striking ST::score) ELSE $if(@hasmod(Three Arms) THEN @basethdice(ST:Three Arm Striking ST::score) ELSE 0))) else 0)) _
			   ) _
		),
	mode(swing|thrust|punch), reach(N/A|N/A|C),
	parry(||0),
	damtype(sw|thr|$if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))),
	skillused(||DX, Brawling, Punching, Striking),
	initmods(_
			One arm, *1, gives(+owner::level to ST:One Arm Lifting ST, +owner::level to ST:One Arm Striking ST), group(Arm ST) _
			)

3D Spatial Sense, 10, gives(+1 To SK:Piloting, +2 To GR:3D Spatial Sense, +3 To GR:Absolute Direction), conditional(+2 to SK:Tactics when "in space combat"), mods(Absolute Direction), page(CR?), cat(Exotic Mental, Exotic, Physical, Mental), taboo(AD:Absolute Direction)

Alternate Form, 15/30, mods(Alternate Form), page(CR?), cat(Exotic, Physical), levelnames(,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100),
	x(#InputToTagReplace("Please specify the form or forms you can change into:", nameext, , "Alternate Form"))
Alternate Form (Cosmetic), 15/30, displaycost(8/15/+), page(CR?), cat(Exotic, Physical), 
	x(#InputToTagReplace("Please specify the form or forms you can change into:", nameext, , "Alternate Form (Cosmetic)")), levelnames(,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100), 
	initmods(Cosmetic, -50%, group(Alternate Form))

Binding, 2/4, mods(Binding, _Attack Enhancements, _Attack Limitations, Alternative Attack), page(CR?), cat(Exotic, Physical, Natural Attacks), 
	skillused(%examplealiaslist%), damage(ST%level), damtype(spcl.), acc(3), rangemax(10), rof(1), shots(), rcl(1),
	x(_
	  #InputToTag("Please describe the nature of the Binding:", nameext, , "Binding"),
	  #ChoiceList(_
			  name(example),
			  title(Binding: Choose a Skill),
			  text(Choose a Skill that will be used with Binding. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Brachiator, 5, gives(+2 To SK:Climbing), page(CR?), cat(Exotic, Physical),
	replacetags(in "ST:Air Move" with "hide(), display(yes), mainwin(11)")

Breath-Holding, 2/4, page(CR?), cat(Exotic, Physical)

Catfall, 10, page(CR?), cat(Exotic, Physical),
	skillused(DX)

Chameleon, 5/10, mods(Chameleon), page(CR?), cat(Exotic, Physical),
	conditional(_
			+2 to SK:Stealth when "perfectly still, unless clothed", 
			+1 to SK:Stealth when "moving, unless clothed",
			+1 to SK:Stealth when "perfectly still, and clothed"_
			)

Claws (Blunt Claws), 3, mods(Claws), page(CR?), cat(Exotic, Physical, Natural Attacks), taboo("AD:Claws (Hooves)", "AD:Claws(Sharp Claws)", "AD:Claws (Talons)", "AD:Claws (Long Talons)")
Claws (Hooves), 3, mods(Claws), page(CR?), cat(Exotic, Physical, Natural Attacks), taboo("AD:Claws (Blunt Claws)", "AD:Claws(Sharp Claws)", "AD:Claws (Talons)", "AD:Claws (Long Talons)")
Claws (Sharp Claws), 5, mods(Claws), page(CR?), cat(Exotic, Physical, Natural Attacks), taboo("AD:Claws (Blunt Claws)", "AD:Claws (Hooves)", "AD:Claws (Talons)", "AD:Claws (Long Talons)")
Claws (Talons), 8, mods(Claws), page(CR?), cat(Exotic, Physical, Natural Attacks), taboo("AD:Claws (Blunt Claws)", "AD:Claws (Hooves)", "AD:Claws(Sharp Claws)", "AD:Claws (Long Talons)")
Claws (Long Talons), 11, mods(Claws), page(CR?), cat(Exotic, Physical, Natural Attacks), taboo("AD:Claws (Blunt Claws)", "AD:Claws (Hooves)", "AD:Claws(Sharp Claws)", "AD:Claws (Talons)")

Constriction Attack, 15, mods(_Attack Enhancements, _Attack Limitations), page(CR?), cat(Exotic, Physical, Natural Attacks),
	damage(ST vs. ST/HT), damtype (cr), reach(C), skillused(ST), parry(No)

Dark Vision, 25, mods(Dark Vision), page(CR?), cat(Exotic, Physical), taboo(AD:Night Vision, DI:Night Blindness, DI:Blindness)

Damage Resistance, 5/10, gives(+1 To DR), mods(Damage Resistance, Limited Defense), page(CR?), cat(Exotic, Physical)

Digital Mind, 5, page(CR?), cat(Exotic, Physical)

Discriminatory Hearing, 15, page(CR?), cat(Exotic, Physical), taboo(DI:Deafness), conditional(+4 to SK:Shadowing when "following a noisy target"), gives(+4 to ST:Hearing),
	skillused(IQ), mode(memorize a sound)

Discriminatory Smell, 15, conditional(+4 to SK:Tracking when "scent is a factor"), mods(Discriminatory Smell), page(CR?), cat(Exotic, Physical), taboo("DI:No Sense of Smell/Taste"),
	skillused(IQ)

Discriminatory Taste, 10, page(CR?), cat(Exotic, Physical), taboo("DI:No Sense of Smell/Taste"), conditional(+4 to ST:Taste/Smell when "it involves Taste"),
	skillused(IQ), mode(recognize a taste)

Doesn't Breathe, 20, mods(Doesn't Breathe), page(CR?), cat(Exotic, Physical), taboo(AD:Filter Lungs)

Doesn't Eat or Drink, 10, page(CR?), cat(Exotic, Physical), taboo(AD:Reduced Consumption, DI:Increased Consumption, DI:Restricted Diet, AD:Universal Digestion, DI:Slow Eater, DI:Gluttony)

Doesn't Sleep, 20, page(CR?), cat(Exotic, Physical), taboo(DI:Extra Sleep, AD:Less Sleep, DI:Sleepy, DI:Slow Riser, DI:Insomniac), mods(Doesn't Sleep)

Early Maturation, 0/0, upto(5), page(CR?), cat(Physical, Exotic, Exotic Physical), levelnames(/2, /4, /8, /16, /32)

Elastic Skin, 20, gives(+4 To SK:Disguise), page(CR?), cat(Exotic, Physical)

Enhanced Move (Ground), 20/40, gives(+1 To ST:Enhanced Ground Move), mods(Enhanced Move), page(CR?), cat(Exotic, Physical),
	replacetags(in ST:Ground Move with "mainwin(11)")
Enhanced Move 1/2 (Ground), 10/20, gives(+0.5 To ST:Enhanced Ground Move), mods(Enhanced Move), page(CR?), cat(Exotic, Physical),
	replacetags(in ST:Ground Move with "mainwin(11)")
Enhanced Move (Air), 20/40, gives(+1 To ST:Enhanced Air Move), mods(Enhanced Move), page(CR?), cat(Exotic, Physical)
Enhanced Move 1/2 (Air), 10/20, gives(+0.5 To ST:Enhanced Air Move), mods(Enhanced Move), page(CR?), cat(Exotic, Physical)
Enhanced Move (Space), 20/40, gives(+1 To ST:Enhanced Space Move), mods(Enhanced Move), page(CR?), cat(Exotic, Physical)
Enhanced Move 1/2 (Space), 10/20, gives(+0.5 To ST:Enhanced Space Move), mods(Enhanced Move), page(CR?), cat(Exotic, Physical)
Enhanced Move (Water), 20/40, gives(+1 To ST:Enhanced Water Move), mods(Enhanced Move), page(CR?), cat(Exotic, Physical)
Enhanced Move 1/2 (Water), 10/20, gives(+0.5 To ST:Enhanced Water Move), mods(Enhanced Move), page(CR?), cat(Exotic, Physical)

Enhanced Tracking, 5/10, page(CR?), cat(Exotic, Physical)

Extended Lifespan, 2/4, page(CR?), cat(Exotic, Physical), taboo(AD:Unaging, DI:Short Lifespan, DI:Terminally Ill),
	levelnames(x2, x4, x8, x16, x32, x64, x128), upto(7)

Extra Arms, 10/20, mods(Extra Arms), page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(DI:One Arm, DI:Quadriplegic)

Extra Legs (3 Legs), 5, mods(Extra Legs), page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD:Long Legs, AD:Extra Legs (4 Legs), AD:Extra Legs (5 Legs), AD:Extra Legs (6 Legs), AD:Extra Legs (7+ Legs), DI:Quadriplegic, DI:Cannot Kick)
Extra Legs (4 Legs), 5, mods(Extra Legs), page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD:Long Legs, AD:Extra Legs (3 Legs), AD:Extra Legs (5 Legs), AD:Extra Legs (6 Legs), AD:Extra Legs (7+ Legs), DI:Quadriplegic, DI:Cannot Kick)
Extra Legs (5 Legs), 10, mods(Extra Legs), page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD:Long Legs, AD:Extra Legs (3 Legs), AD:Extra Legs (4 Legs), AD:Extra Legs (6 Legs), AD:Extra Legs (7+ Legs), DI:Quadriplegic, DI:Cannot Kick)
Extra Legs (6 Legs), 10, mods(Extra Legs), page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD:Long Legs, AD:Extra Legs (3 Legs), AD:Extra Legs (4 Legs), AD:Extra Legs (5 Legs), AD:Extra Legs (7+ Legs), DI:Quadriplegic, DI:Cannot Kick)
Extra Legs (7+ Legs), 15, mods(Extra Legs), page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD:Long Legs, AD:Extra Legs (3 Legs), AD:Extra Legs (4 Legs), AD:Extra Legs (5 Legs), AD:Extra Legs (6 Legs), DI:Quadriplegic, DI:Cannot Kick)

Extra-Flexible (1 Arm), 5, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD:Extra-Flexible (2 Arms))
Extra-Flexible (2 Arms), 10, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD:Extra-Flexible (1 Arm))

Filter Lungs, 5, page(CR?), cat(Exotic, Physical), taboo(AD:Doesn't Breathe)

Flight, 40, mods(Flight), page(CR?), cat(Exotic, Physical), 
	replacetags(in "ST:Air Move" with "hide(), display(yes), mainwin(11)", in "ST:Space Move" with "hide(), display(yes), mainwin(11)")

Growth, 10/20, mods(Growth), page(CR?), cat(Exotic, Physical)

Infravision, 10, mods(Infravision), page(CR?), cat(Exotic, Physical), taboo(AD:Hyperspectral Vision, DI:Blindness),
	conditional(+3 to SK:Tracking when "heat trail is less than an hour old"),
	skillused(Perception)

Injury Tolerance, 0, displaycost(variable), mods(Injury Tolerance), page(CR?), cat(Exotic, Physical), x(#buildit)

* Innate Attacks
Burning Attack, 5/10, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Burning Attack Enhancements, Burning Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(burn), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Burning Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Corrosion Attack, 10/20, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Corrosion Attack Enhancements, Corrosion Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(cor), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Corrosion Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Crushing Attack, 5/10, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Crushing Attack Enhancements, Crushing Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(cr), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(n/a), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Crushing Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Cutting Attack, 7/14, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Cutting Attack Enhancements, Cutting Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(cut), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Cutting Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Fatigue Attack, 10/20, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Fatigue Attack Enhancements, Fatigue Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(fat), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Fatigue Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Impaling Attack, 8/16, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Impaling Attack Enhancements, Impaling Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(imp), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Impaling Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Ion Attack, 10/20, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Ion Attack Enhancements, Ion Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(ion), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Ion Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)



Small Piercing Attack, 3/6, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Small Piercing Attack Enhancements, Small Piercing Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(pi-), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Small Piercing Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Piercing Attack, 5/10, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Piercing Attack Enhancements, Piercing Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(pi), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Piercing Attack Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Large Piercing Attack, 6/12, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Large Piercing Attack Enhancements, Large Piercing Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(pi+), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Large Piercing Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Huge Piercing Attack, 8/16, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Huge Piercing Attack Enhancements, Huge Piercing Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(pi++), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Huge Piercing Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Toxic Attack, 4/8, page(CR?), cat(Exotic, Physical, Innate Attack, Natural Attacks),
	mods(_Attack Enhancements, _Attack Limitations, Alternative Attack, Toxic Attack Enhancements, Toxic Attack Limitations, Innate Attack),
	upto(@if(@hasmod(Partial Dice (Does only 1 pt)) THEN 1)),
	damage($solver(%level)d), damtype(tox), acc(3), rangehalfdam(10), rangemax(100), rof(1), shots(), rcl(1), reach(), parry(0),
	skillused(%examplealiaslist%),
	x(#ChoiceList(_
			  name(example),
			  title(Toxic Attack: Choose a Skill),
			  text(Choose a Skill that will be used with this Innate Attack. "DX, Brawling" is appropriate for attacks that will have one of the the Melee Attack limitations; "Will" for Maledictions:),
			  picksallowed(atleast 1),
			  method(bynumber),
			  list(_
				 "_None of these",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam)",
				 "Innate Attack (Breath)",
				 "Innate Attack (Gaze)",
				 "Innate Attack (Projectile)" _
				 ),
			  aliaslist(_
				 "",
				 "Will",
				 "DX, Brawling",
				 "Innate Attack (Beam), DX-4, Innate Attack-2",
				 "Innate Attack (Breath), DX-4, Innate Attack-2",
				 "Innate Attack (Gaze), DX-4, Innate Attack-2",
				 "Innate Attack (Projectile), DX-4, Innate Attack-2" _
				 )_
			)_
	), noresync(yes)

Invisibility, 40, mods(Invisibility), page(CR?), cat(Exotic, Mental),
	conditional(+9 to SK:Stealth when "being seen would matter")

Long Arms (1 Arm), 10/20, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD:Long Arms (2 Arms), DI:Short Arms),  gives(+1 to ST:One Arm SM)
Long Arms (2 Arms), 20/40, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD:Long Arms (1 Arm), DI:Short Arms), gives(+1 to ST:One Arm SM, +1 to ST:Two Arm SM)

Long Legs, 10/20, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD:Extra Legs (3 Legs), AD:Extra Legs (4 Legs), AD:Extra Legs (5 Legs), AD:Extra Legs (6 Legs), AD:Extra Legs (7+ Legs), DI:Quadriplegic), gives(+1 to ST:Leg Reach)

Lifting ST, 3/6, gives(+1 to ST:Lifting ST), conditional(+1 to ST:ST), mods(Lifting ST, No Fine Manipulator, Size), page(CR?), cat(Exotic, Physical)

Metabolism Control, 5/10, mods(Metabolism Control), page(CR?), cat(Exotic, Physical)

Microscopic Vision, 5/10, page(CR?), cat(Exotic, Physical), taboo(DI:Blindness)

Morph, 100, mods(Morph), page(CR?), cat(Exotic, Physical), taboo(AD:Morph (Cosmetic))
Morph (Cosmetic), 100, displaycost(50), page(CR?), cat(Exotic, Physical),
	initmods(Cosmetic, -50%, group(Morph))

Obscure, 2/4, mods(Obscure), page(CR?), cat(Exotic, Physical), upto(10), radius(2),
	x(#InputToTag("You must pick a sense which Obscure ''jams'':", nameext, , "Obscure"))

Nictitating Membrane, 1/2, page(CR?), cat(Exotic, Physical)

Pressure Support [atm] Atmosphere, 0/5/10, page(CR?), upto(4), cat(Exotic, Physical),
	levelnames(x1, x10, x100, Immune),
	x(#InputReplace("Please enter your native pressure:", "[atm]", "Atmosphere", "Pressure Support"))

Protected [Sense], 5, page(EQ?), cat(Exotic, Physical),
	x(#InputReplace("Please enter the sense that is protected:", "[Sense]", "Sense", "Protected Sense"))

Radiation Tolerance, 5/10, page(CR?), upto(9), cat(Exotic, Physical),
	levelnames(PF 2, PF 5, PF 10, PF 20, PF 50, PF 100, PF 200, PF 500, "PF 1,000")

Regeneration, 5/10/15/25/50/150, levelnames(Very Slow: 1HP/24Hr, Slow: 1HP/12Hr, Regular: 1HP/6Hr, Fast: 1HP/Hr, Very Fast: 1HP/Min, Extreme: 1HP/Sec), mods(Regeneration), page(CR?), upto(6), cat(Exotic, Physical), taboo(DI:Slow Healing, DI:Unhealing)

Regrowth, 40, mods(Regrowth), page(CR?), cat(Exotic, Physical),
	taboo(DI:Missing Digit,
		DI:One Eye::level > @if(@hasmod(Minor) THEN 1 ELSE 0),
		DI:One Arm::level > @if(@hasmod(Minor) THEN 1 ELSE 0),
		DI:Lame (Crippled Legs)::level > @if(@hasmod(Minor) THEN 1 ELSE 0),
		DI:Lame (Legless)::level > @if(@hasmod(Minor) THEN 1 ELSE 0),
		DI:Lame (Missing Legs)::level > @if(@hasmod(Minor) THEN 1 ELSE 0),
		DI:One Hand::level > @if(@hasmod(Minor) THEN 1 ELSE 0) _
		)

Scanning Sense (Radar), 20, mods(Scanning Sense), page(CR?), cat(Exotic, Physical), rangehalfdam(1000),
	skillused(Perception)
Scanning Sense (Imaging Radar), 20, mods(Scanning Sense), page(CR?), cat(Exotic, Physical), rangehalfdam(100),
	skillused(Perception)
Scanning Sense (Ladar), 20, mods(Scanning Sense), page(CR?), cat(Exotic, Physical), rangehalfdam(100),
	skillused(Perception)
Scanning Sense (Para-Radar), 40, mods(Scanning Sense), page(CR?), cat(Exotic, Physical), rangehalfdam(100),
	skillused(Perception)
Scanning Sense (Sonar), 20, mods(Scanning Sense), page(CR?), cat(Exotic, Physical), rangehalfdam(10), rangemax(1000),
	skillused(Perception)

Sealed, 15, page(CR?), cat(Exotic, Physical)

Shrinking, 5/10, mods(Shrinking), page(CR?), cat(Exotic, Physical)

Speak Underwater, 5, mods(Speak Underwater), page(CR?), cat(Exotic, Physical), taboo(DI:Mute, DI:Cannot Speak)

Striker (Crushing), 5, levelnames([Description]), mods(Striker, Alternative Attack), page(CR?), cat(Exotic, Physical, Natural Attacks),
	x(#InputReplace("Describe this striker","[Description]",,Striker (Crushing))),
	damage(thr + @if(@hasmod(Weak) then 0 else owner::basethdice) + _
		@max(_
			@if("SK:Brawling::level" > ST:DX+1 then owner::basethdice else 0),
			@if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0))_
		)),
	damtype(cr), reach(C), parry(0), skillused(DX, Brawling, Striking)
Striker (Piercing), 5, levelnames([Description]), mods(Striker, Alternative Attack), page(CR?), cat(Exotic, Physical, Natural Attacks),
	x(#InputReplace("Describe this striker","[Description]",,Striker (Piercing))),
	damage(thr + @if(@hasmod(Weak) then 0 else owner::basethdice) + _
		@max(_
			@if("SK:Brawling::level" > ST:DX+1 then owner::basethdice else 0),
			@if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0))_
		)),
	damtype(pi), reach(C), parry(0), skillused(DX, Brawling, Striking)
Striker (Large Piercing), 6, levelnames([Description]), mods(Striker, Alternative Attack), page(CR?), cat(Exotic, Physical, Natural Attacks),
	x(#InputReplace("Describe this striker","[Description]",,Striker (Large Piercing))),
	damage(thr + @if(@hasmod(Weak) then 0 else owner::basethdice) + _
		@max(_
			@if("SK:Brawling::level" > ST:DX+1 then owner::basethdice else 0),
			@if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0))_
		)),
	damtype(pi+), reach(C), parry(0), skillused(DX, Brawling, Striking)
Striker (Cutting), 7, levelnames([Description]), mods(Striker, Alternative Attack), page(CR?), cat(Exotic, Physical, Natural Attacks),
	x(#InputReplace("Describe this striker","[Description]",,Striker (Cutting))),
	damage(thr + @if(@hasmod(Weak) then 0 else owner::basethdice) + _
		@max(_
			@if("SK:Brawling::level" > ST:DX+1 then owner::basethdice else 0),
			@if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0))_
		)),
	damtype(cut), reach(C), parry(0), skillused(DX, Brawling, Striking)
Striker (Impaling), 8, levelnames([Description]), mods(Striker, Alternative Attack), page(CR?), cat(Exotic, Physical, Natural Attacks),
	x(#InputReplace("Describe this striker","[Description]",,Striker (Impaling))),
	damage(thr + @if(@hasmod(Weak) then 0 else owner::basethdice) + _
		@max(_
			@if("SK:Brawling::level" > ST:DX+1 then owner::basethdice else 0),
			@if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0))_
		)),
	damtype(imp), reach(C), parry(0), skillused(DX, Brawling, Striking)
Striking ST, 5/10, gives(+1 to ST:Striking ST), mods(Striking ST, No Fine Manipulator, Size), page(CR?), cat(Exotic, Physical), conditional(+1 to ST:ST)

Subsonic Hearing, 5, mods(Subsonic Hearing), page(CR?), cat(Exotic, Physical), taboo(AD:Subsonic Speech, DI:Deafness),
	conditional(+1 to SK:Tracking when "quarry is moving on the ground"),
	skillused(Perception)
Subsonic Speech, 10, mods(Subsonic Speech), page(CR?), cat(Exotic, Physical), taboo(AD:Subsonic Hearing, DI:Deafness), 
	conditional(_
			+1 to SK:Tracking when "quarry is moving on the ground",
			-2 to SK:Fast-Talk _
		  	),
	skillused(Perception)

Teeth (Blunt Teeth), 0, page(CR?), cat(Exotic, Physical, Natural Attacks), taboo("AD:Teeth (Sharp Teeth)", "AD:Teeth (Sharp Beak)", "AD:Teeth (Fangs)")
Teeth (Sharp Teeth), 1, page(CR?), cat(Exotic, Physical, Natural Attacks), taboo("AD:Teeth (Blunt Teeth)", "AD:Teeth (Sharp Beak)", "AD:Teeth (Fangs)", "AD:Vampiric Bite")
Teeth (Sharp Beak), 1, page(CR?), cat(Exotic, Physical, Natural Attacks), taboo("AD:Teeth (Blunt Teeth)", "AD:Teeth (Sharp Teeth)", "AD:Teeth (Fangs)", "AD:Vampiric Bite")
Teeth (Fangs), 2, page(CR?), cat(Exotic, Physical, Natural Attacks), taboo("AD:Teeth (Blunt Teeth)", "AD:Teeth (Sharp Teeth)", "AD:Teeth (Sharp Beak)")

Telescopic Vision, 5/10, mods(Telescopic Vision), page(CR?), cat(Exotic, Physical), taboo(DI:Blindness)

Temperature Control, 5/10, mods(Temperature Control), page(CR?), cat(Exotic Physical, Exotic, Mental, Physical)

Terrain Adaptation, 5, mods(Terrain Adaptation), page(CR?), cat(Exotic, Physical),
	x(#InputToTag("Specify the type of terrain to which you are adapted (ice, sand, snow, etc.):", nameext, , "Terrain Adaptation"))

Ultrahearing, 5, mods(Ultrahearing), page(CR?), cat(Exotic, Physical), taboo(AD:Ultrasonic Speech, DI:Deafness),
	skillused(Perception)

Ultrasonic Speech, 10, mods(Ultrasonic Speech), page(CR?), cat(Exotic, Physical), taboo(AD:Ultrahearing, DI:Deafness),
	skillused(Perception)

Ultravision, 10, mods(Ultravision), page(CR?), cat(Exotic, Physical), taboo(AD:Hyperspectral Vision, DI:Blindness),
	conditional(_
			+2 to ST:Vision when "UV is present, to spot clues or hidden objects",
			+2 to SK:Forensics when "UV is present, to spot clues or hidden objects",
			+2 to SK:Observation when "UV is present, to spot clues or hidden objects",
			+2 to SK:Search when "UV is present, to spot clues or hidden objects"_
			),
	skillused(Perception)

Unaging, 15, mods(Unaging), page(CR?), cat(Exotic, Physical), taboo(AD:Extended Lifespan, DI:Short Lifespan, DI:Self-Destruct, DI:Terminally Ill, AD:Longevity)

Vacuum Support, 5, page(CR?), cat(Exotic, Physical)

Vibration Sense, 10, mods(Vibration Sense), page(CR?), cat(Exotic, Physical), skillused(Perception)

<Mundane Mental>
Absolute Timing, 2, page(CR?), cat(Mundane, Mental), taboo(AD:Chronolocation)

Animal Empathy, 5, page(CR?), cat(Mundane, Mental), taboo(DI:Frightens Animals),
	skillused(IQ)

Charisma, 5/10, mods(Charisma), gives(+1 to ST:Reaction, +1 To GR:Charisma), conditional(+1 to GR:Influence Skills when "making Influence rolls"), page(CR?), cat(Mundane, Mental)

Combat Reflexes, 15, gives(+1 To GR:Combat Reflexes, +2 To Fright Check), page(CR?), cat(Mundane, Mental), taboo(DI:Combat Paralysis, AD:Enhanced Time Sense)

Common Sense, 10, page(CR?), cat(Mundane, Mental),
	skillused(IQ)

Cultural Adaptability, 10/20, upto(2), levelnames( , Xeno-Adaptability), page(CR?), cat(Mundane, Mental)

Danger Sense, 15, mods(Danger Sense), page(CR?), cat(Mundane, Mental), taboo(AD:Precognition),
	skillused(Perception)

Eidetic Memory, 5, page(CR?), cat(Mundane, Mental), taboo(AD:Photographic Memory),
	skillused(IQ)

Empathy: Low-Sensitive, 5, gives(+1 To GR:Empathy), conditional(+1 to SK:Psychology when "you can converse with subject"), page(CR?), cat(Mundane, Mental), taboo(DI:Low Empathy),
	skillused(IQ-3)

Empathy: High-Sensitive, 15, gives(+3 To GR:Empathy), conditional(+3 to SK:Psychology when "you can converse with subject"), page(CR?), cat(Mundane, Mental), taboo(DI:Low Empathy),
	skillused(IQ)

Fearlessness, 2/4, gives(+1 To ST:Fright Check), page(CR?), cat(Mundane, Mental), taboo(DI:Fearfulness)

Photographic Memory, 10, page(CR?), cat(Mundane, Mental), taboo(AD:Eidetic Memory),
	skillused(IQ)

Language Talent, 10, gives(+1 To CA:Language), page(CR?), cat(Mundane, Mental)

Lightning Calculator, 2, page(CR?), cat(Mundane, Mental), taboo(AD:Intuitive Mathematician, DI:Innumerate)
Intuitive Mathematician, 5, page(CR?), cat(Mundane, Mental), taboo(AD:Lightning Calculator, DI:Innumerate)

Rapid Healing, 5, needs(ST:HT = 10), page(CR?), cat(Mundane, Physical), taboo(AD:Very Rapid Healing, DI:Slow Healing)
Very Rapid Healing, 15, needs(ST:HT = 12), page(CR?), cat(Mundane, Physical), taboo(AD:Rapid Healing, DI:Slow Healing)

Rapier Wit, 5, page(CR?), cat(Mundane, Mental),
	skillused(IQ-5, Public Speaking, Acting-5, Performance-2, Politics-5)

Single-Minded, 5, page(CR?), cat(Mundane, Mental), taboo(DI:Short Attention Span)

Trained By A Master, 30, page(CR?), cat(Mundane, Mental)

<Exotic Mental>
Awe, 30/40, mods(Terror), page(CR?), cat(Exotic Mental, Physical), description(This variation works exactly like the standard Terror advantage, except all rolls are made on the Awe and Confusion Check Table, CR?.),
	levelnames(Will-0, Will-1, Will-2, Will-3, Will-4, Will-5, Will-6, Will-7, Will-8, Will-9, Will-10, Will-11, Will-12, Will-13, Will-14, Will-15, Will-16, Will-17, Will-18, Will-19, Will-20, Will-21, Will-22, Will-23, Will-24, Will-25, Will-26, Will-27, Will-28, Will-29, Will-30, Will-31, Will-32, Will-33, Will-34, Will-35, Will-36, Will-37, Will-38, Will-39, Will-40, Will-41, Will-42, Will-43, Will-44, Will-45, Will-46, Will-47, Will-48, Will-49, Will-50, Will-51, Will-52, Will-53, Will-54, Will-55, Will-56, Will-57, Will-58, Will-59, Will-60, Will-61, Will-62, Will-63, Will-64, Will-65, Will-66, Will-67, Will-68, Will-69, Will-70, Will-71, Will-72, Will-73, Will-74, Will-75, Will-76, Will-77, Will-78, Will-79, Will-80, Will-81, Will-82, Will-83, Will-84, Will-85, Will-86, Will-87, Will-88, Will-89, Will-90, Will-91, Will-92, Will-93, Will-94, Will-95, Will-96, Will-97, Will-98, Will-99, Will-100)

Compartmentalized Mind, 50/100, mods(Compartmentalized Mind), page(CR?), cat(Exotic, Mental)

Confusion, 30/40, mods(Terror), page(CR?), cat(Exotic Mental, Physical), description(This variation works exactly like the standard Terror advantage, except all rolls are made on the Awe and Confusion Check Table, CR?.),
	levelnames(Will-0, Will-1, Will-2, Will-3, Will-4, Will-5, Will-6, Will-7, Will-8, Will-9, Will-10, Will-11, Will-12, Will-13, Will-14, Will-15, Will-16, Will-17, Will-18, Will-19, Will-20, Will-21, Will-22, Will-23, Will-24, Will-25, Will-26, Will-27, Will-28, Will-29, Will-30, Will-31, Will-32, Will-33, Will-34, Will-35, Will-36, Will-37, Will-38, Will-39, Will-40, Will-41, Will-42, Will-43, Will-44, Will-45, Will-46, Will-47, Will-48, Will-49, Will-50, Will-51, Will-52, Will-53, Will-54, Will-55, Will-56, Will-57, Will-58, Will-59, Will-60, Will-61, Will-62, Will-63, Will-64, Will-65, Will-66, Will-67, Will-68, Will-69, Will-70, Will-71, Will-72, Will-73, Will-74, Will-75, Will-76, Will-77, Will-78, Will-79, Will-80, Will-81, Will-82, Will-83, Will-84, Will-85, Will-86, Will-87, Will-88, Will-89, Will-90, Will-91, Will-92, Will-93, Will-94, Will-95, Will-96, Will-97, Will-98, Will-99, Will-100)

Detect, 5/10/20/30, mods(Detect), levelnames(Rare, Occasional, Common, Very Common), 
	upto(4), page(CR?), cat(Exotic Physical, Exotic, Mental, Physical),
	x(#InputToTag("Specify the specific substance or condition which you can detect:", nameext, , "Detect")),
	mode(Perceive|Analyze), skillused(Perception|IQ)

Linguistical Adaptability, 50, page(CR?), mods(Linguistical Adaptability), cat(Exotic, Mental)

Racial Memory, 15/40, levelnames(Passive, Active), page(CR?), upto(2), cat(Exotic, Mental),
	skillused(IQ)

Telecommunication (Infrared Communication), 10, mods(Telecommunication, Infrared Communication), page(CR?), cat(Exotic Physical, Exotic, Mental, Physical), rangehalfdam(500),
	skillused(IQ)
Telecommunication (Laser Communication), 15, mods(Telecommunication, Laser Communication), page(CR?), cat(Exotic Physical, Exotic, Mental, Physical), rangehalfdam(80 km.),
	skillused(IQ)
Telecommunication (Radio), 10, mods(Telecommunication, Radio), page(CR?), cat(Exotic Physical, Exotic, Mental, Physical), rangehalfdam(10 km.),
	skillused(IQ)
Telecommunication (Telesend), 30, mods(Telecommunication, Telesend), page(CR?), cat(Exotic Physical, Exotic, Mental, Physical), rangehalfdam(),
	skillused(IQ)

Terror, 30/40, mods(Terror), page(CR?), cat(Exotic Mental, Physical),
	levelnames(Will-0, Will-1, Will-2, Will-3, Will-4, Will-5, Will-6, Will-7, Will-8, Will-9, Will-10, Will-11, Will-12, Will-13, Will-14, Will-15, Will-16, Will-17, Will-18, Will-19, Will-20, Will-21, Will-22, Will-23, Will-24, Will-25, Will-26, Will-27, Will-28, Will-29, Will-30, Will-31, Will-32, Will-33, Will-34, Will-35, Will-36, Will-37, Will-38, Will-39, Will-40, Will-41, Will-42, Will-43, Will-44, Will-45, Will-46, Will-47, Will-48, Will-49, Will-50, Will-51, Will-52, Will-53, Will-54, Will-55, Will-56, Will-57, Will-58, Will-59, Will-60, Will-61, Will-62, Will-63, Will-64, Will-65, Will-66, Will-67, Will-68, Will-69, Will-70, Will-71, Will-72, Will-73, Will-74, Will-75, Will-76, Will-77, Will-78, Will-79, Will-80, Will-81, Will-82, Will-83, Will-84, Will-85, Will-86, Will-87, Will-88, Will-89, Will-90, Will-91, Will-92, Will-93, Will-94, Will-95, Will-96, Will-97, Will-98, Will-99, Will-100)

<Mundane Physical>
Acute Hearing, 2/4, gives(+1 To ST:Hearing), page(CR?), cat(Mundane, Physical), taboo(DI:Deafness)
Acute Taste and Smell, 2/4, gives(+1 To ST:Taste/Smell), page(CR?), cat(Mundane, Physical), taboo("DI:No Sense of Smell/Taste")
Acute Touch, 2/4, gives(+1 To ST:Touch), page(CR?), cat(Mundane, Physical), taboo(DI:Numb)
Acute Vision, 2/4, gives(+1 To ST:Vision, +1 To SK:Observation), conditional(+1 To SK:Tracking when "vision is a factor"), page(CR?), cat(Mundane, Physical), taboo(DI:Blindness)

Ambidexterity, 5, page(CR?), cat(Mundane, Physical), taboo(DI:One Arm, DI:One Hand)

Appearance, 0/4/12/12/16/16/20, mods(Attractive, Appearance), upto(6), page(CR?),
	levelnames(Average, Attractive, Beautiful, Handsome, Very Beautiful, Very Handsome, Transcendent), 
	cat(Mundane, Physical, Physical Appearance), taboo(DI:Appearance),
	gives(_
		=@if(_
			(@hasmod(Androgynous) | @hasmod(Impressive) | @hasmod(Universal)) & %level >= 2 _
			then _
				@indexedvalue(%level, 0, 3, 3, 4, 4, 5) _
			else _
				@indexedvalue(%level, 1, 2, 2, 2, 2, 2) _
			) to ST:Unappealing,
		=@if(_
			(@hasmod(Androgynous) | @hasmod(Impressive) | @hasmod(Universal)) & %level >= 2 _
			then _
				@indexedvalue(%level, 0, 3, 3, 4, 4, 5) _
			else _
				@indexedvalue(%level, 1, 4, 4, 6, 6, 8) _
			) to ST:Appealing,
		=@if(_
			(@hasmod(Androgynous) | @hasmod(Impressive) | @hasmod(Universal)) & %level >= 2 _
			then _
				@indexedvalue(%level, 0, 3, 3, 4, 4, 5) _
			else _
				@indexedvalue(%level, 1, 4, 4, 6, 6, 8) _
			) to SK:Sex Appeal _
		)

Extra Attack, 25/50, page(CR?), mods(Extra Attack), cat(Mundane, Physical)

Fit, 5, page(CR?), cat(Mundane, Physical), taboo(AD:Very Fit, DI:Unfit, DI:Very Unfit), conditional(+1 to ST:HT), gives(+1 to ST:Consciousness Check, +1 to ST:Death Check)
Very Fit, 15, page(CR?), cat(Mundane, Physical), taboo(AD:Fit, DI:Unfit, DI:Very Unfit), conditional(+2 to ST:HT), gives(+2 to ST:Consciousness Check, +2 to ST:Death Check)

Flexibility, 5, gives(+3 To GR:Flexibility), page(CR?), cat(Mundane, Physical), taboo(AD:Double-Jointed)
Double-Jointed, 15, gives(+5 To GR:Flexibility), page(CR?), cat(Mundane, Physical), taboo(AD:Flexibility)

Hard to Kill, 2/4, page(CR?), cat(Mundane, Physical), taboo(DI:Easy to Kill), gives(+1 to ST:Death Check)

Hard to Subdue, 2/4, page(CR?), cat(Mundane, Physical), gives(+1 to ST:Consciousness Check)

High Manual Dexterity, 5/10, page(CR?), cat(Mundane, Physical), taboo("DI:Ham-Fisted", DI:No Fine Manipulators, DI:No Manipulators),
	conditional(_
			+1 to GR:High Manual Dexterity when "performing DX-based tasks",
			+1 to SK:Machinist when "performing fine DX-based tasks",
			+1 to SK:Mechanic when "performing fine DX-based tasks" _
			)

High Pain Threshold, 10, page(CR?), cat(Mundane, Physical), taboo(DI:Low Pain Threshold, AD:Supernatural Durability),
	skillused(ST:Will+3), mode(ignore pain)

Less Sleep, 2/4, page(CR?), cat(Mundane, Physical), taboo(AD:Doesn't Sleep, DI:Extra Sleep)

Longevity, 2, page(CR?), cat(Mundane, Physical), taboo(AD:Unaging)

Night Vision, 1/2, page(CR?), upto(9), cat(Mundane, Physical), taboo(DI:Blindness, DI:Night Blindness, AD:Dark Vision)

Perfect Balance, 15, gives(+1 To GR:Perfect Balance, +4 to SK:Immovable Stance), page(CR?), cat(Mundane, Physical)

Peripheral Vision, 15, mods(Peripheral Vision), page(CR?), cat(Mundane, Physical), taboo(DI:Blindness)

Reduced Consumption, 2/4, upto(4), mods(Reduced Consumption), page(CR?), cat(Mundane, Physical), taboo(AD:Doesn't Eat or Drink, DI:Increased Consumption)

Resistant, 5/10/15/30, mods(Resistant), levelnames(Rare, Occasional, Common, Very Common), 
	page(CR?), upto(4), cat(Mundane, Physical),
	initmods( Degree: Immunity, *1, shortname(Immunity), group(Resistant) ),
	x(_
		#InputToTagReplace("Plese specify the noxious item or substance you are Resistant or Immune to:" , nameext, , "Resistant"),
		#buildit _
	 )

Temperature Tolerance, 1/2, page(CR?), cat(Mundane, Physical), Mods(Temperature Tolerance)

Voice, 10, gives(+2 To GR:Voice), page(CR?), cat(Mundane, Physical), taboo(DI:Mute, DI:Disturbing Voice, DI:Stuttering),
	conditional(+2 to ST:Reaction when "your voice can be heard")

<Paranormal Physical>
Mindlink, 5/10/20/30, page(CR?), cat(Paranormal, Mental),
	levelnames(1 person, 2-9 people, 10-99 people, 100-999 people, "1,000-9,999 people", "10,000-99,999 people", "100,000-999,999 people", "1,000,000-9,999,999 people", "10,000,000-99,999,999 people", up to 1 Billion people, up to 10 Billion people, up to 100 Billion people, up to 1 Trillion people, up to 10 Trillion people, up to 100 Trillion people, 16, 17, 18, 19, 20)

<Mundane Social>
Ally, 1/2/3/5/10, upto(5), 
	x(#InputToTag("Please describe the nature of the Ally:", nameext, , "Ally")),
	levelnames(25% of starting points, 50% of starting points, 75% of starting points, 100% of starting points, 150% of starting points), 
	mods(Ally, Frequency of Appearance, Favor), page(CR?), cat(Mundane, Social),
	initmods(_
			Frequency of Appearance: roll of  9 or less, *1, shortname(9 or less), group(Frequency of Appearance) _
			)

Alternate Identity, 5/15, levelnames(Legal, Illegal), page(CR?), upto(2), cat(Mundane, Social)

Claim to Hospitality, 1/2/5/10, page(CR?), upto(4), cat(Mundane, Social), conditional(=+3 to ST:Reaction when "members of same group"),
	x(#InputToTag("Please describe the nature of the Claim to Hospitality:", nameext, , "Claim to Hospitality"))

Fashion Sense, 5, page(CR?), conditional(+1 to ST:Reaction when in social situations, when you have a chance to plan your attire in advance), cat(Mundane, Social, Other Physical Features)

Patrons, 10/15/20/25/30, mods(Frequency of Appearance, Patron, Favor), page(CR?), cat(Mundane, Social), upto(5),
	levelnames(,,,,), init(%PatronAliasList%),
	x(_
		#InputToTag("Please describe the nature of the Patron:", nameext, , "Patrons"),
		#ChoiceList(_
				name(Patron),
				title(Patron Power),
				text(Select the power level of your Patron:),
				picksallowed(1),
				method(bynumber),
				list(_
					"[10] A powerful individual (usually built on at least 150% of the PC's starting points)",
					"[10] Fairly powerful organization (assets of at least 1,000 times starting wealth for the world)",
					"[15] An extremely powerful individual (built on at least twice the PC's starting points)",
					"[15] A powerful organization (assets of at least 10,000 times starting wealth)",
					"[20] An ultra-powerful individual (based on as many points as the GM wants!)",
					"[20] A very powerful organization (assets of at least 100,000 times starting wealth)",
					"[25] An extremely powerful organization (assets of at least 1 million times starting wealth)",
					"[30] A national government or giant multinational organization (net worth incalculable)",
					"[30] A true god who appears personally to intervene on your behalf"_
				),
			aliaslist(_
					"1",
					"1",
					"2",
					"2",
					"3",
					"3",
					"4",
					"5",
					"5",
					)_
				)_
			),
	initmods(_
		   Frequency of Appearance: roll of  9 or less, *1, shortname(9 or less), group(Frequency of Appearance) _
		   ),
	description(_
			A powerful individual (usually built on at least 150% of the PC's starting points) or a fairly powerful organization (assets of at least 1,000 times starting wealth for the world): 10 POINTS _
			An extremely powerful individual (built on at least twice the PC's starting points) or a powerful organization (assets of at least 10,000 times starting wealth): 15 POINTS _
			An ultra-powerful individual (based on as many points as the GM wants!) or a very powerful organization (assets of at least 100,000 times starting wealth): 20 POINTS _
			An extremely powerful organization (assets of at least 1 million times starting wealth): 25 POINTS _
			A national government or giant multinational organization (net worth incalculable), or a true god who appears personally to intervene on your behalf: 30 POINTS _
			)

Pitiable, 5, page(CR?), cat(Mundane, Social, Other Physical Features),
	conditional(+3 to ST:Reaction when you appear to be in a position of helplessness, weakness, or need)

Wealth, 10/20/30/50/75, upto(16), page(CR?), levelnames([Average], Comfortable, Wealthy, Very Wealthy, Filthy Rich, Multimillionaire 1, Multimillionaire 2, Multimillionaire 3, Multimillionaire 4, Multimillionaire 5, Multimillionaire 6, Multimillionaire 7, Multimillionaire 8, Multimillionaire 9, Multimillionaire 10, Multimillionaire 11, Multimillionaire 12), 
	mods(Wealth), taboo(DI:Wealth), cat(Mundane, Social, Wealth), 
	gives(=@indexedvalue(%level, 10, 40, 190, (10^(me::level-1))-10) To ST:Wealth Modifier, =@if(AD:Status::level = 0 THEN @indexedvalue(%level, 0, 1, 1, 1, 2, 3) ELSE 0) To ST:Status, =@if(AD:Status::level > 0 THEN @indexedvalue(%level, 0, 1, 1, 1, 2, 3) ELSE 0) To AD:Status)

Independent Income, 1/2, page(CR?), upto(20), cat(Mundane, Social, Wealth)

Reputation, 5/10, mods(Reputation, Reputation Advantage), page(CR?), upto(4), cat(Mundane, Social, Influence),
	initmods(_
			People Affected: Almost everyone in the Star Wars universe, *1, shortname(Almost everyone), group(Reputation) _
			| Frequency of Recognition: All the time, *1, shortname(All the time), group(Reputation) _
			),
	conditional(+1 to ST:Reaction, +1 to SK:Indimidation when "your reputation counts", -1 to SK:Intimidation when "your reputation works against you"),
	x(#InputToTag("Please describe the reason for your reputation:", nameext, , "Reputation"))

Signature Gear, 1/2, page(CR?), cat(Mundane, Social, Wealth), gives(+(5* @indexedvalue(ST:Tech Level::basevalue + 0, +1, 5, 7.5, 10, 20, 50, 100, 150, 200, 300, 500, 750, 1000)) to ST:Signature Gear), taboo(ST:Signature Gear < 0),
	x(#InputToTag("Please describe the nature of the Signature Gear:", nameext, , "Signature Gear")),
	replacetags(in "ST:Signature Gear" with "mainwin(15), hide()")

Social Regard (Feared), 5/10, mods(Social Regard), gives(+1 to ST:Reaction), page(CR?), upto(4), cat(Mundane, Social)
Social Regard (Respected), 5/10, mods(Social Regard), gives(+1 to ST:Reaction), page(CR?), upto(4), cat(Mundane, Social)
Social Regard (Venerated), 5/10, mods(Social Regard), gives(+1 to ST:Reaction), page(CR?), upto(4), cat(Mundane, Social)

Status, 5/10, page(CR?), upto(8 - ST:Status Max::Score), gives(+1 to ST:Status, =-me::baselevel to ST:Status Max), cat(Mundane, Social, Influence), mods(Status), taboo(DI:Status)
Status (Imperial), 5/10, page(CR?), upto(5), gives(+1 to ST:Status, =-me::baselevel to ST:Status Max), cat(Mundane, Social, Influence), mods(Status), taboo(DI:Status)
Status (Republic), 5/10, page(CR?), upto(2), gives(+1 to ST:Status, =-me::baselevel to ST:Status Max), cat(Mundane, Social, Influence), mods(Status), taboo(DI:Status)
Status (Trade Federation), 5/10, page(CR?), upto(2), gives(+1 to ST:Status, =-me::baselevel to ST:Status Max), cat(Mundane, Social, Influence), mods(Status), taboo(DI:Status)
Status (C.I.S.), 5/10, page(CR?), upto(2), gives(+1 to ST:Status, =-me::baselevel to ST:Status Max), cat(Mundane, Social, Influence), mods(Status), taboo(DI:Status)

Rank, 5/10, mods(Rank), page(CR?), upto(8), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status),
	x(#InputToTag("Please describe the nature of the Rank:", nameext, , "Rank"))

Administrative Rank, 5/10, mods(Rank), page(CR?), upto(8), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)
Merchant Rank, 5/10, mods(Rank), page(CR?), upto(8), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)
Military Rank, 5/10, mods(Rank), page(CR?), upto(8), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)
Police Rank, 5/10, mods(Rank), page(CR?), upto(8), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)
Religious Rank, 5/10, mods(Rank), page(CR?), upto(8), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)
Courtesy Rank, 1/2, page(CR?), upto(8), cat(Mundane, Social, Influence),
	x(#InputToTag("Please describe the nature of the Courtesy Rank:", nameext, , "Courtesy Rank"))

Administrative Rank (Imperial), 5/10, mods(Rank), page(CR?), upto(18), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)
Administrative Rank (Republic), 5/10, mods(Rank), page(CR?), upto(12), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)
Administrative Rank (Trade Federation), 5/10, mods(Rank), page(CR?), upto(12), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)
Administrative Rank (C.I.S.), 5/10, mods(Rank), page(CR?), upto(12), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)

Military Rank (Imperial), 5/10, mods(Rank), page(CR?), upto(12), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)
Military Rank (Republic), 5/10, mods(Rank), page(CR?), upto(10), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)
Military Rank (Trade Federation), 5/10, mods(Rank), page(CR?), upto(10), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)
Military Rank (C.I.S.), 5/10, mods(Rank), page(CR?), upto(10), cat(Mundane, Social, Influence),
	gives(=@if(AD:Status::level = 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to ST:Status, =@if(AD:Status::level > 0 THEN @if(@hasmod(Rank replaces Status) THEN %level ELSE @indexedvalue(%level,0,1,1,1,2,2,2,3)) ELSE 0) to AD:Status)

<Cultural Familiarity>
Cultural Familiarity, 1, page(CR?), mods(Cultural Familiarity), cat(Mundane, Social, Cultural Familiarity, Social Background), taboo(Native Cultural Familiarities > 1),
	x(#InputToTagReplace(Specify the culture you're familiar with here:, name, , Cultural Familiarity))
Cultural Familiarity (Alien Culture), 2, page(CR?), cat(Mundane, Social, Cultural Familiarity, Social Background), taboo(Native Cultural Familiarities > 1),
	x(#InputToTagReplace(Specify the culture you're familiar with here:, name, , Cultural Familiarity (Alien Culture)))
Cultural Familiarity (Native), 0, page(CR?), cat(Mundane, Social, Cultural Familiarity, Social Background), gives(+1 to ST:Native Cultural Familiarities), taboo(Native Cultural Familiarities > 1),
	x(#InputToTagReplace(Specify the culture you're familiar with here:, name, Your own culture, Cultural Familiarity (Native)))

Imperial, 1, page(CR?), cat(Cultural Familiarity, Social Background)
Imperial (Native), 0, page(CR?), cat(Cultural Familiarity, Social Background), gives(+1 to ST:Native Cultural Familiarities), taboo(Native Cultural Familiarities > 1)
Republican, 1, page(CR?), cat(Cultural Familiarity, Social Background)
Republican (Native), 0, page(CR?), cat(Cultural Familiarity, Social Background), gives(+1 to ST:Native Cultural Familiarities), taboo(Native Cultural Familiarities > 1)

<Language>
Language, 2/4, page(CR?), upto(3 LimitingTotal), mods(Language), levelnames([None], Broken, Accented, Native), cat(Mundane, Social, Language, Language Spoken, Language Written, Social Background), taboo(Native Languages > 1),
	x(#InputToTagReplace("Specify the language here:", name, "Galactic Basic", "Language"))
Language (Spoken), 1/2, page(CR?), upto(3 LimitingTotal), mods(Language), levelnames([None], Broken, Accented, Native), cat(Mundane, Social, Language, Language Spoken, Social Background), taboo(Native Languages > 1),
	x(#InputToTagReplace("Specify the language here:", name, "Galactic Basic", "Language (Spoken)"))
Language (Written), 1/2, page(CR?), upto(3 LimitingTotal), mods(Language), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Mundane, Social, Language, Language Written, Social Background), taboo(Native Languages > 1),
	ndl(@if(ST:Tech Level::basescore <=4 THEN 1 ELSE 0)),
	x(#InputToTagReplace("Specify the language here:", name, "Galactic Basic", "Language (Written)"))

Language - Native, 2/4, displaycost(0/-2/+), init(3), page(CR?), upto(3 LimitingTotal), mods(Language), levelnames([None], Broken, Accented, Native), cat(Mundane, Social, Language, Language Spoken, Language Written, Social Background), taboo(Native Languages > 1),
	x(#InputToTagReplace("Specify the language here:", name, "Galactic Basic", "Language - Native")),
	initmods(Native Language, -6, gives(=+1 to ST:Native Languages), formula(-@if(AD:Language Talent > 0 then 4 else 6)), forceformula(yes), group(Language), page(CR?))
Language - Native (Spoken), 1/2, displaycost(0/-1/+), init(3), page(CR?), upto(3 LimitingTotal), mods(Language), levelnames([None], Broken, Accented, Native), cat(Mundane, Social, Language, Language Spoken, Social Background), taboo(Native Languages > 1),
	x(#InputToTagReplace("Specify the language here:", name, "Galactic Basic", "Language - Native (Spoken)")),
	initmods(Native Speaker, -3, gives(=+0.5 to ST:Native Languages), formula(-@if(AD:Language Talent > 0 then 2 else 3)), forceformula(yes), group(Language), page(CR?))
Language - Native (Written), 1/2, displaycost(-3/-2/+), init(0), page(CR?), upto(3 LimitingTotal), mods(Language), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Mundane, Social, Language, Language Written, Social Background), taboo(Native Languages > 1),
	ndl(@if(ST:Tech Level::basescore <=4 THEN 1 ELSE 0)),
	x(#InputToTagReplace("Specify the language here:", name, "Galactic Basic", "Language - Native (Written)")),
	initmods(Native Writer, -3, gives(=+0.5 to ST:Native Languages), formula(-@if(AD:Language Talent > 0 then 2 else 3)), forceformula(yes), group(Language), page(CR?))

Abinysh (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Abinysh (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Abinysh, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Abyssin (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Abyssin (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Abyssin, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Adarese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Adarese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Adarese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Adnerem (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Adnerem (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Adnerem, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Advb (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Advb (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Advb, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Aganof (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Aganof (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Aganof, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Akwin (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Akwin (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Akwin, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Aleen (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Aleen (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Aleen, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Amanin (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)

Anomid (Gesturer/Nonverbal), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Written), taboo(Native Languages > 1)

Anselmian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)

Anx (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Anx (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Anx, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Any (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Any (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Any, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Anzati (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Anzati (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Anzati, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Aqualish (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Aqualish (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Aqualish, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Arcona (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Arcona (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Arcona, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Arkanian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Arkanian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Arkanian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ayrou (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ayrou (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ayrou, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Balosar (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Balosar (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Balosar, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Barabel (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Barabel (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Barabel, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Batorese (Spoken), 1/2, page(CR?), needs(TE:Blood Carver),mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Batorese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Batorese, 2/4, page(CR?), needs(TE:Blood Carver),mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Berrite (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Berrite (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Berrite, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Besalisk (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Besalisk (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Besalisk, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Bimm (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Bimm (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Bimm, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Binary (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Binary (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Binary, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Bith (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Bith (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Bith, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Bothese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Bothese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Bothese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Brubb (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Brubb (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Brubb, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Caamasi (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Caamasi (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Caamasi, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Caarimala (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Caarimala (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Caarimala, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Catharese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Catharese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Catharese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Celegian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Cerean (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Cerean (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Cerean, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Chadra-Fan (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Chadra-Fan (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Chadra-Fan, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Chagri (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Chagri (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Chagri, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Charon (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Charon (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Charon, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Chev (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Chev (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Chev, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Chevin (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Chevin (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Chevin, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Cheunh (Spoken), 1/2, page(CR?), needs(TE:Chiss|AD:Language Talent), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Cheunh (Written), 1/2, page(CR?), needs(TE:Chiss|AD:Language Talent), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Cheunh, 2/4, page(CR?), needs(TE:Chiss|AD:Language Talent), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Clawdite (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Clawdite (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Clawdite, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Codruese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Codruese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Codruese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Colicoid (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Colicoid, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Cragii (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Cragii (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Cragii, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Dantari (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Dantari (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Dantari, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Dashadi (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Dashadi (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Dashadi, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Defel (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Defel (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Defel, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Devaronese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Devaronese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Devaronese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Devlikk (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Devlikk (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Devlikk, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Dosh (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Dosh (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Dosh, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Draethos (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Draethos (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Draethos, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Drallish (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Drallish (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Drallish, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Dressellese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Dressellese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Dressellese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Dug (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Dug (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Dug, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Duinuogwuin (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Duinuogwuin (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Duinuogwuin, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Durese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Durese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Durese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ebranese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ebranese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ebranese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Echani (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Echani (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Echani, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Elom (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Elom (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Elom, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Elomin (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Elomin (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Elomin, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Em'liy (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Em'liy (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Em'liy, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Etti (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Etti (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Etti, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ewokese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)

Falleen (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Falleen (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Falleen, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Farghul (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Farghul (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Farghul, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Feeorin (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Feeorin (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Feeorin, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Fian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Fian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Fian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Filordian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Filordian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Filordian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Frozian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Frozian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Frozian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Galactic Basic (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Galactic Basic (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Galactic Basic, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Gamorrean (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Gamorrean (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Gamorrean, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Gand (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Gand (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Gand, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Geonosian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Geonosian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Geonosian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Givin (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Givin (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Givin, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Gossam (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Gossam (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Gossam, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Gotal (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Gotal (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Gotal, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Gran (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Gran (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Gran, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Gunganese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Gunganese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Gunganese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

H'nemthe (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
H'nemthe (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
H'nemthe, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Herglese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Herglese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Herglese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ho'Din (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ho'Din (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ho'Din, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Houkese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Houkese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Houkese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Huttese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Huttese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Huttese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Iktotchese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Iktotchese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Iktotchese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Illarese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Illarese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Illarese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Issorian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Issorian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Issorian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ithorese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ithorese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ithorese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Jawa (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1), needs(TE:Jawa)
Jawa (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1), needs(TE:Jawa)
Jawa, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1), needs(TE:Jawa)

Jawa Trade Language(Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)

Jenet (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)

Kaminoan (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Kaminoan (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Kaminoan, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Kel Dor (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Kel Dor (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Kel Dor, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Kerestese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Kerestese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Kerestese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Khilese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1), needs(TE:Khil)
Khilese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Khilese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1), needs (TE:Khil)

Kian'thar (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Kian'thar (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Kian'thar, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Kitonese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Kitonese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Kitonese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Klatooinian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)

Koorivar (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Koorivar (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Koorivar, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Kreva (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Kreva (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Kreva, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Krish (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Krish (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Krish, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Kubazi (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Kubazi (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Kubazi, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Kushiban (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Kushiban (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Kushiban, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Lannik (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Lannik (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Lannik, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Leku (Gesturer/Nonverbal), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Lepese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Lepese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Lepese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Lowickese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Lowickese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Lowickese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Mando'a (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Mando'a (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Mando'a, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Meerian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Meerian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Meerian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Menahu (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Menahu (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Menahu, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Merisian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Meriasian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Merisian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Miralukese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Miralukese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Miralukese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Mon Calamarian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Mon Calamarian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Mon Calamarian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Morseerian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Morseerian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Morseerian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Mrlsstese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Mrlsstese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Mrlsstese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Muun (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Muun (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Muun, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Myneyrsh (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)

Nagaian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Nagaian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Nagaian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Nautila (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Nautila (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Nautila, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Nazzar (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Nazzar (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Nazzar, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Neimoidian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Neimoidian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Neimoidian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Neti (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Neti (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Neti, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Nikto (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Nikto (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Nikto, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Nimbanese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Nimbanese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Nimbanese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Noehonese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)

Honoghran (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Honoghran (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Honoghran, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Nosaurian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Nosaurian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Nosaurian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Nuknog (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Nuknog (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Nuknog, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Omwatese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Omwatese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Omwatese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ortolan (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ortolan (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ortolan, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Paigun (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Paigun (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Paigun, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Pak Pak (Gesturer/Nonverbal), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Pau'an (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Pau'an (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Pau'an, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Pheromone, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1),initmods({Secret, -50%,group(Patron),page(CR?),level(1),valuenum(-50)})

Phindian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Phindian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Phindian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Pho Ph'eahese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Pho Ph'eahese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Pho Ph'eahese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Psadan (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)

Quarrenese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Quarrenese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Quarrenese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Quermian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Quermian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Quermian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Quockrese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Quockrese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Quockrese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Qwohog (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Qwohog (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Qwohog, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Rakatan (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Rakatan (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Rakatan, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ranat (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ranat (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ranat, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ranth (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ranth (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ranth, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Rodese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Rodese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Rodese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ropagese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ropagese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ropagese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ruurese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ruurese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ruurese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Rybese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Rybese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Rybese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ryl (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ryl (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ryl, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ryn (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ryn (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ryn, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Sakiyan (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Sakiyan (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Sakiyan, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Sanyassan (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Sanyassan (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Sanyassan, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Sarkese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Sarkese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Sarkese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Sauvax (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Sauvax (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Sauvax, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Sedrian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Sedrian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Sedrian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Seikoshan (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Seikoshan (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Seikoshan, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Sekctese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Sekctese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Sekctese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Selonian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Selonian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Selonian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Selkath (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Selkath (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Selkath, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Shawda Ubb (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Shawda Ubb (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Shawda Ubb, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)


Shi'idese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Shi'idese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Shi'idese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Shimiese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Shimiese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Shimiese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Shistavanen (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Shistavanen (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Shistavanen, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Shusugant (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Shusugant (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Shusugant, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Shyriiwook (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Shyriiwook (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Shyriiwook, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Siniteen (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Siniteen (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Siniteen, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Skakoverbal (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Skakoform (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Skako, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Skrilling (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Skrilling (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Skrilling, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

S'kytric (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
S'kytric (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
S'kytric, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Sludese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Sludese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Sludese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Sluissese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Sluissese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Sluissese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Snivvian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Snivvian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Snivvian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Squibbian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Squibbian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Squibbian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Sriluurian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Sriluurian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Sriluurian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ssi-Ruuvi (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ssi-Ruuvi (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ssi-Ruuvi, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Sullustese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Sullustese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Sullustese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Sunesise (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Sunesise (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Sunesise, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Svivreni (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Svivreni (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Svivreni, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Swoken (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Swoken (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Swoken, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Talz (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Talz (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Talz, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Tarasinese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Tarasinese (Gesturer/Nonverbal), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Tarasinese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Tarrese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Tarrese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Tarrese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Tchuukthese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Tchuuktese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Tchuukthese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Teek (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Teek (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Teek, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Teltiorese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Teltiorese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Teltiorese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Temolish (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Temolish (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Temolish, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Thakwaese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Thakwaese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Thakwaese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Theelinese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Theelinese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Theelinese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Thisspiasian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Thisspiasian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Thisspiasian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Tibranese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Tibranese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Tibranese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Tiss'shar (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Tiss'shar (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Tiss'shar, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Togorian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Togorian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Togorian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Togruti (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Togruti (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Togruti, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Toongese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Toongese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Toongese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Toydarian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Toydarian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Toydarian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Transes (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Tranese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Tranese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Trianii (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Trainii (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Trianii, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

T'surrese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
T'surrese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
T'surrese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Tunrothese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Tunrothese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Tunrothese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Tusken (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Tusken (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Tusken, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ubeninal (Sign), 2/4,page(CR?),mods(Language),upto(3 LimitingTotal),levelnames([Illiterate], Semi-Literate, Literate, Native),taboo(Native Languages > 1),tl(),usernotes(),familiarities(), cat(Language, Language Written),initmods({"Sign", 0%/-50%,group(Language),page(CR?),upto(2),level(2),valuenum(-50)})

Ubese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ubese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ubese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Ugnaught (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Ugnaught (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Ugnaught, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Umbarese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Umbarese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Umbarese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Vaathkree (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Vaathkree (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Vaathkree, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Verpine (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Verpine (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Verpine, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Votese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Votese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Votese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Vorzydiak (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Vorzydiak (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Vorzydiak, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Vratix (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Vratix (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Vratix, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Vulpterish (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Vulpterish (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Vulpterish, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Vuvrian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Vuvrian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Vuvrian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Whiphid (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Whiphid (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Whiphid, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Woostese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Woostese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Woostese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Worxi (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Worxi (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Worxi, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Wroonian (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Wroonian (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Wroonian, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Xextese (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Xextese (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Xextese, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Yarkora (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Yarkora (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Yarkora, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Yevethan (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Yevethan (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Yevethan, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Yinchorri (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Yinchorri (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Yinchorri, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Yuuzhan Vong (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Yuuzhan Vong (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Yuuzhan Vong, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Yuzz (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Yuzz (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Yuzz, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Yuzzum (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Yuzzum (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Yuzzum, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

Zabrak (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
Zabrak (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
Zabrak, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

ZeHethbra (Spoken), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken), taboo(Native Languages > 1)
ZeHethbra (Written), 1/2, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([Illiterate], Semi-Literate, Literate, Native), cat(Language, Language Written), taboo(Native Languages > 1)
ZeHethbra, 2/4, page(CR?), mods(Language), upto(3 LimitingTotal), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written), taboo(Native Languages > 1)

<Talents>
Alien Friend, 5/10, gives(+1 To GR:Alien Friend Gives), page(CR?), upto(4), cat(Mundane, Mental, Talents),
   conditional(+1 to ST:Reaction, +1 to GR:Alien Friend Conditionals when "an Alien specialty"), description(Anthropology (any alien culture), Diplomacy, Expert Skill (Xenology), History (any alien specialty), Psychology (any alien race))

Animal Friend, 5/10, gives(+1 To GR:Animal Friend), page(CR?), upto(4), cat(Mundane, Mental, Talents), mods(Talents),
	conditional(+1 to ST:Reaction), description(Animal Handling, Packing, Riding, Teamster, Veterinary)

Artificer, 10/20, gives(+1 To GR:Artificer), page(CR?), upto(4), cat(Mundane Mental, Mundane, Mental, Talents), mods(Talents),
	conditional(+1 to ST:Reaction), description(Armoury, Carpentry, Electrician, Electronics Repair, Engineer, Machinist, Masonry, Mechanic, Smith)

Born Tactician, 10/20, upto(5), gives(+1 to GR:Born Tactician), conditional(+1 to ST:Reaction), page(CR?), cat(Talents),
	description(Expert Skill (Military Science), History (Military), Intelligence Analysis, Leadership, Savoir-Faire (Military), Soldier, Strategy (Land), Tactics),
	needs($if(%level = 5 THEN "AD:Destiny = 2|DI:Destiny = 2"))

Business Acumen, 10/20, gives(+1 To GR:Business Acumen), page(CR?), upto(4), cat(Mundane, Mental, Talents), mods(Talents),
	conditional(+1 to ST:Reaction), description(Accounting, Administration, Economics, Finance, Gambling, Market Analysis, Merchant, Propaganda)

Cyberneticist, 5/10, gives(+1 To GR:Cyberneticist), page(CR?), upto(4), cat(Mundane, Mental, Talents),
   conditional(+1 to ST:Reaction), description(Computer Hacking, Computer Operation, Computer Programming, Computer Programming (AI), Electronics Repair (Computers))

Gifted Artist, 5/10, gives(+1 To GR:Gifted Artist), page(CR?), upto(4), cat(Mundane, Mental, Talents), mods(Talents),
	conditional(+1 to ST:Reaction), description(Artist, Jeweler, Leatherworking, Photography, Sewing)

Green Thumb, 5/10, gives(+1 To GR:Green Thumb), page(CR?), upto(4), cat(Mundane, Mental, Talents), mods(Talents),
	conditional(+1 to ST:Reaction), description(Biology, Farming, Gardening, Herb Lore, Naturalist)

Healer, 10/20, gives(+1 To GR:Healer), page(CR?), upto(4), cat(Mundane, Mental, Talents), mods(Talents),
	conditional(+1 to ST:Reaction), description(Diagnosis, Esoteric Medicine, First Aid, Pharmacy, Physician, Physiology, Psychology, Surgery, Veterinary)

Hot Pilot, 5/10, gives(+1 To GR:Hot Pilot), page(CR?), upto(4), cat(Mundane, Mental, Talents),
   conditional(+1 to ST:Reaction), description(Gunner (any), Navigation (Air or Space), Piloting (all types))

Intuitive Admiral, 10/20, upto(4), gives(+1 to GR:Intuitive Admiral), conditional(+1 to ST:Reaction), page(CR?), cat(Talents),
	description(Crewman (Spacecraft), Expert Skill (Military Science), History (Military), Intelligence Analysis, Leadership, Savoir-Faire (Military), Shiphandling (Spaceship), Shiphandling (Starship), Strategy (Space))

Martial Prowess, 15/30, gives(+1 To GR:Martial Prowess), page(CR?), upto(4), cat(Mundane, Physical, Talents),
	conditional(+1 to ST:Reaction), description(Unarmed (all types), Melee (all types))

Mathematical Ability, 10/20, gives(+1 To GR:Mathematical Ability), page(CR?), upto(4), cat(Mundane, Mental, Talents), taboo(DI:Innumerate), mods(Talents),
	conditional(+1 to ST:Reaction), description(Accounting, Astronomy, Cryptography, Engineer, Finance, Market Analysis, Mathematics, Physics)

Musical Ability, 5/10, gives(+1 To GR:Musical Ability), page(CR?), upto(4), cat(Mundane, Mental, Talents), mods(Talents),
	conditional(+1 to ST:Reaction), description(Group Performance (Conducting), Musical Composition, Musical Influence, Musical Instrument, Singing)

Nimble & Swift, 5/10, gives(+1 to GR:Nimble & Swift), page(CR?), upto(4), cat(Mundane, Physical, Talents), mods(Talents),
	conditional(+1 to ST:Reaction), description(Climbing, Escape, Jumping, Running, Swimming)

Outdoorsman, 10/20, gives(+1 To GR:Outdoorsman), page(CR?), upto(4), cat(Mundane, Mental, Talents), mods(Talents),
	conditional(+1 to ST:Reaction), description(Camouflage, Fishing, Mimicry, Naturalist, Navigation, Survival, Tracking)

Racial Skill Bonus ([skill]), 2/4, upto(4), page(CR?), cat(Exotic Mental, Exotic Physical, Exotic, Mental, Physical, Talents),
	gives(+1 to SK:[skill]), noresync(yes),
	x(#InputReplace("Please enter the name of the skill:", "[skill]", , "Racial Skill Bonus"))

Racial Skill Point Bonus ([skill]), 1/2, upto(4), page(CR?), cat(Exotic Mental, Exotic Physical, Exotic, Mental, Physical, Talents),
	gives(+1 to SK:[skill]), noresync(yes),
	x(#InputReplace("Please enter the name of the skill:", "[skill]", , "Racial Skill Point Bonus"))

Racial Skill Bonus (%skillslist%), 2/4, upto(4), page(CR?), cat(Exotic Mental, Exotic Physical, Exotic, Mental, Physical, Talents),
	gives(+1 to SK:%skillslist%), noresync(yes),
	x(#ChoiceList(_
			 name(skills),
			 title(Racial Skill Bonus: Choose a Skill),
			 text(Choose which skill the Racial Skill Bonus is for:),
			 picksallowed(1),
			 method(bynumber),
			 list(_
				"Area Knowledge",
                                                       	"Accounting",
                                                       	"Brawling",
                                                       	"Economics",
                                                       	"Gambling",
                                                       	"Literature",
                                                       	"Market Analysis",
                                                       	"Merchant",
                                                       	"Propaganda",
                                                       	"Public Speaking",
                                                       	"Stealth",
				"Survival",
                                                      	"Swimming",
				"None"_
				)_
			)_
		)

Smooth Operator, 15/30, gives(+1 To GR:Smooth Operator), page(CR?), upto(4), cat(Mundane, Mental, Talents), mods(Talents),
	conditional(+1 to ST:Reaction), description(Acting, Carousing, Detect Lies, Diplomacy, Fast-Talk, Intimidation, Leadership, Panhandling, Politics, Public Speaking, Savoir-Faire, Sex Appeal, Streetwise)

Survivalist (Aquatic-Based), 10/20, gives(+1 To GR:Survival Aquatic-Based), page(CR?), upto(4), cat(Mundane, Mental, Talents), mods(Talents)
Survivalist (Land-Based), 10/20, gives(+1 To GR:Survival Land-Based), page(CR?), upto(4), cat(Mundane, Mental, Talents), mods(Talents)

Weapon Master, 20/25/30/35/40/45, levelnames(one specific weapon, two weapons normally used together, a small class of weapons, a medium class of weapons, a large class of weapons, all muscle powered weapons), page(CR?), upto(6), cat(Mundane, Physical),
	x(_
		#InputToTagReplace("Please specify the weapon, weapons, or class of weapons you have Mastery of:", nameext, , "Weapon Master"),
		#Message(In order for the Damage Bonus to be applied to the characters weapons you will need to add the modifier "Weapon Master Damage Bonus" to each weapon.)_
		)

*********************************************************************************************************************
[PERKS]
*********************************************************************************************************************
<General>
_New Perk, 1, noresync(yes), x(#InputToTagReplace("Plese enter the name of this Perk:" , name, , "New Perk")), x(#edit)

<Mental>

<Physical>
Accessory (Data Jack), 1, page
Alcohol Tolerance, 1, page(CR?)
Fur, 1, page(CR?)
Honest Face, 1, page(CR?) 

<Style Perks>
Armor Familiarity, 1, cat(Style Perks - Realistic), page(CR?),
	x(#InputToTagReplace("Plese enter the weapon skill that you're accustomed to fighting in armor with:" , nameext, ,"Armor Familiarity"))

Biting Mastery, 1, cat(Style Perks - Realistic), page(CR?), needs(SK:Striking),
	mode(Bite),
	damage(_
		th-1 + _
			@if(SK:Striking::level = ST:DX then @basethdice(ST:Bite) else @if(SK:Striking::level > ST:DX then 2 * @basethdice(ST:Bite) else 0))  + _
		   -@if("DI:Weak Bite::level" = 1 then 2 * @basethdice(ST:Bite) else 0) _
		 ), damtype($if("AD:Teeth (Sharp Teeth)::level" = 1 THEN "cut" ELSE $if("AD:Teeth (Sharp Beak)::level" = 1 THEN "pi+" ELSE $if("AD:Teeth (Fangs)::level" = 1 THEN "imp" ELSE $if("AD:Vampiric Bite::level" = 1 THEN "cut" ELSE "cr"))))), reach(C), parry(No), skillused(Striking), damagebasedon(ST:Bite),
	gives(_
		=+@if(SK:Striking::level = ST:DX then @basethdice(ST:Bite) else @if(SK:Striking::level > ST:DX then 2 * @basethdice(ST:Bite) else 0)) to ST:Bite::damage,
		=$if(SK:Striking::level >= ST:DX THEN nobase) to ST:Bite::reach$ _
		)

Exotic Weapon Training, 1, cat(Style Perks - Realistic), page(CR?),
	x(#InputToTagReplace("Please enter the weapon you're familiar with:" , nameext, ,"Exotic Weapon Training"))

Form Mastery, 1, cat(Style Perks - Realistic), page(CR?),
	x(#InputToTagReplace("Please enter the weapon you have Form Mastery with:" , nameext, ,"Form Mastery"))

Grip Mastery, 1, cat(Style Perks - Realistic), page(CR?),
	x(#InputToTagReplace("Please enter the weapon you have Grip Mastery with:" , nameext, ,"Grip Mastery"))

Ground Guard, 1, cat(Style Perks - Realistic), page(CR?)

Improvised Weapons, 1, cat(Style Perks - Realistic), page(CR?),
	x(#InputToTagReplace("Please enter the weapon skill you can use Improvised Weapons with:" , nameext, ,"Improvised Weapons"))

Neck Control (Brawling), 1, cat(Style Perks - Realistic), page(CR?), needs(SK:Brawling)
Neck Control (Punching), 1, cat(Style Perks - Realistic), page(CR?), needs(SK:Punching)
Neck Control (Striking), 1, cat(Style Perks - Realistic), page(CR?), needs(SK:Striking)

Off-Hand Weapon Training ([Weapon]), 1, cat(Style Perks - Realistic), page(CR?), needs(SK:[Weapon] |SK:Fast-Draw ([Weapon])),
	x(#InputReplace("You must specialize by Combat Skill:", "[Weapon]", "", "Off-Hand Weapon Training"))

Quick-Sheathe, 1, cat(Style Perks - Realistic), page(CR?),
	x(#InputToTag("You must specialize in a type of Weapon:", nameext, , "Quick-Sheathe"))

Quick-Swap ([Melee Weapon Skill]), 1, cat(Style Perks - Realistic), page(CR), needs(SK:[Melee Weapon Skill]),
	x(#InputReplace("You must specialize in a type of Melee Weapon:", "[Melee Weapon Skill]", "" , "Quick-Swap"))

Rapid Retraction (Punche), 1, cat(Style Perks - Realistic), page(CR?)
Rapid Retraction (Kick), 1, cat(Style Perks - Realistic), page(CR?)
Rapid Retraction (Bite), 1, cat(Style Perks - Realistic), page(CR?)

Skill Adaptation (Acrobatic Feints), 1, cat(Style Perks - Realistic), page(CR?), needs(SK:Feint (Acrobatics))
Skill Adaptation (Acrobatic Kicks), 1, cat(Style Perks), page(CR?), needs(SK:Kicking (Acrobatics))
Skill Adaptation (Clinch/%UnarmedCombatSkillList%), 1, cat(Style Perks - Realistic), page(CR?),
	x(#ChoiceList(_
			name(UnarmedCombatSkill),
			title(Skill Adaptation Clinch: Choose a combat skill),
			text(Choose a combat skill from the list:),
			picksallowed(exactly 1),
			method(bynumber),
			list(_
				Brawling,
				Kicking,
				Punching,
				Striking _
			   )_
			)_
	), noresync(yes)

Style Familiarity, 1, cat(Style Familiarities), page(CR?),
	x(#InputToTagReplace("Please enter the name of the Style you're familiar with:" , nameext, ,"Style Familiarity"))

Style Familiarity (Boxing), 1, cat(Style Familiarities), page(CR?)
Style Familiarity (Boxing - Bare-Knuckle Boxing), 1, cat(Style Familiarities), page(CR?)
Style Familiarity (Boxing - Shock Boxing), 1, cat(Style Familiarities), page(CR?)

Style Familiarity (Corellian An Ch'i), 1, cat(Style Familiarities), page(CR?)

Style Familiarity (Echani), 1, cat(Style Familiarities), page(CR?)

Style Familiarity (Military Styles - K'tara (Alliance Martial Arts Training)), 1, cat(Style Familiarities), page(CR?)
Style Familiarity (Military Styles - Republic Close Combat Training), 1, cat(Style Familiarities), page(CR?)

Style Familiarity (Wrestling - Combat Wrestling), 1, cat(Style Familiarities), page(CR?)
Style Familiarity (Wrestling - Submission Wrestling), 1, cat(Style Familiarities), page(CR?)

Suit Familiarity, 1, cat(Style Perks - Realistic), page(CR?),
	x(#InputToTagReplace("Please enter the Suit you're Familiar with:", nameext, , "Suit Familiarity"))

Suit Familiarity (Battlesuit), 1, cat(Style Perks - Realistic), page(CR?)
Suit Familiarity (RBC Suit), 1, cat(Style Perks - Realistic), page(CR?)
Suit Familiarity (EVA), 1, cat(Style Perks - Realistic), page(CR?)
Suit Familiarity (Hydrosuit), 1, cat(Style Perks - Realistic), page(CR?)

Unusual Training, 1, cat(Style Perks - Realistic), page(CR?),
	x(InputToTagReplace("You must specialize in a particular Technique, and possibly circumstances in which it can be used:", nameext, , "Unusual Training"))

Weapon Adaptation, 1, cat(Style Perks - Realistic), page(CR?),
	x(#InputToTagReplace("You must specialize in a particular skill and the weapon it can now be used with:", nameext, "skill to weapon", "Weapon Adaptation"))

*********************************************************************************************************************
[DISADVANTAGES]
*********************************************************************************************************************
<Attributes>
Reduced ST, -10/-20, mods(Reduced ST, Size, No Fine Manipulators), initmods(Affects displayed ST score, +0%, gives(-owner::Level to ST:ST), group(Reduced ST), description(This modifier causes the Reduced ST advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced ST disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced ST advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Reduced DX, -20/-40, mods(Reduced DX, No Fine Manipulators), initmods(Affects displayed DX score, +0%, gives(-owner::Level to ST:DX), group(Reduced DX), description(This modifier causes the Reduced DX advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced DX disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced DX advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Reduced IQ, -20/-40, mods(Reduced IQ), initmods(Affects displayed IQ score, +0%, gives(-owner::Level to ST:IQ), group(Reduced IQ), description(This modifier causes the Reduced IQ advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced IQ disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced IQ advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Reduced HT, -10/-20, mods(Reduced HT), initmods(Affects displayed HT score, +0%, gives(-owner::Level to ST:HT), group(Reduced HT), description(This modifier causes the Reduced HT advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced HT disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced HT advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)

Reduced Will, -5/-10, mods(Reduced Will), initmods(Affects displayed Will score, +0%, gives(-owner::Level to ST:Will), group(Reduced Will), description(This modifier causes the Reduced Will advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced Will disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced Will advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Reduced Perception, -5/-10, mods(Reduced Perception), initmods(Affects displayed Per score, +0%, gives(-owner::Level to ST:Perception), group(Reduced Perception), description(This modifier causes the Reduced Perception advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced Perception disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced Perception advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Reduced Hit Points, -2/-4, mods(Reduced Hit Points, Size), initmods(Affects displayed HP score, +0%, gives(-owner::Level to ST:Hit Points), group(Reduced Hit Points), description(This modifier causes the Reduced Hit Points advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced Hit Points disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced Hit Points advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Reduced Fatigue Points, -3/-6, mods(Reduced Fatigue Points), initmods(Affects displayed FP score, +0%, gives(-owner::Level to ST:Fatigue Points), group(Reduced Fatigue Points), description(This modifier causes the Reduced Fatigue Points advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced Fatigue disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced Fatigue advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)

Reduced Basic Move, -5/-10, mods(Reduced Basic Move), initmods(Affects displayed Basic Move score, +0%, gives(-owner::Level to ST:Basic Move), group(Reduced Basic Move), description(This modifier causes the Reduced Basic Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced Basic Move disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced Basic Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Reduced Basic Speed, -5/-10, mods(Reduced Basic Speed), upto(80), initmods(Affects displayed Basic Speed score, +0%, gives(-(Owner::Level/4) to ST:Basic Speed), group(Reduced Basic Speed), description(This modifier causes the Reduced Basic Speed advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced Basic Speed disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced Basic Speed advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.),
	levelnames(_
			-0.25, -0.5, -0.75, -1, -1.25, -1.5, -1.75, -2, -2.25, -2.5, -2.75, -3, -3.25, -3.5, -3.75, -4, -4.25, -4.5, -4.75, -5, -5.25, -5.5, -5.75, -6, -6.25, -6.5, -6.75, -7, -7.25, -7.5, -7.75, -8, -8.25, -8.5, -8.75, -9, -9.25, -9.5, -9.75, -10,
			-10.25, -10.5, -10.75, -11, -11.25, -11.5, -11.75, -12, -12.25, -12.5, -12.75, -13, -13.25, -13.5, -13.75, -14, -14.25, -14.5, -14.75, -15, -15.25, -15.5, -15.75, -16, -16.25, -16.5, -16.75, -17, -17.25, -17.5, -17.75, -18, -18.25, -18.5, -18.75, -19, -19.25, -19.5, -19.75, -20 _
			)
Reduced Water Move, -5/-10, mods(Reduced Water Move), initmods(Affects displayed Water Move score, +0%, gives(-owner::Level to ST:Basic Water Move), group(Reduced Water Move), description(This modifier causes the Reduced Water Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced Water Move disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced Water Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Reduced Air Move, -2/-4, mods(Reduced Air Move), initmods(Affects displayed Air Move score, +0%, gives(-owner::Level to ST:Basic Air Move), group(Reduced Air Move), description(This modifier causes the Reduced Air Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)),
	description(The Reduced Air Move disadvantage allows you to take reduced levels of the attribute which you can then apply enhancements and limitations to. The Affects displayed score modifier causes the Reduced Air Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove that modifier.)
Low TL, -5/-10, page(CR?), gives(-1 to ST:Tech Level), cat(Mundane, Social, Mundane Social)

*Fatigue & Injury is added purely to keep record the causes of injury and fatigue in order to determine how it can be recovered and the effects of the damage itself on other features.
<Fatigue & Injury>
Injury (Less than 1/3 HP left), 0, page(CR), cat(Injury),
	gives(_
		=-(ST:Basic Speed/2) to ST:Basic Move,
		=-((ST:Basic Speed+3)/2) to ST:Dodge_
		)

Injury:Hit Points (Blunt Trauma), -2/-4, mods(Reduced Hit Points, Size), gives(-1 to ST:Hit Points)
Injury:Hit Points (Burn), -2/-4, mods(Reduced Hit Points, Size), gives(-1 to ST:Hit Points)
Injury:Hit Points (Corrosion), -2/-4, mods(Reduced Hit Points, Size), gives(-1 to ST:Hit Points)
Injury:Hit Points (Crush), -2/-4, mods(Reduced Hit Points, Size), gives(-1 to ST:Hit Points)
Injury:Hit Points (Cut), -2/-4, mods(Reduced Hit Points, Size), gives(-1 to ST:Hit Points)
Injury:Hit Points (Impaled), -2/-4, mods(Reduced Hit Points, Size), gives(-1 to ST:Hit Points)
Injury:Hit Points (Pierced), -2/-4, mods(Reduced Hit Points, Size), gives(-1 to ST:Hit Points)
Injury:Hit Points (Radiation), -2/-4, mods(Reduced Hit Points, Size), gives(-1 to ST:Hit Points)

Injury: Basic Move, -5/-10, mods(Reduced Basic Move), gives(-1 to ST:Basic Move)
Injury: Basic Speed, -5/-10, mods(Reduced Basic Speed), gives(-0.25 to ST:Basic Speed)
Injury: Dexterity, -20/-40, mods(Reduced DX, No Fine Manipulators), gives(-1 to ST:DX)
Injury: Strength, -10/-20, mods(Reduced ST, Size, No Fine Manipulators), gives(-1 to ST:ST)

Fatigue:Fatigue Points (Breath), -3/-6, mods(Reduced Fatigue Points), gives(-1 to ST:Fatigue Points)
Fatigue:Fatigue Points (Combat), -3/-6, mods(Reduced Fatigue Points), gives(-1 to ST:Fatigue Points)
Fatigue:Fatigue Points (Extra Effort), -3/-6, mods(Reduced Fatigue Points), gives(-1 to ST:Fatigue Points)
Fatigue:Fatigue Points (Hunger), -3/-6, mods(Reduced Fatigue Points), gives(-1 to ST:Fatigue Points)
Fatigue:Fatigue Points (Mental), -3/-6, mods(Reduced Fatigue Points), gives(-1 to ST:Fatigue Points)
Fatigue:Fatigue Points (Sleep), -3/-6, mods(Reduced Fatigue Points), gives(-1 to ST:Fatigue Points)
Fatigue:Fatigue Points (Thirst), -3/-6, mods(Reduced Fatigue Points), gives(-1 to ST:Fatigue Points)

*Minor is added purely to keep record of how much a pc may increase his Attributes. Some GMs may find this come in handy to keep track of this.
Minor, 0/-60/-160/-290, upto(4),
gives(_
	=@indexedvalue(%level,0,-2,-4,-7) to ST:ST,
	=@indexedvalue(%level,0,-1,-3,-6) to ST:DX,
	=@indexedvalue(%level,0,-1,-3,-5) to ST:IQ,
	=@indexedvalue(%level,0,-1,-2,-3) to ST:Size Modifier_
	),
levelnames(_
	Young Adult, Teenager, Child, Infant_
	)

<General>

<Exotic Physical>
Cannot Kick, -5, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD:Extra Legs (3 Legs), AD:Extra Legs (4 Legs), AD:Extra Legs (5 Legs), AD:Extra Legs (6 Legs), AD:Extra Legs (7+ Legs), DI:Quadriplegic)

Cold-Blooded, -5/-10, upto(2), page(CR?), cat(Exotic, Physical),
	levelnames(You "stiffen up" below 10°, You "stiffen up" below 18°),
	conditional(=+2 to ST:HT when "resisting effects of temperature")

Dependency, -5/-10/-20/-30, mods(Dependency), levelnames(Very Common, Common, Occasional, Rare), 
	page(CR?), upto(4), cat(Exotic, Physical),
	initmods(_
			Frequency Needed: Monthly, *1, shortname(Monthly), group(Dependency) _
			),
	x(#InputToTag("Specify the substance which you're Dependent on:", nameext, , "Dependency"))

Fragile, -5/-10, page(CR?), cat(Exotic, Physical), levelnames(,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,),
	x( #InputToTag("Specify the type of fragility:", nameext, , "Fragile"))
Fragile (Brittle), -15, page(CR?), cat(Exotic, Physical)
Fragile (Combustible), -5, page(CR?), cat(Exotic, Physical)
Fragile (Explosive), -15, page(CR?), cat(Exotic, Physical)
Fragile (Flammable), -10, page(CR?), cat(Exotic, Physical)
Fragile (Unnatural), -50, page(CR?), cat(Exotic, Physical)

Horizontal, -10, page(CR?), cat(Exotic, Physical), taboo(DI:Semi-Upright)

No Fine Manipulators, -30, gives(+1 to ST:No Fine Manipulators), taboo(DI:Bad Grip, AD:High Manual Dexterity, "DI:Ham-Fisted", DI:No Manipulators), page(CR?), cat(Exotic, Physical)
No Manipulators, -50, gives(+1 to ST:No Fine Manipulators), taboo(DI:Bad Grip, AD:High Manual Dexterity, "DI:Ham-Fisted", DI:No Fine Manipulators), page(CR?), cat(Exotic, Physical)

No Legs (Aerial), 0, page(CR?), cat(Exotic, Physical), needs(AD:Flight), taboo(DI:No Legs (Aquatic), DI:No Legs (Bounces), DI:No Legs (Rolls), DI:No Legs (Slithers), DI:No Legs (Semi-Aquatic), DI:No Legs (Sessile), DI:No Legs (Tracked or Wheeled)),
	replacetags(in "ST:Ground Move" with "mainwin(11)", in "ST:Kick" with "hide(yes)")
No Legs (Aquatic), 0, mods(No Legs), page(CR?), cat(Exotic, Physical), taboo(DI:No Legs (Aerial), DI:No Legs (Bounces), DI:No Legs (Rolls), DI:No Legs (Slithers), DI:No Legs (Semi-Aquatic), DI:No Legs (Sessile), DI:No Legs (Tracked or Wheeled)),
	replacetags(in "ST:Water Move" with "mainwin(11)", in "ST:Ground Move" with "mainwin(11)", in "ST:Kick" with "hide(yes)")
No Legs (Bounces), 0, page(CR?), cat(Exotic, Physical), taboo(DI:No Legs (Aerial), DI:No Legs (Aquatic), DI:No Legs (Rolls), DI:No Legs (Slithers), DI:No Legs (Semi-Aquatic), DI:No Legs (Sessile), DI:No Legs (Tracked or Wheeled)),
	replacetags(in "ST:Kick" with "hide(yes)")
No Legs (Rolls), 0, page(CR?), cat(Exotic, Physical), taboo(DI:No Legs (Aerial), DI:No Legs (Aquatic), DI:No Legs (Bounces), DI:No Legs (Slithers), DI:No Legs (Semi-Aquatic), DI:No Legs (Sessile), DI:No Legs (Tracked or Wheeled)),
	replacetags(in "ST:Kick" with "hide(yes)")
No Legs (Slithers), 0, page(CR?), cat(Exotic, Physical), taboo(DI:No Legs (Aerial), DI:No Legs (Aquatic), DI:No Legs (Bounces), DI:No Legs (Rolls), DI:No Legs (Semi-Aquatic), DI:No Legs (Sessile), DI:No Legs (Tracked or Wheeled)),
	replacetags(in "ST:Kick" with "hide(yes)")
No Legs (Semi-Aquatic), 0, page(CR?), cat(Exotic, Physical), taboo(DI:No Legs (Aerial), DI:No Legs (Aquatic), DI:No Legs (Bounces), DI:No Legs (Rolls), DI:No Legs (Slithers), DI:No Legs (Sessile), DI:No Legs (Tracked or Wheeled)),
	replacetags(in "ST:Water Move" with "mainwin(11)", in "ST:Ground Move" with "mainwin(11)", in "ST:Kick" with "hide(yes)")
No Legs (Sessile), -50, replacetags(in "ST:Basic Move" with "basevalue(0)"), page(CR?), cat(Exotic, Physical), taboo(DI:No Legs (Aerial), DI:No Legs (Aquatic), DI:No Legs (Bounces), DI:No Legs (Rolls), DI:No Legs (Slithers), DI:No Legs (Semi-Aquatic), DI:No Legs (Tracked or Wheeled)),
	replacetags(in "ST:Kick" with "hide(yes)")
No Legs (Tracked), -20, page(CR?), cat(Exotic, Physical), taboo(DI:No Legs (Aerial), DI:No Legs (Aquatic), DI:No Legs (Bounces), DI:No Legs (Rolls), DI:No Legs (Slithers), DI:No Legs (Semi-Aquatic), DI:No Legs (Sessile)),
	replacetags(in "ST:Kick" with "hide(yes)")
No Legs (Wheeled), -20, page(CR?), cat(Exotic, Physical), taboo(DI:No Legs (Aerial), DI:No Legs (Aquatic), DI:No Legs (Bounces), DI:No Legs (Rolls), DI:No Legs (Slithers), DI:No Legs (Semi-Aquatic), DI:No Legs (Sessile)),
	replacetags(in "ST:Kick" with "hide(yes)")

No Physical Attack (1 Arm), -5, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(DI:No Physical Attack (2 Arms))
No Physical Attack (2 Arms), -10, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(DI:No Physical Attack (1 Arm))

Short Arms (1 Arm), -5, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(DI:Short Arms (2 Arms), AD:Long Arms)
Short Arms (2 Arms), -10, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(DI:Short Arms (1 Arm), AD:Long Arms)

Short Legs (2 legs), -5, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(AD Long Legs)

Unhealing, -20/-30, levelnames(Partial, Total), page(CR?), upto(2), cat(Exotic, Physical), taboo(AD:Regeneration)

Weak Arms (1 Arm), -2/-5, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), levelnames(1/2 ST, 1/4 ST), upto(2), taboo(DI:Weak Arms (2 Arms), AD:Arm ST),
		gives(_
			=-(ST:One Arm Lifting ST::basescore * @if(me::level = 1 THEN 0.5 ELSE 0.75)) to ST:One Arm Lifting ST, 
			=-(ST:One Arm Striking ST::basescore * @if(me::level = 1 THEN 0.5 ELSE 0.75)) to ST:One Arm Striking ST _
			)
Weak Arms (2 Arms), -5/-10, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), levelnames(1/2 ST, 1/4 ST), upto(2), taboo(DI:Weak Arms (1 Arm), AD:Arm ST),
		gives(_
			=-(ST:One Arm Lifting ST::basescore * @if(me::level = 1 THEN 0.5 ELSE 0.75)) to ST:One Arm Lifting ST,
			=-(ST:One Arm Striking ST::basescore * @if(me::level = 1 THEN 0.5 ELSE 0.75)) to ST:One Arm Striking ST,
			=-(ST:Two Arm Lifting ST::basescore * @if(me::level = 1 THEN 0.5 ELSE 0.75)) to ST:Two Arm Lifting ST,
			=-(ST:Two Arm Striking ST::basescore * @if(me::level = 1 THEN 0.5 ELSE 0.75)) to ST:Two Arm Striking ST _
			)

Weakness, -5/-10/-20, upto(3), levelnames(1d per 30 minutes, 1d per 5 minutes, 1d per minute),
	mods(Weakness), page(CR?), cat(Exotic, Physical),
	initmods(_
			Rarity: Occasional, *1, shortname(Occasional), group(Weakness) _
			)

Weapon Mount (1 Arm), -8, gives(-ST:Two Arm Lifting ST::basescore to ST:Two Arm Lifting ST, -ST:Two Arm Striking ST::basescore to ST:Two Arm Striking ST), -8, page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(DI:Weapon Mount (2 Arms), DI:One Arm, DI:Quadriplegic)
Weapon Mount (2 Arms), -16, gives(-ST:One Arm Lifting ST::basescore to ST:One Arm Lifting ST, -ST:One Arm Striking ST::basescore to ST:One Arm Striking ST, -ST:Two Arm Lifting ST::basescore to ST:Two Arm Lifting ST, -ST:Two Arm Striking ST::basescore to ST:Two Arm Striking ST), page(CR?), cat(Exotic, Physical, Extra Arms/Legs), taboo(DI:Weapon Mount (1 Arm), DI:One Arm, DI:Quadriplegic)

Sleepy, -8/-16/-20/-26, upto(4), page(CR?), cat(Exotic, Physical), taboo(AD:Doesn't Sleep),
	levelnames(_
			Asleep 1/2 of the time, Asleep 2/3 of the time, 
			Asleep 3/4 of the time, Asleep 7/8 of the time_
			)

<Exotic Mental>


<Mundane Physical>
*Appearance
Skinny, -5, gives(-2 To SK:Disguise), 
	conditional(-2 to ST:ST when you resist knockback, -2 to SK:Shadowing when you are trying to follow someone in a crowd),
	needs(HT < 15), page(CR?), cat(Mundane, Physical, Build), taboo(DI:Overweight, DI:Fat, DI:Very Fat)
Overweight, -1, gives(-1 To SK:Disguise, +1 To SK:Swimming), 
	conditional(+1 to ST:ST when you resist knockback, -1 to SK:Shadowing when you are trying to follow someone in a crowd),
	page(CR?), cat(Mundane, Physical, Build), taboo(DI:Skinny, DI:Fat, DI:Very Fat)
Fat, -3, gives(-2 To SK:Disguise, +3 To SK:Swimming), 
	conditional(+2 to ST:ST when you resist knockback, -2 to SK:Shadowing when you are trying to follow someone in a crowd),
	needs(HT < 16), page(CR?), cat(Mundane, Physical, Build), taboo(DI:Skinny, DI:Overweight, DI:Very Fat)
Very Fat, -5, gives(-3 To SK:Disguise, +5 To SK:Swimming), 
	conditional(+3 to ST:ST when you resist knockback, -3 to SK:Shadowing when you are trying to follow someone in a crowd),
	needs(HT < 14), page(CR?), cat(Mundane, Physical, Build), taboo(DI:Skinny, DI:Overweight, DI:Fat)
Dwarfism, -15, gives(-1 To ST:Basic Move, -2 To SK:Disguise, -1 To ST:Size Modifier), 
	conditional(-2 to SK:Shadowing when you are trying to follow someone in a crowd),
	page(CR?), cat(Mundane, Physical, Build, Size Modifier), taboo(DI:Gigantism)
Gigantism, 0, gives(-2 To SK:Disguise, +1 to ST:Size Modifier, +1 to ST:Basic Move), 
	conditional(-2 to SK:Shadowing when you are trying to follow someone in a crowd),
	page(CR?), cat(Mundane, Physical, Build, Size Modifier), taboo(DI:Dwarfism)

Appearance, -4/-8/-16/-20/-24, mods(Appearance), upto(5), page(CR?),
	levelnames([Average], Unattractive, Ugly, Hideous, Monstrous, Horrific), 
 	page(CR?), cat(Mundane, Physical, Physical Appearance), taboo(AD:Appearance),
	gives(_
		=@indexedvalue(%level, 0, 0, +2, +3, +4) to SK:Intimidation,
		=@indexedvalue(%level, -1, -2, -4, -5, -6) To GR:Appeal,
		=@indexedvalue(%level, -2, -4, -8, -10, -12) To SK:Sex Appeal _
		)

Bad Smell, -10, page(CR?), cat(Mundane, Physical), gives(-2 to ST:Reaction)

Bad Sight (Nearsighted), -25, page(CR?), cat(Mundane, Physical), taboo(DI:Blindness, DI:Bad Sight (farsighted)), mods(Bad Sight),
	conditional(_
			-6 to ST:Vision when "item is more than 1 meter away",
			-2 to "CL:Combat/Weapons - Melee Combat",
			*2 to "CL:Combat/Weapons - Ranged Combat" when "calculating range penalties" _
			)
Bad Sight (Farsighted), -25, page(CR?), cat(Mundane, Physical), taboo(DI:Blindness, DI:Bad Sight (nearsighted)), mods(Bad Sight),
	conditional(_
			-6 to ST:Vision when "item is within 1 meter",
			-3 to ST:DX when "performing close manual tasks",
			-3 to "CL:Combat/Weapons - Melee Combat" when "in Close Combat" _
			)

Blindness, -50, page(CR?), cat(Mundane, Physical), mods(Blindness), taboo(AD:Acute Vision, AD:360° Vision, AD:Hyperspectral Vision, AD:Infravision, AD:Penetrating Vision, AD:Telescopic Vision, AD:Ultravision, AD:Night Vision, AD:Peripheral Vision, AD:Dark Vision, DI:Colorblindness, DI:Night Blindness, DI:No Depth Perception, DI:One Eye, DI:Bad Sight, AD:Microscopic Vision, DI:Dyslexia, DI:Restricted Vision), gives(-4 to ST:Dodge, -6 to CL:Combat/Weapons - Melee Combat, -6 to CL:Combat/Weapons - Ranged Combat, -6 to CL:Athletic - Combat Art/Sport, -ST:Vision::basescore to ST:Vision)

Cannot Speak, -15, mods(Cannot Speak), page(CR?), cat(Mundane, Physical), taboo(DI:Stuttering, DI:Mute, AD:Speak Underwater)

Combat Paralysis, -15, gives(-2 to ST:Fright Check), page(CR?), cat(Mundane, Physical), taboo(AD:Combat Reflexes)

Deafness, -20, page(CR?), cat(Mundane, Physical), mods(Deafness), taboo(AD:Discriminatory Hearing, AD:Parabolic Hearing, AD:Subsonic Hearing, AD:Subsonic Speech, AD:Ultrahearing, AD:Ultrasonic Speech, AD:Acute Hearing),
	gives(-ST:Perception to ST:Hearing)

Decreased Time Rate, -100, page(CR?), cat(Exotic, Mental), taboo(AD:Altered Time Rate)

Extra Sleep, -2/-4, upto(4), page(CR?), cat(Mundane, Physical), taboo(AD:Doesn't Sleep, DI:Less Sleep)

Ham-Fisted, -5/-10, page(CR?), cat(Mundane, Physical), taboo(AD:High Manual Dexterity, DI:No Fine Manipulators, DI:No Manipulators),
	upto(2), gives(-3 to SK:Fast-Draw, -3 to GR:High Manual Dexterity), conditional(-1 to ST:Reaction when "being tidy or well-groomed matters")

Hard of Hearing, -10, gives(-4 To ST:Hearing), page(CR?), cat(Mundane, Physical), mods(Hard of Hearing), taboo(DI:Deafness)

Hunchback, -10, gives(-1 to ST:Reaction, -3 To GR:Hunchback), page(CR?), cat(Mundane, Physical)

Insomniac, -10/-15, levelnames(Mild, Severe), upto(2), page(CR?), cat(Mundane, Physical), taboo(AD:Doesn't Sleep)

Low Pain Threshold, -10, page(CR?), cat(Mundane, Physical), taboo(AD:High Pain Threshold, AD:Supernatural Durability),
	conditional(-1 to ST:Reaction when "from ''macho'' individuals")

Maintenance, -10/-20, mods(Maintenance), page(CR?), cat(Mundane, Physical), 
	levelnames(1 person, 2 people, 3-5 people, 6-10 people, 11-20 people, 21-50 people, 51-100 people, 51-100 people doubled 1),
	initmods( Maintenance Interval: Daily, *1, shortname(Daily), group(Maintenance) ),
	x(#InputToTag("Specify the type of maintenance required:", nameext, , "Maintenance"))

Mute, -25, page(CR?), cat(Mundane, Physical), taboo(DI:Stuttering, AD:Voice, PE:Penetrating Voice, DI:Cannot Speak, AD:Speak Underwater)

No Sense of Smell/Taste, -5, page(CR?), mods(No Sense of Smell/Taste), cat(Mundane, Physical), taboo(AD:Discriminatory Smell, AD:Acute Taste and Smell), gives(-"ST:Taste/Smell::basescore" to "ST:Taste/Smell")

Numb, -20, page(CR?), cat(Mundane, Physical), taboo(AD:Acute Touch, AD:Sensitive Touch)

One Eye, -15, page(CR?), cat(Mundane, Physical), taboo(DI:No Depth Perception, DI:Blindness, @if(@itemhasmod(AD:Regrowth, Minor) THEN 0 ELSE 1) * AD:Regrowth::level),
	conditional(-3 to CL:Combat/Weapons - Ranged Combat when "not aiming"), gives(-1 to CL:Combat/Weapons - Melee Combat)

Restricted Vision, -15/-30, levelnames(No Peripheral Vision, Tunnel Vision), upto(2), page(CR?), cat(Mundane, Physical), taboo(DI:Blindness)

Semi-Upright, -5, page(CR?), cat(Exotic, Physical), taboo(DI:Horizontal)

Short Lifespan, -10/-20, page(CR?), upto(4), cat(Exotic, Physical), taboo(AD:Extended Lifespan, AD:Unaging, DI:Terminally Ill)

Unnatural Feature, -1/-2, upto(5), gives(-1 To SK:Disguise, -1 To SK:Shadowing), page(CR?), cat(Mundane, Physical, Other Physical Features)

Addiction ([Physiological]), -5/-10/-20, upto(3), 
	levelnames(Cheap, Expensive, Very Expensive),
	mods(Addiction), page(CR?), cat(Mundane, Physical),
	x( #InputReplace("Specify the drug to which you are addicted:", "[Physiological]", , "Addiction (Physiological)"))

Addiction (Chewstims), -5, levelnames(Cheap),
	mods(Addiction), page(CR?), cat(Mundane, Physical),
	initmods(_
			Effect: Highly addictive (-5 on withdrawal roll), -5, shortname(Highly addictive), group(Addiction), page(B122) | _
			Legality: Legal, +5, shortname(Legal), group(Addiction), page(CR?) _
			)

Addiction (Tobacco), -5, levelnames(Cheap),
	mods(Addiction), page(CR?), cat(Mundane, Physical),
	initmods(_
			Effect: Highly addictive (-5 on withdrawal roll), -5, shortname(Highly addictive), group(Addiction), page(B122) | _
			Legality: Legal, +5, shortname(Legal), group(Addiction), page(CR?) _
			)

Addiction (Spice), -20, displaycost(-40), levelnames(Cheap, Expensive, Very Expensive),
	mods(Addiction), page(CR?), cat(Mundane, Physical),
	initmods(_
			Effect: Incapacitating, -10, shortname(Incapacitating), group(Addiction), page(B122) | _
			Effect: Totally addictive (-10 on withdrawal roll), -10, shortname(Totally addictive), group(Addiction), page(B122) | _
			Legality: Illegal, +0, shortname(Illegal), group(Addiction), page(CR?) _
			)


<Mundane Mental>
Absent-Mindedness, -15, page(CR?), cat(Mundane, Mental), conditional(-5 to ST:IQ when "concentrating on another task")

Addiction ([Psychological]), -5/-10/-20, upto(3), 
	levelnames(Cheap, Expensive, Very Expensive),
	mods(Addiction), page(CR?), cat(Mundane, Mental),
	x( #InputReplace("Specify the activity to which you are addicted:", "[Psychological]", , "Addiction (Psychological)") )

Bad Temper, -10, mods(Self-Control), page(CR?), cat(Mundane, Mental), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Berserk, -10, mods(Self-Control, Berserk), page(CR?), cat(Mundane, Mental), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Bloodlust, -10, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Bully, -10, mods(Self-Control), page(CR?), cat(Mundane, Mental), gives(-2 to ST:Reaction),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Callous, -5, gives(-3 To SK:Teaching), page(CR?), cat(Mundane, Mental),
	conditional(-1 to ST:Reaction when "past victim, or has Empathy", -3 to SK:Psychology when "attempting to help people", +1 to SK:Interrogation when "you use threats or torture", +1 to SK:Intimidation when "you use threats or torture")

Charitable, -15, mods(Self-Control), page(CR?), cat(Mundane, Mental), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Chronic Depression, -15, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Chummy, -5, page(CR?), cat(Mundane, Mental), taboo(DI:Loner, DI:Gregarious), conditional(-1 to ST:IQ when "alone")

Code of Honor, -5/-10, page(CR?), upto(3), cat(Mundane, Mental), levelnames(,,),
	x(#InputToTag("Specify the type of Code of Honor:", nameext, , "Code of Honor"))
Code of Honor (Asteroid Miner's), -5, page(cr?), cat(Mundane, Mental)
Code of Honor (Battle Honor), -10, page(CR?), cat(Mundane, Mental)
Code of Honor (Hacker's), -5, page(CR?), cat(Mundane, Mental)
Code of Honor (Family/Clan), -5, page (CR?), cat(Mundane, Mental)
Code of Honor (Overlord's), -15, page(CR?), cat(Mundane, Mental)
Code of Honor (Pirate's), -5, page(CR?), cat(Mundane, Mental)
Code of Honor (Professional), -5, page(CR?), cat(Mundane, Mental)
Code of Honor (Stay Bought). -5 page(), cat(Mundane, Mental)
Code of Honor (Gentleman's), -10, page(CR?), cat(Mundane, Mental)
Code of Honor (Hunter's), -10, page(CR?), cat(Mundane, Mental)
Code of Honor (Soldier's), -10, page(CR?), cat(Mundane, Mental)
Code of Honor (Mercenary's), -10, page(CR?), cat(Mundane, Mental)

Compulsive Behavior, -5/-10, mods(Self-Control), page(CR?), upto(3), cat(Mundane, Mental), levelnames(,,), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) ),
	x( #InputToTag("Specify the type of compulsive behavior:", nameext, , "Compulsive Behavior") )
Compulsive Carousing, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	conditional(+1 to ST:Reaction when "from like-minded extroverts", -1 to ST:Reaction when "from sober-minded citizens (upto -4)"),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )
Compulsive Gambling, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), 
	conditional(=$solver(@int(me::points/5)) to ST:Reaction),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?1) )
Compulsive Generosity, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), taboo(DI:Miserliness), 
	conditional(+1 to ST:Reaction when "from pios folks"),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )
Compulsive Lying, -15, mods(Self-Control), page(CR?), cat(Mundane, Mental), taboo(DI:Truthfulness), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )
Compulsive Spending, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) ),
	conditional(_
			=@if(@hasmod(You resist on a roll of  4 or less) then -5 else 0 ) to SK:Merchant when "you bargain or haggle",
			=@if(@hasmod(You resist on a roll of  5 or less) then -4 else 0 ) to SK:Merchant when "you bargain or haggle",
			=@if(@hasmod(You resist on a roll of  6 or less) then -4 else 0 ) to SK:Merchant when "you bargain or haggle",
			=@if(@hasmod(You resist on a roll of  7 or less) then -4 else 0 ) to SK:Merchant when "you bargain or haggle",
			=@if(@hasmod(You resist on a roll of  8 or less) then -3 else 0 ) to SK:Merchant when "you bargain or haggle",
			=@if(@hasmod(You resist on a roll of  9 or less) then -3 else 0 ) to SK:Merchant when "you bargain or haggle",
			=@if(@hasmod(You resist on a roll of 10 or less) then -3 else 0 ) to SK:Merchant when "you bargain or haggle",
			=@if(@hasmod(You resist on a roll of 11 or less) then -2 else 0 ) to SK:Merchant when "you bargain or haggle",
			=@if(@hasmod(You resist on a roll of 12 or less) then -2 else 0 ) to SK:Merchant when "you bargain or haggle",
			=@if(@hasmod(You resist on a roll of 13 or less) then -2 else 0 ) to SK:Merchant when "you bargain or haggle",
			=@if(@hasmod(You resist on a roll of 14 or less) then -1 else 0 ) to SK:Merchant when "you bargain or haggle",
			=@if(@hasmod(You resist on a roll of 15 or less) then -1 else 0 ) to SK:Merchant when "you bargain or haggle" _
			=@if(@hasmod(You resist on a roll of 16 or less) then -1 else 0 ) to SK:Merchant when "you bargain or haggle" _
			)
Compulsive Traveling, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	conditional(+1 to ST:Reaction when "from like-minded travelers", -1 to ST:Reaction when "from local citizens (upto -4)"),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )
Compulsive Vowing, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Cowardice, -10, mods(Self-Control), page(CR?), cat(Mundane, Mental), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) ),
	conditional(_
			  =@if(@hasmod(You resist on a roll of  4 or less) then -5 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of  5 or less) then -5 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of  6 or less) then -4 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of  7 or less) then -4 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of  8 or less) then -4 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of  9 or less) then -3 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of 10 or less) then -3 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of 11 or less) then -3 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of 12 or less) then -2 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of 13 or less) then -2 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of 14 or less) then -2 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of 15 or less) then -1 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of 16 or less) then -1 else 0 ) to ST:Fright Check when "possible danger is involved",
			  =@if(@hasmod(You resist on a roll of  4 or less) then -5 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of  5 or less) then -5 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of  6 or less) then -4 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of  7 or less) then -4 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of  8 or less) then -4 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of  9 or less) then -3 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of 10 or less) then -3 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of 11 or less) then -3 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of 12 or less) then -2 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of 13 or less) then -2 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of 14 or less) then -2 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of 15 or less) then -1 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters",
			  =@if(@hasmod(You resist on a roll of 16 or less) then -1 else 0 ) to ST:Reaction when "from trained fighters, when cowadice matters" _
			)

Curious, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), taboo(DI:Incurious),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Delusion, -5/-10/-15, upto(3), levelnames(Minor, Major, Severe), page(CR?), 
	cat(Mundane, Mental), gives(-1 to ST:Reaction),
	x(#InputToTag("Specify your delusion here:", nameext, , "Delusion"))

Easy to Read, -10, page(CR?), cat(Mundane, Mental)

Fanaticism, -15/-15, levelnames( , Extreme), page(CR?), upto(2), cat(Mundane, Mental),
	x(#InputToTag("Specify the country, organization, philosiphy, or religion that you put ahead of everything else:", nameext, , "Fanaticism")),
	conditional(=+@if(%level = 2 THEN 3) to ST:Will when "resisting Brainwashing, Interrogation, and Mind Control")

Fearfulness, -2/-4, gives(-1 To Fright Check), page(CR?), upto(ST:Will - 3), cat(Mundane, Mental), taboo(AD:Fearlessness)

Gluttony, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), taboo(AD:Doesn't Eat or Drink),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Greed, -15, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Gregarious, -10, page(CR?), cat(Mundane, Mental), taboo(DI:Chummy, DI:Loner), conditional(-1 to ST:IQ when "in a group of four or less", -4 to ST:IQ when "alone")

Guilt Complex, -5, page(CR?), cat(Mundane, Mental)

Honesty, -10, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) ),
	conditional(+1 to ST:Reaction when "honesty becomes known", +3 to ST:Reaction when "a question of honor or trust is involved")

Hidebound, -5, page(CR?), cat(Mundane, Mental),
	conditional(-2 to SK:Artist when "creativity matters", -2 to SK:Engineer when "making a new invention")

Impulsiveness, -10, mods(Self-Control), page(CR?), cat(Mundane, Mental), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Incurious, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), taboo(DI:Curious),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Indecisive, -10, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Intolerance, -5/-10, upto(2), page(CR?), cat(Mundane, Mental),
	levelnames(One group, Total Intolerance),
	x(#InputToTag("Specify the group or groups you are Intolerance of:", nameext, , "Intolerance"))

Kleptomania, -15, mods(Self-Control), page(CR?), cat(Mundane, Mental), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Laziness, -10, page(CR?), cat(Mundane, Mental), taboo(DI:Workaholic)

Lecherousness, -15, mods(Self-Control, Lecherousness), page(CR?), cat(Mundane, Mental), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Loner, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), taboo(DI:Chummy, DI:Gregarious), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(?) )

Low Empathy, -20, gives(-3 To GR:Low Empathy), page(CR?), cat(Mundane, Mental), taboo(AD:Empathy, AD:Sensitive)

Manic-Depressive, -20, page(CR?), cat(Mundane, Mental)

Megalomania, -10, page(CR?), cat(Mundane, Mental),
	conditional(+2 to ST:Reaction when "young or naive individuals", -2 to ST:Reaction when "experienced NPCs")

No Sense of Humor, -10, page(CR?), cat(Mundane, Mental), conditional(-2 to ST:Reaction)

Obsession, -5/-10, mods(Self-Control), levelnames(Short-Term Goal, Long-Term Goal), upto(2), page(CR?), cat(Mundane, Mental),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

On the Edge, -15, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) ),
	conditional(-2 to ST:Reaction when "people witness behavior", +2 to ST:Reaction when "witnessed by people who value bravery over self-preservation")

Overconfidence, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) ),
	conditional(+2 to ST:Reaction when "young or naive individuals", -2 to ST:Reaction when "experienced NPCs")

Paranoia, -10, page(CR?), cat(Mundane, Mental), conditional(-2 to ST:Reaction)


Phobia, -5/-10, upto(4), mods(Self-Control), page(CR?), cat(Mundane, Mental), levelnames(,,,), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) ),
	x(#InputToTag("Specify what you're afraid of here:", nameext, , "Phobia"))

Phobia (%examplelist%), %examplecostlist%, displaycost(variable), mods(Self-Control), page(CR?), cat(Mundane, Mental),   
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) ),
	x(#ChoiceList(_
			name(example),
			title(Phobia: Choose a Phobia),
			text(Choose a phobia from the list of examples provided:),
			picksallowed(exactly 1),
			method(bynumber),
			list(_
				"Autophobia: Being Alone"=-15,
                                                                        "Cyberphobia: Droids"=-15,
				"Hemophobia: Blood"=-10,
				"Demophobia: Crowds"=-15,
				"Scotophobia: Darkness"=-15,
				"Necrophobia: Death and the Dead"=-10,
				"Mysophobia: Dirt"=-10,
				"Claustrophobia: Enclosed Spaces"=-15,
				"Pyrophobia: Fire"=-5,
				"Acrophobia: Heights"=-10,
				"Entomophobia: Insects"=-10,
				"Brontophobia: Loud Noises"=-10,
				"Technophobia: Machinery (TL4-)"=-5,
				"Technophobia: Machinery (TL5+)"=-15,
				"Teratophobia: Monsters"=-15,
				"Thalassophobia: Oceans"=-10,
				"Agoraphobia: Open Spaces"=-10,
                                                                        "Space"=-10,
				"Herpetophobia: Reptiles"=-10,
				"Coitophobia: Sex"=-10,
				"Aichmophobia: Sharp Things (TL5-)"=-15,
				"Aichmophobia: Sharp Things (TL6+)"=-10,
				"Arachnophobia: Spiders"=-5,
				"Xenophobia: Strange and Unknown Things"=-15,
				"Heliophobia: The Sun"=-15,
				"Hoplophobia: Weapons"=-20_
			   )_
			)_
	), noresync(yes)

Post-Combat Shakes, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), 
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Selfish, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), taboo(DI:Selfless),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Selfless, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), taboo(DI:Selfish),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Sense of Duty, -2/-5/-10/-15/-20, levelnames(Individual, Small Group, Large Group, Entire Race, Every Living Being), page(CR?), upto(5), cat(Mundane, Mental),
	conditional(=+2 to ST:Reaction when "in dangerous situations if Sense of Duty is known"),
	x(#InputToTag("Specify the person or group you have a Sense of Duty towards:", nameext, , "Sense of Duty"))

Short Attention Span, -10, mods(Self-Control), page(CR?), cat(Mundane, Mental), taboo("AD:Single-Minded"),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Shyness, -5/-10/-20, gives(=@indexedvalue(%level, -1, -2, -4) To GR:Shyness), levelnames(Mild, Severe, Crippling), page(CR?), upto(3), cat(Mundane, Mental)

Slave Mentality, -40, page(CR?), cat(Mundane, Mental)

Split Personality, -15, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Stubbornness, -5, page(CR?), cat(Mundane, Mental), conditional(-1 to ST:Reaction)

Technophilia, -10, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Truthfulness, -5, mods(Self-Control), page(CR?), cat(Mundane, Mental), taboo(DI:Compulsive Lying), 
	gives(-5 to SK:Fast-Talk),
	conditional(-5 to SK:Acting when "your purpose is to deceive"),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

Vow, -5/-10/-15, levelnames(Minor, Major, Great), page(CR?), upto(3), cat(Mundane, Mental),
	x(#InputToTag("Please describe the nature of your Vow:", nameext, , "Vow"))

Workaholic, -5, page(CR?), cat(Mundane, Mental), conditional(+1 to ST:Reaction, -1 to ST:Reaction), taboo(DI:Laziness)


Xenophilia, -10, mods(Self-Control), page(CR?), cat(Mundane, Mental),
	initmods( You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?) )

<Mundane Social>
Debt, -1/-2, page(CR?), upto(20), cat(Mundane, Social, Wealth)

Dependent, -1/-2/-5/-10/-15, upto(5),
	mods(Dependent, Frequency of Appearance), page(CR?), cat(Mundane, Social),
	levelnames(No more than 100%, No more than 75%, No more than 50%, No more than 25%, 0 or fewer points), 
	initmods(_
			Importance: Friend, *1, shortname(Friend), group(Dependent) _
			| Frequency of Appearance: roll of  9 or less, *1, shortname(9 or less), group(Frequency of Appearance) _
			),
	x(#InputToTag("Name or describe your Dependent:", nameext, , "Dependent"))

Duty, -2/-5/-10/-15, mods(Duty), page(CR?), cat(Mundane, Social), upto(4),
	levelnames("6 or less (Quite rarely)", "9 or less (Fairly often)", "12 or less (Quite often)", "15 or less (Almost all the time)"),
	x(#InputToTag("Please describe the nature of your Duty:", nameext, , "Duty"))

Enemy (One Person), -5/-10/-20, upto(3), mods(Enemy, Evil Twin, Frequency of Appearance), 
   page(CR?), cat(Mundane, Social),
   levelnames("Less powerful than the PC", "Equal in power to the PC", "More powerful than the PC"),
   initmods(_
		 Frequency of Appearance: roll of  9 or less, *1, shortname(9 or less), group(Frequency of Appearance) _
		),
	x(#InputToTagReplace("Name or describe your Enemy:", nameext, , "Enemy (One Person)"))

Enemy (Less powerful group), -10/-20/-30, upto(3), mods(Enemy, Frequency of Appearance), 
	page(CR?), cat(Mundane, Social),
	levelnames("Small group (3-5 people)", "Medium-sized group (6-20 people)", "A large group (21-1,000 people)"),
	initmods(_
			Frequency of Appearance: roll of  9 or less, *1, shortname(9 or less), group(Frequency of Appearance) _
			),
	x(#InputToTagReplace("Name or describe your Enemy Group:", nameext, , "Enemy (Less powerful group)"))

Enemy (Formidable group), -30/-40, upto(2), mods(Enemy, Frequency of Appearance), 
	page(CR?), cat(Mundane, Social),
	levelnames("medium-sized group, some formidable or super-human", "utterly formidable group"),
	initmods(_
			Frequency of Appearance: roll of  9 or less, *1, shortname(9 or less), group(Frequency of Appearance) _
			),
	x(#InputToTagReplace("Name or describe your Enemy Group:", nameext, , "Enemy (Formidable group)"))

Mistaken Identity, -5, page(CR?), cat(Mundane, Social, Other Physical Features)
Odious Personal Habit, -5/-10, upto(3), page(CR?), cat(Mundane, Social, Other Physical Features),
	conditional(-1 to ST:Reaction when people notice your problem),
	x(#InputToTag(Specify the Odious Personal Habit:, nameext, , Odious Personal Habit))
Odious Racial Habit, -5/-10, upto(3), page(CR?), cat(Mundane, Social, Other Physical Features),
	conditional(-1 to ST:Reaction when other species notice your racial problem),
	x(#InputToTag(Specify the Odious Racial Habit:, nameext, , Odious Racial Habit))

Pacifism (Reluctant Killer), -5, page(CR?), cat(Mundane, Mental), mods(Pacifism), taboo(DI:Pacifism (Cannot Harm Innocents), DI:Pacifism (Cannot Kill), DI:Pacifism (Self-Defense Only), DI:Pacifism (Total Nonviolence))
Pacifism (Cannot Harm Innocents), -10, page(CR?), cat(Mundane, Mental), mods(Pacifism), taboo(DI:Pacifism (Reluctant Killer), DI:Pacifism (Cannot Kill), DI:Pacifism (Self-Defense Only), DI:Pacifism (Total Nonviolence))
Pacifism (Cannot Kill), -15, page(CR?), cat(Mundane, Mental), mods(Pacifism), taboo(DI:Pacifism (Reluctant Killer), DI:Pacifism (Cannot Harm Innocents), DI:Pacifism (Self-Defense Only), DI:Pacifism (Total Nonviolence))
Pacifism (Self-Defense Only), -15, page(CR?), cat(Mundane, Mental), mods(Pacifism), taboo(DI:Pacifism (Reluctant Killer), DI:Pacifism (Cannot Harm Innocents), DI:Pacifism (Cannot Kill), DI:Pacifism (Total Nonviolence))
Pacifism (Total Nonviolence), -30, page(CR?), cat(Mundane, Mental), mods(Pacifism), taboo(DI:Pacifism (Reluctant Killer), DI:Pacifism (Cannot Harm Innocents), DI:Pacifism (Cannot Kill), DI:Pacifism (Self-Defense Only))

Reputation, -5/-10, mods(Reputation, Reputation Disadvantage), page(CR?), upto(4), cat(Mundane, Social, Influence),
	x(#InputToTag("Please describe the nature of the Reputation:", nameext, , "Reputation")),
	initmods(_
			People Affected: Almost everyone in the Star Wars universe, *1, shortname(Almost everyone), group(Reputation) _
			| Frequency of Recognition: All the time, *1, shortname(All the time), group(Reputation) _
			),
	conditional(-1 to ST:Reaction, +1 to SK:Indimidation when "your reputation counts", -1 to SK:Intimidation when "your reputation works against you")

Secret, -5/-10/-20/-30, upto(4), page(CR?), cat(Mundane, Social),
	levelnames("Serious Embarrassment", "Utter Rejection", "Imprisonment or Exile", "Possible Death"),
	x(#InputToTag("Please describe the nature of your Secret:", nameext, , "Secret"))

Secret Identity, -5/-10/-20/-30, mods(Secret Identity), page(CR?), cat(Mundane, Social),
	levelnames("Serious Embarrassment", "Utter Rejection", "Imprisonment or Exile", "Possible Death")

Social Stigma, -5/-10, upto(4), page(CR?), cat(Mundane, Social),
	conditional(-1 to ST:Reaction),
	x( #InputToTag("Please describe the nature of your social stigma:", nameext, , "Social Stigma") )

Social Stigma (Aliens), -10, page(CR?), cat(Mundane, Social),
	conditional(-2 to ST:Reaction when "Humans", +2 to ST:Reaction when "same species")
Social Stigma (Criminal Record), -5, page(CR?), cat(Mundane, Social),
	conditional(-1 to ST:Reaction)
Social Stigma (Disowned), -5, page(CR?), cat(Mundane, Social),
	conditional(-1 to ST:Reaction)
Social Stigma (Droid), -5/-10, upto(2), levelnames(free AI, property machine), page(CR?), cat(Mundane, Social),
	conditional(-1 to ST:Reaction)
Social Stigma (Publically disowned), -10, page(CR?), cat(Mundane, Social),
	conditional(-2 to ST:Reaction)
Social Stigma (Ignorant), -5, page(CR?), cat(Mundane, Social),
	conditional(-1 to ST:Reaction)
Social Stigma (Minor), -5, page(CR?), cat(Mundane, Social),
	conditional(-1 to ST:Reaction)
Social Stigma (Minority Group), -10, page(CR?), cat(Mundane, Social),
	conditional(-2 to ST:Reaction)
Social Stigma (Monster), -15, page(CR?), cat(Mundane, Social),
	conditional(-3 to ST:Reaction)
Social Stigma (Second-Class Citizen), -5, page(CR?), cat(Mundane, Social),
	conditional(-1 to ST:Reaction)
Social Stigma (Subjugated), -20, page(CR?), cat(Mundane, Social),
	conditional(-4 to ST:Reaction)
Social Stigma (Uneducated), -5, page(CR?), cat(Mundane, Social),
	conditional(-1 to ST:Reaction)
Social Stigma (Valuable Property), -10, page(CR?), cat(Mundane, Social),
	conditional(-2 to ST:Reaction)

Status, -5/-10, page(CR?), upto(2), gives(-1 to ST:Status), cat(Mundane, Social, Influence), taboo(AD:Status)

Status (Imperial), -5/-10, page(CR?), upto(2), gives(-1 to ST:Status), cat(Mundane, Social, Influence), taboo(AD:Status)
Status (Republic), -5/-10, page(CR?), upto(2), gives(-1 to ST:Status), cat(Mundane, Social, Influence), taboo(AD:Status)
Status (Trade Federation), -5/-10, page(CR?), upto(2), gives(-1 to ST:Status), cat(Mundane, Social, Influence), taboo(AD:Status)
Status (C.I.S.), -5/-10, page(CR?), upto(2), gives(-1 to ST:Status), cat(Mundane, Social, Influence), taboo(AD:Status)

Wealth, -10/-15/-25, gives(=@indexedvalue(%level, -5, -8, -10) To ST:Wealth Modifier), upto(3), page(CR?), levelnames([Average], Struggling, Poor, Dead Broke), taboo(AD:Wealth), cat(Mundane, Social, Wealth)

*********************************************************************************************************************
[QUIRKS]
*********************************************************************************************************************
<General>

<Mental>
Attentive, -1, page(CR?)
Broad-Minded, -1, page(CR?)
Careful, -1, page(CR?)
Chauvinistic, -1, page(CR?)
Code of Honor, -1, page(CR?)
Congenial, -1, page(CR?)
Delusion, -1, page(CR?)
Dislikes [specify], -1, page(CR?), x( #InputReplace("Specify what the character dislikes:", "[specify]", , "Dislikes") )
Distractible, -1, page(CR?)
Dreamer, -1, page(CR?)
Dull, -1, page(CR?)
Gentle, -1, page(CR?)
Habit, -1, page(CR?), x( #InputToTag("Specify what the character's habit is:", nameext, , "Habit") )
Expression, -1, page(CR?), x( #InputToTag("Specify what the character's expression is:", nameext, , "Expression") )
Hates [specify], -1, page(CR?), x( #InputReplace("Specify what the character hates:", "[specify]", , "Hates") )
Humble, -1, page(CR?)
Imaginative, -1, page(CR?)
Incompetence ([skill]), -1, page(CR?),
	gives(-4 to SK:[skill]), noresync(yes),
	x(#InputReplace("Specify the skill the character is incompetent with:", "[skill]", ,"Incompetence"))
Likes [specify], -1, page(CR?), x( #InputReplace("Specify what the character likes:", "[specify]", , "Likes") )
Minor Psychological Addiction [specify], -1, page(CR?),, x(#InputReplace("Specify on what your character is addicted to:", "[specify]", , "Minor Psychological Addiction") )
Nosy, -1, page(CR?)
Obsession, -1, page(CR?)
Opportunistic, -1, page(CR?)
Personality Change, -1, page(CR?)
Pessimism, -1, (CR?)
Proud, -1, page(CR?)
Responsive, -1, page(CR?)
Staid, -1, page(CR?)
Sucker [specify], -1, page(CR?), x( #InputReplace("Specify for what the character turns into a sucker:", "[specify]", , "Sucker") )
Superstitious, -1, page(CR?)
Suspicious, -1, page(CR?)
Trademark, -1, page(CR?)
Uncongenial, -1, page(CR?)
Vanity, -1, page(CR?)
Vow, -1, page(CR?)

<Physical>
Acceleration Weakness, -1, page(CR?)
Alcohol Intolerance, -1, page(CR?)
Bowlegged, -1, page(CR?), gives(-1 to SK:Jumping)
Cannot Float, -1, page(CR?)
Distinctive Feature, -1, page(CR?)
Horrible Hangovers, -1, page(CR?)
Minor Physiological Addiction [specify], -1, page(CR?),, x(#InputReplace("Specify on what your character is addicted to:", "[specify]", , "Minor Physiological Addiction") )
Minor Handicap, -1, page(CR?)
Nervous Stomach, -1, page(CR?)
Neutered, -1, page(CR?)
Sexless, -1, page(CR?)
Sterility, 0, page(CR?)
Stoic, -1, page(CR?)
*********************************************************************************************************************
[MODIFIERS]
*********************************************************************************************************************
*Innate Attack Modifiers

<Innate Attack>
Partial Dice (Does only 1 pt), *0.25, group(Innate Attack), page(CR?), tier(-1),
	gives(_
		=nobase to owner::damage$,
		=1 to owner::damage_
		)

<Affliction Enhancements>

<Affliction Limitations>

<Burning Attack Enhancements>
Cyclic (1 day interval), +0%/+10%/+20%, mods(Cyclic), group(Burning Attack Enhancements), page(CR?), gives(=" {x$solver(me::level)/day}" to owner::damtype$), level(2),
	levelnames(1 cycle, 2 cycles, 3 cycles, 4 cycles, 5 cycles, 6 cycles, 7 cycles, 8 cycles, 9 cycles, 10 cycles, 11 cycles, 12 cycles, 13 cycles, 14 cycles, 15 cycles, 16 cycles, 17 cycles, 18 cycles, 19 cycles, 20 cycles, 21 cycles, 22 cycles, 23 cycles, 24 cycles, 25 cycles, 26 cycles, 27 cycles, 28 cycles, 29 cycles, 30 cycles, 31 cycles, 32 cycles, 33 cycles, 34 cycles, 35 cycles, 36 cycles, 37 cycles, 38 cycles, 39 cycles, 40 cycles, 41 cycles, 42 cycles, 43 cycles, 44 cycles, 45 cycles, 46 cycles, 47 cycles, 48 cycles, 49 cycles, 50 cycles, 51 cycles, 52 cycles, 53 cycles, 54 cycles, 55 cycles, 56 cycles, 57 cycles, 58 cycles, 59 cycles, 60 cycles, 61 cycles, 62 cycles, 63 cycles, 64 cycles, 65 cycles, 66 cycles, 67 cycles, 68 cycles, 69 cycles, 70 cycles, 71 cycles, 72 cycles, 73 cycles, 74 cycles, 75 cycles, 76 cycles, 77 cycles, 78 cycles, 79 cycles, 80 cycles, 81 cycles, 82 cycles, 83 cycles, 84 cycles, 85 cycles, 86 cycles, 87 cycles, 88 cycles, 89 cycles, 90 cycles, 91 cycles, 92 cycles, 93 cycles, 94 cycles, 95 cycles, 96 cycles, 97 cycles, 98 cycles, 99 cycles, 100 cycles)
Cyclic (1 hour interval), +0%/+20%/+40%, mods(Cyclic), group(Burning Attack Enhancements), page(CR?), gives(=" {x$solver(me::level)/hr}" to owner::damtype$), level(2),
	levelnames(1 cycle, 2 cycles, 3 cycles, 4 cycles, 5 cycles, 6 cycles, 7 cycles, 8 cycles, 9 cycles, 10 cycles, 11 cycles, 12 cycles, 13 cycles, 14 cycles, 15 cycles, 16 cycles, 17 cycles, 18 cycles, 19 cycles, 20 cycles, 21 cycles, 22 cycles, 23 cycles, 24 cycles, 25 cycles, 26 cycles, 27 cycles, 28 cycles, 29 cycles, 30 cycles, 31 cycles, 32 cycles, 33 cycles, 34 cycles, 35 cycles, 36 cycles, 37 cycles, 38 cycles, 39 cycles, 40 cycles, 41 cycles, 42 cycles, 43 cycles, 44 cycles, 45 cycles, 46 cycles, 47 cycles, 48 cycles, 49 cycles, 50 cycles, 51 cycles, 52 cycles, 53 cycles, 54 cycles, 55 cycles, 56 cycles, 57 cycles, 58 cycles, 59 cycles, 60 cycles, 61 cycles, 62 cycles, 63 cycles, 64 cycles, 65 cycles, 66 cycles, 67 cycles, 68 cycles, 69 cycles, 70 cycles, 71 cycles, 72 cycles, 73 cycles, 74 cycles, 75 cycles, 76 cycles, 77 cycles, 78 cycles, 79 cycles, 80 cycles, 81 cycles, 82 cycles, 83 cycles, 84 cycles, 85 cycles, 86 cycles, 87 cycles, 88 cycles, 89 cycles, 90 cycles, 91 cycles, 92 cycles, 93 cycles, 94 cycles, 95 cycles, 96 cycles, 97 cycles, 98 cycles, 99 cycles, 100 cycles)
Cyclic (1 minute interval), +0%/+40%/+80%, mods(Cyclic), group(Burning Attack Enhancements), page(CR?), gives(=" {x$solver(me::level)/min}" to owner::damtype$), level(2),
	levelnames(1 cycle, 2 cycles, 3 cycles, 4 cycles, 5 cycles, 6 cycles, 7 cycles, 8 cycles, 9 cycles, 10 cycles, 11 cycles, 12 cycles, 13 cycles, 14 cycles, 15 cycles, 16 cycles, 17 cycles, 18 cycles, 19 cycles, 20 cycles, 21 cycles, 22 cycles, 23 cycles, 24 cycles, 25 cycles, 26 cycles, 27 cycles, 28 cycles, 29 cycles, 30 cycles, 31 cycles, 32 cycles, 33 cycles, 34 cycles, 35 cycles, 36 cycles, 37 cycles, 38 cycles, 39 cycles, 40 cycles, 41 cycles, 42 cycles, 43 cycles, 44 cycles, 45 cycles, 46 cycles, 47 cycles, 48 cycles, 49 cycles, 50 cycles, 51 cycles, 52 cycles, 53 cycles, 54 cycles, 55 cycles, 56 cycles, 57 cycles, 58 cycles, 59 cycles, 60 cycles, 61 cycles, 62 cycles, 63 cycles, 64 cycles, 65 cycles, 66 cycles, 67 cycles, 68 cycles, 69 cycles, 70 cycles, 71 cycles, 72 cycles, 73 cycles, 74 cycles, 75 cycles, 76 cycles, 77 cycles, 78 cycles, 79 cycles, 80 cycles, 81 cycles, 82 cycles, 83 cycles, 84 cycles, 85 cycles, 86 cycles, 87 cycles, 88 cycles, 89 cycles, 90 cycles, 91 cycles, 92 cycles, 93 cycles, 94 cycles, 95 cycles, 96 cycles, 97 cycles, 98 cycles, 99 cycles, 100 cycles)
Cyclic (10 second interval), +0%/+50%/+100%, mods(Cyclic), group(Burning Attack Enhancements), page(CR?), gives(=" {x$solver(me::level)/10sec}" to owner::damtype$), level(2),
	levelnames(1 cycle, 2 cycles, 3 cycles, 4 cycles, 5 cycles, 6 cycles, 7 cycles, 8 cycles, 9 cycles, 10 cycles, 11 cycles, 12 cycles, 13 cycles, 14 cycles, 15 cycles, 16 cycles, 17 cycles, 18 cycles, 19 cycles, 20 cycles, 21 cycles, 22 cycles, 23 cycles, 24 cycles, 25 cycles, 26 cycles, 27 cycles, 28 cycles, 29 cycles, 30 cycles, 31 cycles, 32 cycles, 33 cycles, 34 cycles, 35 cycles, 36 cycles, 37 cycles, 38 cycles, 39 cycles, 40 cycles, 41 cycles, 42 cycles, 43 cycles, 44 cycles, 45 cycles, 46 cycles, 47 cycles, 48 cycles, 49 cycles, 50 cycles, 51 cycles, 52 cycles, 53 cycles, 54 cycles, 55 cycles, 56 cycles, 57 cycles, 58 cycles, 59 cycles, 60 cycles, 61 cycles, 62 cycles, 63 cycles, 64 cycles, 65 cycles, 66 cycles, 67 cycles, 68 cycles, 69 cycles, 70 cycles, 71 cycles, 72 cycles, 73 cycles, 74 cycles, 75 cycles, 76 cycles, 77 cycles, 78 cycles, 79 cycles, 80 cycles, 81 cycles, 82 cycles, 83 cycles, 84 cycles, 85 cycles, 86 cycles, 87 cycles, 88 cycles, 89 cycles, 90 cycles, 91 cycles, 92 cycles, 93 cycles, 94 cycles, 95 cycles, 96 cycles, 97 cycles, 98 cycles, 99 cycles, 100 cycles)
Cyclic (1 second interval), +0%/+100%/+200%, mods(Cyclic), group(Burning Attack Enhancements), page(CR?), gives(=" {x$solver(me::level)/sec}" to owner::damtype$), level(2),
	levelnames(1 cycle, 2 cycles, 3 cycles, 4 cycles, 5 cycles, 6 cycles, 7 cycles, 8 cycles, 9 cycles, 10 cycles, 11 cycles, 12 cycles, 13 cycles, 14 cycles, 15 cycles, 16 cycles, 17 cycles, 18 cycles, 19 cycles, 20 cycles, 21 cycles, 22 cycles, 23 cycles, 24 cycles, 25 cycles, 26 cycles, 27 cycles, 28 cycles, 29 cycles, 30 cycles, 31 cycles, 32 cycles, 33 cycles, 34 cycles, 35 cycles, 36 cycles, 37 cycles, 38 cycles, 39 cycles, 40 cycles, 41 cycles, 42 cycles, 43 cycles, 44 cycles, 45 cycles, 46 cycles, 47 cycles, 48 cycles, 49 cycles, 50 cycles, 51 cycles, 52 cycles, 53 cycles, 54 cycles, 55 cycles, 56 cycles, 57 cycles, 58 cycles, 59 cycles, 60 cycles, 61 cycles, 62 cycles, 63 cycles, 64 cycles, 65 cycles, 66 cycles, 67 cycles, 68 cycles, 69 cycles, 70 cycles, 71 cycles, 72 cycles, 73 cycles, 74 cycles, 75 cycles, 76 cycles, 77 cycles, 78 cycles, 79 cycles, 80 cycles, 81 cycles, 82 cycles, 83 cycles, 84 cycles, 85 cycles, 86 cycles, 87 cycles, 88 cycles, 89 cycles, 90 cycles, 91 cycles, 92 cycles, 93 cycles, 94 cycles, 95 cycles, 96 cycles, 97 cycles, 98 cycles, 99 cycles, 100 cycles)
Cyclic: Contagious, +20%/+50%, upto(2), levelnames (Mildly, Highly), group(Burning Attack Enhancements), page(CR?)

Damage Modifier: Double Blunt Trauma, +20%, shortname(Double Blunt Trauma), group(Burning Attack Enhancements), page(CR?),
	gives(=" dbt" to owner::damtype$)
Damage Modifier: Radiation, +100%, shortname(Radiation (burning)), group(Burning Attack Enhancements), page(CR?),
	gives(=" rad" to owner::damtype$)

<Burning Attack Limitations>

<Crushing Attack Enhancements>

<Crushing Attack Limitations>

<Corrosion Attack Enhancements>

<Corrosion Attack Limitations>

<Cutting Attack Enhancements>

<Cutting Attack Limitations>

<Fatigue Attack Enhancements>

<Fatigue Attack Limitations>

<Huge Piercing Attack Enhancements>

<Huge Piercing Attack Limitations>

<Impaling Attack Enhancements>

<Impaling Attack Limitations>

<Large Piercing Attack Enhancements>

<Large Piercing Attack Limitations>

<Piercing Attack Enhancements>

<Piercing Attack Limitations>

<Small Piercing Attack Enhancements>

<Small Piercing Attack Limitations>

<Toxic Attack Enhancements>

<Toxic Attack Limitations>

<_Attack Enhancements>
Area Effect, +50%/+100%, group(_Attack Enhancements), page(CR?), upto(25), shortname(Area Effect),
	levelnames("2 m","4 m","8 m","16 m","32 m","64 m","128 m","256 m","0.5 km","1 km","2 km","4 km","8 km","16 km","32 km","64 km","128 km","256 km","512 km","1,024 km","2,048 km","4,096 km","8,192 km","16,384 km","32,768 km","65,536 km"),
	gives(=+@if(owner::radius = 0 THEN (2^me::level)) to owner::radius, =*@if(owner::radius > 0 THEN (2^me::level)) to owner::radius)

Armor Divisor, +50%/+100%, levelnames(2, 3, 5, 10, 20, 30, 50, 100, 200, 300, 500, 1000, ignores armor), upto(13), group(_Attack Enhancements), page(CR?),
	gives(=@indexedvalue(me::level, 2, 3, 5, 10, 20, 30, 50, 100, 200, 300, 500, 1000, "ignores armor") to owner::armordivisor)

Damage Modifier: Explosion, +50%/+100%, upto(3), shortname(Explosive), group(_Attack Enhancements), page(CR?),
	levelnames(Damage / 3xYards, Damage / 2xYards, Damage / 1xYards),
	gives(=" ex/$solver(4-me::level)" to owner::damtype$)
Damage Modifier: Fragmentation, +15%/+30%, upto(@min(owner::level, 12)), shortname(Fragmentation), group(_Attack Enhancements), page(CR?),
	levelnames([0d], [1d], [2d], [3d], [4d], [5d], [6d], [7d], [8d], [9d], [10d], [11d], [12d]),
	gives(=" frag cut " to owner::damtype$, =$indexedvalue(me::level, "[1d]", "[2d]", "[3d]", "[4d]", "[5d]", "[6d]", "[7d]", "[8d]", "[9d]", "[10d]", "[11d]", "[12d]") to owner::damtype$)
Damage Modifier: Fragmentation (hot fragments), +15%/+30%, upto(@min(owner::level, 12)), shortname(Fragmentation (hot)), group(_Attack Enhancements), page(CR?),
	levelnames([0d], [1d(0.2)], [2d(0.2)], [3d(0.2)], [4d(0.2)], [5d(0.2)], [6d(0.2)], [7d(0.2)], [8d(0.2)], [9d(0.2)], [10d(0.2)], [11d(0.2)], [12d(0.2)]),
	gives(=" frag burn " to owner::damtype$, =$indexedvalue(me::level, "[1d(0.2)]", "[2d(0.2)]", "[3d(0.2)]", "[4d(0.2)]", "[5d(0.2)]", "[6d(0.2)]", "[7d(0.2)]", "[8d(0.2)]", "[9d(0.2)]", "[10d(0.2)]", "[11d(0.2)]", "[12d(0.2)]") to owner::damtype$)
Damage Modifier: Surge, +20%, shortname(Surge), group(_Attack Enhancements), page(CR?),
	gives(=" sur" to owner::damtype$)

Increased Range (1/2D & Max Range), +10%/+20%, group(_Attack Enhancements), page(CR?),
	levelnames(x2, x5, x10, x20, x50, x100, x200, x500, "x1,000", "x2,000", "x5,000", "x10,000", "x20,000", "x50,000", "x100,000", "x200,000", "x500,000", "x1,000,000", "x2,000,000", "x5,000,000", "x10,000,000", "x20,000,000", "x50,000,000", "x100,000,000", "x200,000,000", "x500,000,000", "x1,000,000,000", "x2,000,000,000", "x5,000,000,000", "x10,000,000,000", "x20,000,000,000", "x50,000,000,000", "x100,000,000,000", "x200,000,000,000", "x500,000,000,000", "x1,000,000,000,000"), upto(36),
	gives(_
		=*(@indexedvalue(1 + me::level - (3 * @int(me::level/3)),1,2,5) * (10^@int(me::level/3))) to owner::rangehalfdam,
		=*(@indexedvalue(1 + me::level - (3 * @int(me::level/3)),1,2,5) * (10^@int(me::level/3))) to owner::rangemax _
		)
Increased Range (1/2D Range only), +5%/+10%, group(_Attack Enhancements), page(CR?),
	levelnames(x2, x5, x10, x20, x50, x100, x200, x500, "x1,000", "x2,000", "x5,000", "x10,000", "x20,000", "x50,000", "x100,000", "x200,000", "x500,000", "x1,000,000", "x2,000,000", "x5,000,000", "x10,000,000", "x20,000,000", "x50,000,000", "x100,000,000", "x200,000,000", "x500,000,000", "x1,000,000,000", "x2,000,000,000", "x5,000,000,000", "x10,000,000,000", "x20,000,000,000", "x50,000,000,000", "x100,000,000,000", "x200,000,000,000", "x500,000,000,000", "x1,000,000,000,000"), upto(36),
	gives(_
		=*(@indexedvalue(1 + me::level - (3 * @int(me::level/3)),1,2,5) * (10^@int(me::level/3))) to owner::rangehalfdam _
		)
Increased Range (Max Range only), +5%/+10%, group(_Attack Enhancements), page(CR?),
	levelnames(x2, x5, x10, x20, x50, x100, x200, x500, "x1,000", "x2,000", "x5,000", "x10,000", "x20,000", "x50,000", "x100,000", "x200,000", "x500,000", "x1,000,000", "x2,000,000", "x5,000,000", "x10,000,000", "x20,000,000", "x50,000,000", "x100,000,000", "x200,000,000", "x500,000,000", "x1,000,000,000", "x2,000,000,000", "x5,000,000,000", "x10,000,000,000", "x20,000,000,000", "x50,000,000,000", "x100,000,000,000", "x200,000,000,000", "x500,000,000,000", "x1,000,000,000,000"), upto(36),
	gives(_
		=*(@indexedvalue(1 + me::level - (3 * @int(me::level/3)),1,2,5) * (10^@int(me::level/3))) to owner::rangemax _
		)

Malediction, +100%/+150%/+200%, upto(3), group(_Attack Enhancements), page(CR?),
	levelnames(Receives -1/m range, Uses Speed/Range Table, Uses Long-Distance Modifiers),
	gives(_
		=nobase to owner::reach$,
		=nobase to owner::acc$,
		=nobasenocalc to owner::rangehalfdam$,
		=nobasenocalc to owner::rangemax$,
		=nobase to owner::rof$,
		=nobase to owner::shots$,
		=nobase to owner::rcl$,
		=" mal " to owner::damtype$,
		=$indexedvalue(me::level, "-1/m", "Speed/Range", "Long-Distance") to owner::rangemax$_
		)

Rapid Fire, +0%/+40%/+50%/+70%/+,
	formula(@if(me::level > 150 THEN 300 ELSE @if(me::level > 70 THEN 250 ELSE _
			@if(me::level > 30 THEN 200 ELSE @if(me::level > 15 THEN 150 ELSE _
			@if(me::level > 7 THEN 100 ELSE @if(me::level > 3 THEN 70 ELSE _
			@if(me::level = 3 THEN 50 ELSE @if(me::level = 2 THEN 40 ELSE 0))))))))), forceformula(yes),
	group(_Attack Enhancements), page(CR?), level([level]), upto(300),
	gives(_
		=nobase to owner::rof$,
		=$solver(me::level) to owner::rof$ _
		),
	x(#InputReplace("Please enter the desired RoF (upto 300):", "[level]", "2", "Rapid Fire"))

Rapid Fire (Multiple Projectiles), +0%/+40%/+50%/+70%/+,
	levelnames(1x[projectiles],2x[projectiles],3x[projectiles],4x[projectiles],5x[projectiles],6x[projectiles],7x[projectiles],8x[projectiles],9x[projectiles],10x[projectiles],11x[projectiles],12x[projectiles],13x[projectiles],14x[projectiles],15x[projectiles],16x[projectiles],17x[projectiles],18x[projectiles],19x[projectiles],20x[projectiles],21x[projectiles],22x[projectiles],23x[projectiles],24x[projectiles],25x[projectiles],26x[projectiles],27x[projectiles],28x[projectiles],29x[projectiles],30x[projectiles],31x[projectiles],32x[projectiles],33x[projectiles],34x[projectiles],35x[projectiles],36x[projectiles],37x[projectiles],38x[projectiles],39x[projectiles],40x[projectiles],41x[projectiles],42x[projectiles],43x[projectiles],44x[projectiles],45x[projectiles],46x[projectiles],47x[projectiles],48x[projectiles],49x[projectiles],50x[projectiles],51x[projectiles],52x[projectiles],53x[projectiles],54x[projectiles],55x[projectiles],56x[projectiles],57x[projectiles],58x[projectiles],59x[projectiles],60x[projectiles],61x[projectiles],62x[projectiles],63x[projectiles],64x[projectiles],65x[projectiles],66x[projectiles],67x[projectiles],68x[projectiles],69x[projectiles],70x[projectiles],71x[projectiles],72x[projectiles],73x[projectiles],74x[projectiles],75x[projectiles],76x[projectiles],77x[projectiles],78x[projectiles],79x[projectiles],80x[projectiles],81x[projectiles],82x[projectiles],83x[projectiles],84x[projectiles],85x[projectiles],86x[projectiles],87x[projectiles],88x[projectiles],89x[projectiles],90x[projectiles],91x[projectiles],92x[projectiles],93x[projectiles],94x[projectiles],95x[projectiles],96x[projectiles],97x[projectiles],98x[projectiles],99x[projectiles],100x[projectiles],101x[projectiles],102x[projectiles],103x[projectiles],104x[projectiles],105x[projectiles],106x[projectiles],107x[projectiles],108x[projectiles],109x[projectiles],110x[projectiles],111x[projectiles],112x[projectiles],113x[projectiles],114x[projectiles],115x[projectiles],116x[projectiles],117x[projectiles],118x[projectiles],119x[projectiles],120x[projectiles],121x[projectiles],122x[projectiles],123x[projectiles],124x[projectiles],125x[projectiles],126x[projectiles],127x[projectiles],128x[projectiles],129x[projectiles],130x[projectiles],131x[projectiles],132x[projectiles],133x[projectiles],134x[projectiles],135x[projectiles],136x[projectiles],137x[projectiles],138x[projectiles],139x[projectiles],140x[projectiles],141x[projectiles],142x[projectiles],143x[projectiles],144x[projectiles],145x[projectiles],146x[projectiles],147x[projectiles],148x[projectiles],149x[projectiles],150x[projectiles]),
	forceformula(yes),
	formula(@indexedvalue(me::level*[projectiles],0,40,50,70,70,70,70,100,100,100,100,100,100,100,100,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,300,300)),
	shortname(Rapid Fire),
	group(_Attack Enhancements), page(CR?), level([level]), upto(300/[projectiles]),
	gives(_
		=nobase to owner::rof$,
		=$solver(me::level)x[projectiles] to owner::rof$ _
		),
	x(_
		#InputReplace("Please enter the number of individual shots (i.e. the 4 in a RoF 4x3):", "[level]", "2", "Rapid Fire (Multiple Projectiles)"),
		#InputReplace("Please enter the number of projectiles each shot has (i.e. the 3 in a RoF 4x3):", "[projectiles]", "2", "Rapid Fire (Multiple Projectiles)")_
		)

Rapid Fire: Selective Fire, +10%, group(_Attack Enhancements), page(CR?), shortname(Selective Fire)

Sense-Based, +150%/+200%/+250%, group(_Attack Enhancements), page(CR?),
	levelnames(One sense, Two senses, Three senses)

<Symptom>

<_Attack Limitations>
Emanation, -20%, group(_Attack Limitations), page(CR?),
	gives(_
		="$solver(owner::charradius) m" to owner::reach$,
		=nobase to owner::rangehalfdam$,
		=nobase to owner::rangemax$ _
		),
	x(#Message("Emanation requires the Area Effect enhancement"))

Extra Recoil, -10%/-20%, levelnames(Rcl 2, Rcl 3, Rcl 4, Rcl 5+), upto(4), group(_Attack Limitations), page(CR?),
	gives(_
		=nobase to owner::rcl$,
		=$indexedvalue(me::level, "2", "3", "4", "5+") to owner::rcl$ _
		)

Inaccurate, -5%/-10%, group(_Attack Limitations), page(CR?),
	levelnames(-1,-2,-3,-4,-5,-6,-7,-8,-9,-10), gives(-1 to owner::acc), upto(owner::acc)

Melee Attack: Reach C, -30%, group(_Attack Limitations), page(CR?),
	gives(_
		=nobase to owner::rangehalfdam$,
		=nobase to owner::rangemax$,
		=nobase to owner::reach$,
		="C" to owner::reach$ _
		)
Melee Attack: Reach 1, -25%, group(_Attack Limitations), page(CR?),
	gives(_
		=nobase to owner::rangehalfdam$,
		=nobase to owner::rangemax$,
		=nobase to owner::reach$,
		="1" to owner::reach$ _
		)
Melee Attack: Reach 2, -25%, group(_Attack Limitations), page(CR?),
	gives(_
		=nobase to owner::rangehalfdam$,
		=nobase to owner::rangemax$,
		=nobase to owner::reach$,
		="2" to owner::reach$ _
		)
"Melee Attack: Reach C,1", -20%, group(_Attack Limitations), page(CR?2),
	gives(_
		=nobase to owner::rangehalfdam$,
		=nobase to owner::rangemax$,
		=nobase to owner::reach$,
		="C,1" to owner::reach$ _
		)
"Melee Attack: Reach 1,2", -20%, group(_Attack Limitations), page(CR?),
	gives(_
		=nobase to owner::rangehalfdam$,
		=nobase to owner::rangemax$,
		=nobase to owner::reach$,
		="1,2" to owner::reach$ _
		)
"Melee Attack: Reach 2,3", -20%, group(_Attack Limitations), page(CR?),
	gives(_
		=nobase to owner::rangehalfdam$,
		=nobase to owner::rangemax$,
		=nobase to owner::reach$,
		="2,3" to owner::reach$ _
		)
Melee Attack: Reach 1-4 (like a whip), -15%, group(_Attack Limitations), page(CR?),
	gives(_
		=nobase to owner::rangehalfdam$,
		=nobase to owner::rangemax$,
		=nobase to owner::reach$,
		="1-4" to owner::reach$ _
		)
Melee Attack: Cannot Parry, -5%, shortname(Cannot Parry), group(_Attack Limitations), page(CR?),
	gives(_
		=nobase to owner::parry$,
		="No" to owner::parry$ _
		)

Reduced Range, -10%/-20%, levelnames(x1/2, x1/5, x1/10, x1/20, x1/50, x1/100, x1/200, x1/500), upto(8), group(_Attack Limitations), page(CR?),
	gives(_
		=*@indexedvalue(me::level,0.5,0.2,0.1, 0.05, 0.02, 0.01, 0.005, 0.002) to owner::rangehalfdam,
		=*@indexedvalue(me::level,0.5,0.2,0.1, 0.05, 0.02, 0.01, 0.005, 0.002) to owner::rangemax _
		)
Reduced Range (1/2D Range Only), -5%/-10%, levelnames(x1/2, x1/5, x1/10, x1/20, x1/50, x1/100, x1/200, x1/500), upto(8), group(_Attack Limitations), page(CR?),
	gives(_
		=*@indexedvalue(me::level,0.5,0.2,0.1, 0.05, 0.02, 0.01, 0.005, 0.002) to owner::rangehalfdam _
		)

Sense-Based (with Malediction), -20%/-15%/-10%, upto(3), group(_Attack Limitations), page(CR?),
	levelnames(One sense, Two senses, Three senses)

<Cyclic>

<Homing>
Infravision, +10, group(Homing), page(CR?)
Dark Vision, +25, group(Homing), page(CR?), mods(Dark Vision)
Night Vision, +1/+2, group(Homing), page(CR?), upto(9)
Telescopic Vision, +5/+10, group(Homing), page(CR?)
Ultravision, +10, group(Homing), page(CR?)
Vibration Sense, +10, group(Homing), page(CR?)
Vision, 0, group(Homing), page(CR?)

<_General>
Cosmic: ability other than an attack or a defense, +50%, group(_General), page(CR?)
Cosmic: Defense or countermeasure, +50%, group(_General), page(CR?)
Cosmic: Attack with a lingering special effect, +100%, group(_General), page(CR?)
Cosmic: Irresistible attack, +300%, group(_General), page(CR?)

Costs Fatigue, -5%/-10%, mods(Costs Fatigue), group(_General), page(CR?)

Increased Range, +10%/+20%, group(_General), page(CR?),
	levelnames(x2, x5, x10, x20, x50, x100, x200, x500, "x1,000", "x2,000", "x5,000", "x10,000", "x20,000", "x50,000", "x100,000", "x200,000", "x500,000", "x1,000,000", "x2,000,000", "x5,000,000", "x10,000,000", "x20,000,000", "x50,000,000", "x100,000,000", "x200,000,000", "x500,000,000", "x1,000,000,000", "x2,000,000,000", "x5,000,000,000", "x10,000,000,000", "x20,000,000,000", "x50,000,000,000", "x100,000,000,000", "x200,000,000,000", "x500,000,000,000", "x1,000,000,000,000"), upto(36)

Link, +10%/+20%, levelnames(Powers must be used together, powers can be used separately), upto(2), group(_General), page(CR?)

Mitigator: vulnerable, -60%, group(_General), page(CR?)
Mitigator: daily treatment, -60%, group(_General), page(CR?)
Mitigator: weekly treatment, -65%, group(_General), page(CR?)
Mitigator: monthly treatment, -70%, group(_General), page(CR?)

Limited Use, -10%/-10%/-10%/-10%/-10%/-10%/-20%/-20%/-30%/-40%,
	levelnames(10/day,9/day,8/day,7/day,6/day,5/day,4/day,3/day,2/day,1/day), upto(10),
	group(_General), page(CR?),
	gives(_
		=nobase to owner::shots$,
		=$solver(owner::charrof * (11 - me::level)) to owner::shots$ _
		), level(%levelaliaslist%),
	x(#ChoiceList(_
			name(level),
			title(Limited Use),
			text(Select how many uses per day the ability is limited to:),
			picksallowed(exactly 1),
			method(bynumber),
			list(_
				"10/day",
				" 9/day",
				" 8/day",
				" 7/day",
				" 6/day",
				" 5/day",
				" 4/day",
				" 3/day",
				" 2/day",
				" 1/day"_
			   ),
			aliaslist(_
				"1",
				"2",
				"3",
				"4",
				"5",
				"6",
				"7",
				"8",
				"9",
				"10"_
			   )_
			)_
		)

Limited Use (Fast Reload), -5%/-5%/-5%/-5%/-5%/-5%/-10%/-10%/-15%/-20%,
	levelnames(RoFx10/day,RoFx9/day,RoFx8/day,RoFx7/day,RoFx6/day,RoFx5/day,RoFx4/day,RoFx3/day,RoFx2/day,RoFx1/day), upto(10),
	group(_General), page(CR?),
	gives(_
		=nobase to owner::shots$,
		=$solver(owner::charrof * (11 - me::level)) to owner::shots$ _
		), level(%levelaliaslist%),
	x(#ChoiceList(_
			name(level),
			title(Limited Use),
			text(Select how many uses per day the ability is limited to:),
			picksallowed(exactly 1),
			method(bynumber),
			list(_
				"RoF x10/day",
				"RoF x 9/day",
				"RoF x 8/day",
				"RoF x 7/day",
				"RoF x 6/day",
				"RoF x 5/day",
				"RoF x 4/day",
				"RoF x 3/day",
				"RoF x 2/day",
				"RoF x 1/day"_
			   ),
			aliaslist(_
				"1",
				"2",
				"3",
				"4",
				"5",
				"6",
				"7",
				"8",
				"9",
				"10"_
			   )_
			)_
		)

Limited Use (Slow Reload), -5%/-5%/-5%/-5%/-5%/-5%/-15%/-15%/-25%/-35%,
	levelnames(RoFx10/day,RoFx9/day,RoFx8/day,RoFx7/day,RoFx6/day,RoFx5/day,RoFx4/day,RoFx3/day,RoFx2/day,RoFx1/day), upto(10),
	group(_General), page(CR?),
	gives(_
		=nobase to owner::shots$,
		=$solver(owner::charrof * (11 - me::level)) to owner::shots$ _
		), level(%levelaliaslist%),
	x(#ChoiceList(_
			name(level),
			title(Limited Use),
			text(Select how many uses per day the ability is limited to:),
			picksallowed(exactly 1),
			method(bynumber),
			list(_
				"RoF x10/day",
				"RoF x 9/day",
				"RoF x 8/day",
				"RoF x 7/day",
				"RoF x 6/day",
				"RoF x 5/day",
				"RoF x 4/day",
				"RoF x 3/day",
				"RoF x 2/day",
				"RoF x 1/day"_
			   ),
			aliaslist(_
				"1",
				"2",
				"3",
				"4",
				"5",
				"6",
				"7",
				"8",
				"9",
				"10"_
			   )_
			)_
		)


Preparation Required, -20%/-30%/-50%/-60%, levelnames(1 minute, 10 minutes, 1 hour, 8 hours), upto(4), group(_General), page(CR?)
Preparation Required: Weakened Without Preparation, -10%/-15%/-25%/-30%, levelnames(1 minute, 10 minutes, 1 hour, 8 hours), upto(4), group(_General), page(CR?)

Temporary Disadvantage, -1%/-2%, group(_General), page(CR?), level(%levelaliaslist%),
	formula(-@min(me::level,@round((me::level*80/owner::premodspoints)+0.004999,2))), forceformula(yes),
	levelnames(-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100),
	x(_
	#InputToTag("Please specify the name of the Temporary Disadvantage:",nameext, ,Temporary Disadvantage),
	#ChoiceList(_
			name(level),
			title(Temporary Disadvantage),
			text(Please select the point cost of the Temporary Disadvantage. If the exact value is not listed pick the closest one, you will be able to adjust it later:),
			picksallowed(1),
			method(bynumber),
			list(_
				"  -1",
				"  -2",
				"  -3",
				"  -4",
				"  -5",
				"  -6",
				"  -7",
				"  -8",
				"  -9",
				" -10",
				" -11",
				" -12",
				" -13",
				" -14",
				" -15",
				" -20",
				" -25",
				" -30",
				" -35",
				" -40",
				" -45",
				" -50",
				" -55",
				" -60",
				" -65",
				" -70",
				" -75",
				" -80",
				" -85",
				" -90",
				" -95",
				"-100"_
				),
			aliaslist(_
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				20,
				25,
				30,
				35,
				40,
				45,
				50,
				55,
				60,
				65,
				70,
				75,
				80,
				85,
				90,
				95,
				100 _
					)_
			),
	#Edit _
	)

Uncontrollable, -10%/-30%, levelnames(non-destructive power, destructive power), upto(2), group(_General), page(CR?)

Unreliable/Activation,  -1%/-5%/-10%/-15%/-20%/-25%/-30%/-35%/-40%/-50%/-65%/-80%/-100%,
	levelnames(16 or less, 15 or less, 14 or less, 13 or less, 12 or less, 11 or less, 10 or less, 9 or less, 8 or less, 7 or less, 6 or less, 5 or less, 4 or less), upto(13), group(_General), page(CR?)
Unreliable/Malfunction, -5%/-10%, levelnames(malfunction number 16 , malfunction number 15, malfunction number 14, malfunction number 13, malfunction number 12), upto(5), group(_General), page(CR?)

<Can Be Stolen>

<Costs Fatigue>
Per Minute, *1, group(Costs Fatigue), page(CR?)
Per Second, *2, group(Costs Fatigue), page(CR?)
Per Activation, *1, group(Costs Fatigue), page(CR?)

<Cultural Familiarity>
Native, *0, group(Cultural Familiarity), page(CR?), gives(+1 to ST:Native Cultural Familiarities)

<Trigger>

<_Origin>
Biological, +0, group(_Origin), page(CR?)
High-Tech, +0, group(_Origin), page(CR?)

<360° Vision>
Easy to Hit, -20%, group(360° Vision), page(CR?)

<Absolute Direction>
Requires Signal, -20%, group(Absolute Direction), page(CR?)

<Addiction>
Effect: Incapacitating, -10, shortname(Incapacitating), group(Addiction), page(CR?)
Effect: Hallucinogenic, -10, shortname(Hallucinogenic), group(Addiction), page(CR?)
Effect: Stimulating, +0, shortname(Stimulating), group(Addiction), page(CR?)
Effect: Highly addictive (-5 on withdrawal roll), -5, shortname(Highly addictive), group(Addiction), page(CR?)
Effect: Totally addictive (-10 on withdrawal roll), -10, shortname(Totally addictive), group(Addiction), page(CR?)
Legality: Illegal, +0, shortname(Illegal), group(Addiction), page(CR?)
Legality: Legal, +5, shortname(Legal), group(Addiction), page(CR?)

<Affliction>

<Secondary>

<Accessibility>
Accessibility, -10%/-20%, group(_General), page(CR?),
	x(_
		#InputToTagReplace("Please describe the nature of the Accessibility:" , nameext, ,"Accessibility") _
	)

Accessibility: half power, -5%/-10%, group(_General), page(CR?),
	x(_
		#InputToTagReplace("Please describe the nature of the Accessibility:" , nameext, ,"Accessibility") _
	)
Accessibility (Only on Women), -20%, group(Accessibility), page(CR?)
Accessibility (Only on Men), -20%, group(Accessibility), page(CR?)
Accessibility (Only on Opposite Sex), -20%, group(Accessibility), page(CR?)
Accessibility (Only on same Race), -20%, group(Accessibility), page(CR?)
Accessibility (Only on Aliens), -10%, group(Accessibility), page(CR?)
Accessibility (Only on Non-airborne Aliens), -10%, group(Accessibility), page(CR?)
Accessibility (Mating Season Only), -80%, group(Accessibility), page(CR?)
Accessibility (Only on Electrical), -20%, group(Accessibility), page(CR?)
Accessibility (Only on Machines), -20%, group(Accessibility), page(CR?)
Accessibility (Only on Sea Creatures), -30%, group(Accessibility), page(CR?)
Accessibility (Only on Warm-Blooded Creatures), -10%, group(Accessibility), page(CR?)
Accessibility (Only at Day), -20%, group(Accessibility), page(CR?)
Accessibility (Only at Night), -20%, group(Accessibility), page(CR?)
Accessibility (Useless on Homeplanet), -10%, group(Accessibility), page(CR?)
Accessibility (Useless near Droids), -20%, group(Accessibility), page(CR?)
Accessibility (Useless under Stress), -60%, group(Accessibility), page(CR?)
Accessibility (Only in Natural Environments), -20%, group(Accessibility), page(CR?)
Accessibility (Only in Water), -20%, group(Accessibility), page(CR?)

<Ally>
Group Size, *6/*8, levelnames(6-10, 11-20, 21-50, 51-100, 101-200, 201-500, "501-1,000", "1,001-2,000", "2,001-5,000", "5,001-10,000", "10,001-20,000", "20,001-50,000", "50,001-10,0000", "100,001-200,000", "200,001-500,000", "500,001-1,000,000"), group(Ally), page(CR?)
Minion, +0%/+50%, group(Ally), page(CR?)
Special Abilities, +50%, group(Ally), page(CR?)
Sympathy, -25%/-50%, upto(2), group(Ally), page(CR?), levelnames(Death of one party reduces other to 0HP, Death of one party kills the other)
Sympathy: Allies wounds don't affect you, -5%/-10%, upto(2), group(Ally), page(CR?), levelnames(Death of one party reduces other to 0HP, Death of one party kills the other)
Unwilling, -50%, group(Ally), page(CR?)

<Alternate Form>
Difference in point costs, +1/+2, formula(@int(%level * 0.9 + 0.9)), forceformula(yes), tier(1), group(Alternate Form), page(CR?),
	level([level]),
	x(_
		#InputReplace("Please enter the differnce in point costs between the characters native template and his most expensive alternate form:", "[level]", "0", "Difference in point costs"),
	)

<Appearance>
Universal, +25%, group(Appearance), page(CR?)
Reaction (Only towards Aliens), -10%, group(Appearance), page(CR?)

<Arm DX>
One arm, *1, group(Arm DX), page(CR?)
Two arms, *4/3, group(Arm DX), page(CR?)

<Arm ST>
One arm, *1, gives(+owner::level to ST:One Arm Lifting ST, +owner::level to ST:One Arm Striking ST), group(Arm ST), page(CR?)
Two arms, *5/3, gives(_
				+owner::level to ST:One Arm Lifting ST,
				+owner::level to ST:One Arm Striking ST,
				+owner::level to ST:Two Arm Lifting ST,
				+owner::level to ST:Two Arm Striking ST _
				), group(Arm ST), page(CR?)
Three arms, *8/3, gives(_
				+owner::level to ST:One Arm Lifting ST,
				+owner::level to ST:One Arm Striking ST,
				+owner::level to ST:Two Arm Lifting ST,
				+owner::level to ST:Two Arm Striking ST,
				+owner::level to ST:Three Arm Lifting ST,
				+owner::level to ST:Three Arm Striking ST _
				), group(Arm ST), page(CR?)

<Attractive>
Androgynous, 0, group(Attractive), page(CR?)
Impressive, 0, group(Attractive), page(CR?)
Off-the-Shelf Looks, -50%, conditional(*1/2 to GR:Appeal when dealing with people from your own culture, you get only half the Appearance reaction bonus), group(Attractive), page(CR?)

<Bad Sight>
Mitigator: Glasses, -60%, group(Bad Sight), page(CR?), shortname(Glasses)
Mitigator: Visors, -60%, group(Bad Sight), page(CR?), shortname(Visors)

<Blindness>

<Berserk>
Battle Rage, +50%, group(Berserk), page(CR?)

<Bestial>

<Binding>
Engulfing, +60%, group(Binding), page(CR?)
Only Damaged By Burning, +30%, group(Binding), page(CR?)
Only Damaged By Corrosion, +30%, group(Binding), page(CR?)
Only Damaged By Crushing, +30%, group(Binding), page(CR?)
Only Damaged By Cutting, +30%, group(Binding), page(CR?)
Only Damaged By Burning or Corrosion, +20%, group(Binding), page(CR?)
Only Damaged By Burning or Crushing, +20%, group(Binding), page(CR?)
Only Damaged By Burning or Cutting, +20%, group(Binding), page(CR?)
Only Damaged By Corrosion or Crushing, +20%, group(Binding), page(CR?)
Only Damaged By Corrosion or Cutting, +20%, group(Binding), page(CR?)
Only Damaged By Crushing or Cutting, +20%, group(Binding), page(CR?)
Only Damaged By Burning or Corrosion or Crushing, +10%, group(Binding), page(CR?)
Only Damaged By Burning or Corrosion or Cutting, +10%, group(Binding), page(CR?)
Only Damaged By Burning or Crushing or Cutting, +10%, group(Binding), page(CR?)
Only Damaged By Corrosion or Crushing or Cutting, +10%, group(Binding), page(CR?)
Sticky, +20%, group(Binding), page(CR?)
Unbreakable, +40%, group(Binding), page(CR?)
Environmental, -20%/-30%, upto(3), group(Binding), page(CR?)
One-Shot, -10%, group(Binding), page(CR?)

<Cannot Speak>
Mitigator: Computer Speech Synthesizer, -60%, group(Cannot Speak), page(CR?)

<Chameleon>
Extended, +20%/+40%, group(Chameleon), page(CR?)
Always On, -10%, group(Chameleon), page(CR?)

<Charisma>
Same Race Only, -20%, group(Charisma), page(CR?)

<Chip Slots>

<Modular Abilities>

<Chronic Pain>

<Claws>
Switchable, +10%, group(Claws), page(CR?)

<Clinging>

<Combat Table>

<Compartmentalized Mind>
Controls, *1/2, group(Compartmentalized Mind), page(CR?3)
Dedicated Controls, *1/5, group(Compartmentalized Mind), page(CR?)

<Computer Brain>

<Reliability>

<Contact>

<Contact Group>

<Cosmic Power>

<Damage Resistance>

Ablative, -80%, group(Damage Resistance), page(CR?)
Absorption, +80%/+100%, upto(2), group(Damage Resistance), page(CR?),
	levelnames(One trait, Any trait)
Blubber, -40%, group(Damage Resistance), page(CR?)
Can't Wear Armor, -40%, group(Damage Resistance), page(CR?)
Chitin, +0%, group(Damage Resistance), page(CR?)

Directional: Front only, -20%, shortname(Front only), gives(-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Directional: Back only, -40%, shortname(Back only), gives(-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Directional: Right only, -40%, shortname(Right only), gives(-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Directional: Left only, -40%, shortname(Left only), gives(-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Directional: Top only, -40%, shortname(Top only), gives(-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Directional: Underside only, -40%, shortname(Underside only), gives(-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))

Exoskeleton, -20%, group(Damage Resistance), page(CR?)

Flexible, -20%, group(Damage Resistance), page(CR?)

Force Field (Bubble), +20%, group(Damage Resistance), page(CR?)
Force Field (Conformal), +25%, group(Damage Resistance), page(CR?)
Force Field (Permeable), +50%, group(Damage Resistance), page(CR?)
Force Field (High-velocity), -10%, group(Damage Resistance), page(CR?)
Force Field (Velocity), -5%, group(Damage Resistance), page(CR?)

Hardened, +20%/+40%, upto(13), group(Damage Resistance), page(CR?)

Long Hair, -20%, group(Damage Resistance), page(CR?)

Partial: Torso, -10%, shortname(Torso Only), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Vitals, -30%, shortname(Vitals Only), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Skull, -70%, shortname(Skull Only), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Eyes, -90%, shortname(Eyes Only), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Face, -50%, shortname(Face Only), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Neck, -50%, shortname(Neck Only), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Groin, -30%, shortname(Groin Only), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Arms, -20%, shortname(Arms Only), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Legs, -20%, shortname(Legs Only), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Hands, -40%, shortname(Hands Only), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Feet, -50%, shortname(Feet Only), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Other, -10%/-20%, gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Right Arm, -40%, shortname(Right Arm Only), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Left Arm, -40%, shortname(Left Arm Only), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Right Leg, -40%, shortname(Right Leg Only), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Left Leg, -40%, shortname(Left Leg Only), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Right Hand, -80%, shortname(Right Hand Only), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Left Hand, -80%, shortname(Left Hand Only), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Right Foot, -100%, shortname(Right Foot Only), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))
Partial: Left Foot, -100%, shortname(Left Foot), mods(Partial), gives(=-Owner::Level to DR), group(Damage Resistance), page(CR?),
	x(#message(Use this limitation *ONLY* on the Damage Resistance advantage. It will cause errors if used on any other trait.))

Reflection, +100%, group(Damage Resistance), page(CR?)
Scales, +0%, group(Damage Resistance), page(CR?)
Semi-Ablative 1:2, -60%, group(Damage Resistance), page(CR?)
Semi-Ablative 1:3, -50%, group(Damage Resistance), page(CR?)
Semi-Ablative 1:4, -45%, group(Damage Resistance), page(CR?)
Semi-Ablative 1:5, -40%, group(Damage Resistance), page(CR?)
Semi-Ablative 1:6, -35%, group(Damage Resistance), page(CR?)
Semi-Ablative 1:7, -30%, group(Damage Resistance), page(CR?)
Semi-Ablative 1:8, -25%, group(Damage Resistance), page(CR?)
Semi-Ablative 1:10, -20%, group(Damage Resistance), page(CR?)
Semi-Ablative 1:15, -15%, group(Damage Resistance), page(CR?)
Semi-Ablative 1:20, -10%, group(Damage Resistance), page(CR?)
Semi-Ablative 1:50, -5%, group(Damage Resistance), page(CR?)
Shell, -40%, group(Damage Resistance), page(CR?)
Tough Skin, -40%, group(Damage Resistance), page(CR?)

<Partial>
Covers only one hit location of that type, *2, group(Partial), page(CR?)
Covers all hit location of that type, *1, group(Partial), page(CR?)

<Dark Vision>
Color Vision, +20%, group(Dark Vision), page(CR?)

<Dependency>
Illegal, -5, group(Dependency), page(CR?)
Frequency Needed: Constantly, *5, shortname(Constantly), group(Dependency), page(CR?)
Frequency Needed: Hourly, *4, shortname(Hourly), group(Dependency), page(CR?)
Frequency Needed: Daily, *3, shortname(Daily), group(Dependency), page(CR?)
Frequency Needed: Weekly, *2, shortname(Weekly), group(Dependency), page(CR?)
Frequency Needed: Monthly, *1, shortname(Monthly), group(Dependency), page(CR?)
Frequency Needed: Seasonally, *1/3, round(Down), shortname(Seasonally), group(Dependency), page(CR?)
Frequency Needed: Yearly, *1/10, round(Down), shortname(Yearly), group(Dependency), page(CR?)
Aging, +30%, group(Dependency), page(CR?)
Mitigator: Breath Mask, -60%, group(Dependency), page(CR?), shortname(Breath Mask)
Mitigator: Environmental Suit, -60%, group(Dependency), page(CR?), shortname(Environmental Suit)

<Dependent>
Importance: Employer or Acquaintance, *1/2, round(Down), shortname(Employer/Acquaintance), group(Dependent), page(CR?)
Importance: Friend, *1, shortname(Friend), group(Dependent), page(CR?)
Importance: Loved one, *2, shortname(Loved one), group(Dependent), page(CR?)
Group of Dependents, *2, group(Dependent), page(CR?)

<Detect>
Precise, +100%, group(Detect), page(CR?)
Signal Detection, +0%, group(Detect), page(CR?)
Vague, -50%, group(Detect), page(CR?)

<Discriminatory Smell>
Emotion Sense, +50%, group(Discriminatory Smell), page(CR?)

<Doesn't Breathe>
Gills: only underwater, *0, group(Doesn't Breathe), page(CR?)
Gills, -50%, group(Doesn't Breathe), page(CR?)
Oxygen Absorption, -25%, group(Doesn't Breathe), page(CR?)
Oxygen Combustion, -50%, group(Doesn't Breathe), page(CR?)
Oxygen Storage, -10%/-20%, levelnames(x300, x200, x100, x50, x25), upto(5), group(Doesn't Breathe), page(CR?)

<Doesn't Sleep>
Preparation Required (4 hours of meditation), -55%, group(Doesn't Sleep), page(CR?)

<Draining>

<Dread>

<Duplication>

<Duty>
Extremely Hazardous, -5, group(Duty), page(CR?)
Involuntary, -5, group(Duty), page(CR?)
Nonhazardous, +5, group(Duty), page(CR?)

<Evil Twin>
Evil Twin, -10, group(Evil Twin), page(CR?)
Evil Twin is more skilled than you, -5, group(Evil Twin), page(CR?)
Evil Twin posseses abilities that you do not, -5, group(Evil Twin), page(CR?)
Evil Twin is more skilled than you and posseses abilities that you do not, -10, group(Evil Twin), page(CR?)

<Enemy>
Unknown, -5, group(Enemy), page(CR?)
Intent: Watcher, *1/4, shortname(Watcher), round(Down), group(Enemy), page(CR?)
Intent: Rival, *1/2, shortname(Rival), round(Down), group(Enemy), page(CR?)
Intent: Hunter, *1, shortname(Hunter), group(Enemy), page(CR?)

<Enhanced Move>
Handling Bonus, +5%/+10%, upto(5), group(Enhanced Move), page(CR?)
Handling Penalty, -5%/-10%, upto(5), group(Enhanced Move), page(CR?)
Road-Bound, -50%, group(Enhanced Move), page(CR?)

<Extra Attack>
Multi-Strike, +20%, group(Extra Attack), page(CR?)
Single Skill ([Melee Weapon Skill]), -20%, group(Extra Attack), page(CR?),
	   x( #InputReplace("Choose a Melee Weapon skill you may use Extra Attack with:", "[Melee Weapon skill]", , "Single skill") )

<Extra ST>
Affects displayed ST score, +0%, gives(+Owner::Level to ST:ST), group(Extra ST), description(This modifier causes the Extra ST advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional ST bonus, +0%, conditional(+Owner::Level to ST:ST), group(Extra ST), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally recieves the bonus.)
Growth Size, -10%, formula(@min(0,-((@if(ST:Size Modifier < 0 THEN ST:Size Modifier::score ELSE 0) + AD:Growth::level) * 10))), forceformula(yes), group(Extra ST), page(CR?)

<Extra DX>
Affects displayed DX score, +0%, gives(+Owner::Level to ST:DX), group(Extra DX), description(This modifier causes the Extra DX advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional DX bonus, +0%, conditional(+Owner::Level to ST:DX), group(Extra DX), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Extra IQ>
Affects displayed IQ score, +0%, gives(+Owner::Level to ST:IQ), group(Extra IQ), description(This modifier causes the Extra IQ advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional IQ bonus, +0%, conditional(+Owner::Level to ST:IQ), group(Extra IQ), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Extra HT>
Affects displayed HT score, +0%, gives(+Owner::Level to ST:HT), group(Extra HT), description(This modifier causes the Extra HT advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional HT bonus, +0%, conditional(+Owner::Level to ST:HT), group(Extra HT), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Extra Will>
Affects displayed Will score, +0%, gives(+Owner::Level to ST:Will), group(Extra Will), description(This modifier causes the Extra Will advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Will bonus, +0%, conditional(+Owner::Level to ST:Will), group(Extra Will), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Extra Perception>
Affects displayed Per score, +0%, gives(+Owner::Level to ST:Perception), group(Extra Perception), description(This modifier causes the Extra Perception advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Per bonus, +0%, conditional(+Owner::Level to ST:Perception), group(Extra Perception), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Extra Hit Points>
Affects displayed HP score, +0%, gives(+Owner::Level to ST:Hit Points), group(Extra Hit Points), description(This modifier causes the Extra Hit Points advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional HP bonus, +0%, conditional(+Owner::Level to ST:Hit Points), group(Extra Hit Points), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)
Growth Size, +0%, formula(@min(0,-((@if(ST:Size Modifier < 0 THEN ST:Size Modifier::score ELSE 0) + AD:Growth::level) * 10))), forceformula(yes), group(Extra Hit Points), page(CR?)

<Extra Fatigue Points>
Affects displayed FP score, +0%, gives(+Owner::Level to ST:Fatigue Points), group(Extra Fatigue Points), description(This modifier causes the Extra Fatigue Points advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional FP bonus, +0%, conditional(+Owner::Level to ST:Fatigue Points), group(Extra Fatigue Points), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Extra Basic Move>
Affects displayed Basic Move score, +0%, gives(+Owner::Level to ST:Basic Move), group(Extra Basic Move), description(This modifier causes the Extra Basic Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Basic Move bonus, +0%, conditional(+Owner::Level to ST:Basic Move), group(Extra Basic Move), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Extra Basic Speed>
Affects displayed Basic Speed score, +0%, gives(+(Owner::Level/4) to ST:Basic Speed), group(Extra Basic Speed), description(This modifier causes the Extra Basic Speed advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Basic Speed bonus, +0%, conditional(+Owner::Level to ST:Basic Speed), group(Extra Basic Speed), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Extra Water Move>
Affects displayed Water Move score, +0%, gives(+Owner::Level to ST:Basic Water Move), group(Extra Water Move), description(This modifier causes the Extra Water Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Water Move bonus, +0%, conditional(+Owner::Level to ST:Basic Water Move), group(Extra Water Move), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Extra Air Move>
Affects displayed Air Move score, +0%, gives(+Owner::Level to ST:Basic Air Move), group(Extra Air Move), description(This modifier causes the Extra Air Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Air Move bonus, +0%, conditional(+Owner::Level to ST:Basic Air Move), group(Extra Air Move), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Extra Arms>
Extra-Flexible, +50%, group(Extra Arms), page(CR?)
Long, +100%/+200%, group(Extra Arms), page(CR?)
Foot Manipulators, -30%, group(Extra Arms), page(CR?)
No Physical Attack, -50%, group(Extra Arms), page(CR?)
Short, -50%, group(Extra Arms), page(CR?)
Weak, -25%/-50%, upto(2), group(Extra Arms), page(CR?), levelnames(1/2 ST, 1/4 ST)
Weapon Mount, -80%, group(Extra Arms), page(CR?)

<Extra Head>

<Extra Legs>
Long, +100%/+200%, group(Extra Legs), page(CR?)
Cannot Kick, -50%, group(Extra Legs), page(CR?)
Short, -50%/-100%, group(Extra Legs), page(CR?)

<Extra Life>

<Favor>

<Flight>
Space Flight, +50%, group(Flight), page(CR?)
Cannot Hover, -15%, group(Flight), page(CR?)
Controlled Gliding, -45%, group(Flight), page(CR?)
Gliding, -50%, group(Flight), page(CR?)
Lighter Than Air, -10%, group(Flight), page(CR?)
Low Ceiling, -10%/-20%/-25%, levelnames(10 meter ceiling, 3 meter ceiling, 1.5 meter ceiling), upto(3), group(Flight), page(CR?)
Small Wings, -10%, group(Flight), page(CR?)
Space Flight Only, -75%, group(Flight), page(CR?)
Winged, -25%, group(Flight), page(CR?)

<Frequency of Appearance>
Frequency of Appearance: roll of 6 or less, *0.5, shortname(6 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: roll of 7 or less, *0.6, shortname(7 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: roll of 8 or less, *0.8, shortname(8 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: roll of 9 or less, *1, shortname(9 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: roll of 10 or less, *1.3, shortname(10 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: roll of 11 or less, *1.6, shortname(11 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: roll of 12 or less, *2, shortname(12 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: roll of 13 or less, *2.3, shortname(13 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: roll of 14 or less, *2.6, shortname(14 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: roll of 15 or less, *3, shortname(15 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: roll of 16 or less, *3.3, shortname(16 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: roll of 17 or less, *3.6, shortname(17 or less), group(Frequency of Appearance), page(CR?)
Frequency of Appearance: no roll required (Constantly), *4, shortname(Constantly), group(Frequency of Appearance), page(CR?)

<Gadget>
Gadget/Breakable: DR 2 or less, -20%, group(_General), page(CR?)
Gadget/Breakable: DR 3-5, -15%, group(_General), page(CR?)
Gadget/Breakable: DR 6-15, -10%, group(_General), page(CR?)
Gadget/Breakable: DR 16-25, -5%, group(_General), page(CR?)
Gadget/Breakable: DR 26 or higher, +0%, group(_General), page(CR?)
Gadget/Breakable: Cannot repair, -15%, group(_General), page(CR?)
Gadget/Breakable: Size -9 or less, +0%, group(_General), page(CR?)
Gadget/Breakable: Size -7 or -8, -5%, group(_General), page(CR?)
Gadget/Breakable: Size -5 or -6, -10%, group(_General), page(CR?)
Gadget/Breakable: Size -3 or -4, -15%, group(_General), page(CR?)
Gadget/Breakable: Size -1 or -2, -20%, group(_General), page(CR?)
Gadget/Breakable: Size 0 or more, -25%, group(_General), page(CR?)
Gadget/Can Be Stolen: Easily snatched with unopposed DX roll, -40%, mods(Can Be Stolen), group(_General), page(CR?)
Gadget/Can Be Stolen: Thief must win a Quick Contest of DX or ST, -30%, mods(Can Be Stolen), group(_General), page(CR?)
Gadget/Can Be Stolen: Can only be taken by stealth or trickery, -20%, mods(Can Be Stolen), group(_General), page(CR?)
Gadget/Can Be Stolen: Must be forcefully removed, -10%, mods(Can Be Stolen), group(_General), page(CR?)
Gadget/Unique, -25%, group(_General), page(CR?)

<Growth>
Maximum Size Only, +0%, group(Growth), page(CR?)

<Hard of Hearing>
Mitigator: Hearing Aid, -60%, group(Hard of Hearing), page(CR?), shortname(Hearing Aid), gives(+4 to ST:Hearing)

<Deafness>

<No Sense of Smell/Taste>

<Healing>

<Hyperspectral Vision>

<Infravision>
Unswitchable, *0, group(Infravision), page(CR?)
Switchable, +0, group(Infravision), page(CR?)

<Injury Tolerance>
Diffuse, +100, group(Injury Tolerance), page(CR?)
Homogenous, +40, group(Injury Tolerance), page(CR?)
No Blood, +5, group(Injury Tolerance), page(CR?)
No Brain, +5, group(Injury Tolerance), page(CR?)
No Eyes, +5, group(Injury Tolerance), page(CR?)
No Head, +7, group(Injury Tolerance), page(CR?)
No Neck, +5, group(Injury Tolerance), page(CR?)
No Vitals, +5, group(Injury Tolerance), page(CR?)
Unliving, +20, group(Injury Tolerance), page(CR?)

<Alternative Attack>

<Insubstantiality>

<Invisibility>
Affects Machines, +50%, group(Invisibility), page(CR?)
Can Carry Objects, +10%/+20%/+50%/+100%, levelnames(No Encumbrance, Light Encumbrance, Medium Encumbrance, Heavy Encumbrance), upto(4), group(Invisibility), page(CR?)
Extended, +20%/+40%, group(Invisibility), page(CR?)
Switchable, +10%, group(Invisibility), page(CR?)
Usually On, +5%, group(Invisibility), page(CR?)
Machines Only, -50%, group(Invisibility), page(CR?)
Visible Reflection, -10%, group(Invisibility), page(CR?)
Visible Shadow, -10%, group(Invisibility), page(CR?)

<Language>
Native Language, -6, gives(=+1 to ST:Native Languages), formula(-@if(AD:Language Talent > 0 then 4 else 6)), forceformula(yes), group(Language), page(CR?)
Native Speaker, -3, gives(=+0.5 to ST:Native Languages), formula(-@if(AD:Language Talent > 0 then 2 else 3)), forceformula(yes), group(Language), page(CR?)
Native Writer, -3, gives(=+0.5 to ST:Native Languages), formula(-@if(AD:Language Talent > 0 then 2 else 3)), forceformula(yes), group(Language), page(CR?)
Native Gesturer/Nonverbalist, -3, gives(=+0.5 to ST:Native Languages), formula(-@if(AD:Language Talent > 0 then 2 else 3)), forceformula(yes), group(Language), page(CR?)
Default, -2/-4, upto(2), group(Language), page(CR?),
	description(Some languages may "default" from another language. If this language gets a default apply this modifier to reduce the point cost of this language for its default.),
	x(_
		#InputToTagReplace("Please specify the language from which this one defaults" , nameext, ,"Language Default") _
	)
Default (Spoken), -1/-2, upto(2), cat(Language), page(CR?),
	description(Some languages may "default" from another language. If this language gets a default apply this modifier to reduce the point cost of this language for its default.),
	x(_
		#InputToTagReplace("Please specify the language from which this one defaults" , nameext, ,"Language Default") _
	)
Default (Written), -1/-2, upto(2), cat(Language), page(CR?),
	description(Some languages may "default" from another language. If this language gets a default apply this modifier to reduce the point cost of this language for its default.),
	x(_
		#InputToTagReplace("Please specify the language from which this one defaults" , nameext, ,"Language Default") _
	)

Secret, 0%/-50%, group(Language), page(CR?), upto(2)

Sign, 0%/-50%, group(Language), page (CR?), upto(2)

Telepathic, 0%/-50%, group(Language), page (CR?), upto(2)

<Lecherousness>
Only Towards Aliens, -20%, group(Lecherous), page(CR?)

<Legal Immunity>

<Lifting ST>
Doesn't affect Basic Lift, 0, gives(-owner::level to ST:Lifting ST)

<Limited Defense>
Limited Defense: Very Common, -20%, group(Limited Defense), page(CR?),
	x(_
		#InputToTagReplace("Please specify the Very Common attack this defends against; e.g. ranged attacks, melee attacks, physical attacks, energy attacks, or Force attacks:" , nameext, ,"Limited Defense") _
	),
	description(You will need to specify the Very Common attack type this defends against; e.g. ranged attacks, melee attacks, physical attacks, energy attacks, or Force attacks.)

Limited Defense: Common, -40%, group(Limited Defense), page(CR?),
	x(_
		#InputToTagReplace("Please specify the Common attack this defends against; e.g. burning, corrosion, crushing, cutting, impaling, piercing, toxic, metal, stone, wood, water, flesh, acid, cold, electricity, heat/fire, or Force energy:" , nameext, ,"Limited Defense") _
	),
	description(You will need to specify the Common attack type this defends against; e.g. burning, corrosion, crushing, cutting, impaling, piercing, toxic, metal, stone, wood, water, flesh, acid, cold, electricity, heat/fire, or Force energy.)

Limited Defense: Occasional, -60%, group(Limited Defense), page(CR?),
	x(_
		#InputToTagReplace("Please specify the Occasional attack this defends against e.g. durasteel, bronzium, Force Lightning, or piercing metal:" , nameext, ,"Limited Defense") _
	),
	description(You will need to specify the Occasional attack type this defends against e.g. durasteel, bronzium, Force Lightning, or piercing metal.)

Limited Defense: Rare, -80%, group(Limited Defense), page(CR?),
	x(_
		#InputToTagReplace("Please specify the Rare attack this defends against; e.g. piercing durasteel, or Force imbued weapons:" , nameext, ,"Limited Defense") _
	),
	description(You will need to specify the Rare attack type this defends against; e.g. piercing durasteel, or Force imbued weapons.)

Limited Defense: Very Common (ranged attacks), -20%, shortname(Very Common), page(CR?)
Limited Defense: Very Common (melee attacks), -20%, shortname(Very Common), page(CR?)
Limited Defense: Very Common (physical attacks), -20%, shortname(Very Common), page(CR?)
Limited Defense: Very Common (energy attacks), -20%, shortname(Very Common), page(CR?)
Limited Defense: Very Common (Force), -20%, shortname(Very Common), page(CR?)
Limited Defense: Common (burning), -40%, shortname(Common), page(CR?)
Limited Defense: Common (corrosion), -40%, shortname(Common), page(CR?)
Limited Defense: Common (crushing), -40%, shortname(Common), page(CR?)
Limited Defense: Common (cutting), -40%, shortname(Common), page(CR?)
Limited Defense: Common (impaling), -40%, shortname(Common), page(CR?)
Limited Defense: Common (piercing), -40%, shortname(Common), page(CR?)
Limited Defense: Common (toxic), -40%, shortname(Common), page(CR?)
Limited Defense: Common (metal), -40%, shortname(Common), page(CR?)
Limited Defense: Common (stone), -40%, shortname(Common), page(CR?)
Limited Defense: Common (wood), -40%, shortname(Common), page(CR?)
Limited Defense: Common (water), -40%, shortname(Common), page(CR?)
Limited Defense: Common (flesh), -40%, shortname(Common), page(CR?)
Limited Defense: Common (acid), -40%, shortname(Common), page(CR?)
Limited Defense: Common (cold), -40%, shortname(Common), page(CR?)
Limited Defense: Common (electricity), -40%, shortname(Common), page(CR?)
Limited Defense: Common (heat/fire), -40%, shortname(Common), page(CR?)
Limited Defense: Common (Force energy), -40%, shortname(Common), page(CR?)
Limited Defense: Occasional (steel), -60%, shortname(Occasional), page(CR?)
Limited Defense: Occasional (lead), -60%, shortname(Occasional), page(CR?)
Limited Defense: Occasional (Blasters), -60%, shortname(Occasional), page(CR?)
Limited Defense: Occasional (lasers), -60%, shortname(Occasional), page(CR?)
Limited Defense: Occasional (disintegrators), -60%, shortname(Occasional), page(CR?)
Limited Defense: Occasional (shaped charges), -60%, shortname(Occasional), page(CR?)
Limited Defense: Occasional (Force Lightning), -60%, shortname(Occasional), page(CR?)
Limited Defense: Occasional (piercing metal), -60%, shortname(Occasional), page(CR?)
Limited Defense: Rare (charged particle beams), -80%, shortname(Rare), page(CR?)
Limited Defense: Rare (dragon's fire), -80%, shortname(Rare), page(CR?)
Limited Defense: Rare (piercing lead), -80%, shortname(Rare), page(CR?)
Limited Defense: Rare (Force imbued weapons), -80%, shortname(Rare), page(CR?)

<Linguistical Adaptability>
Xeno-Linguist, +20%, group(Linguistical Adaptability), page(CR?)
Understand Only, -50%, group(Linguistical Adaptability, Language), page(CR?)

<Maintenance>
Maintenance Interval: Bi-weekly, *1/10, shortname(Bi-weekly), group(Maintenance), page(CR?)
Maintenance Interval: Weekly, *1/5, shortname(Weekly), group(Maintenance), page(CR?)
Maintenance Interval: Every other day, *1/2, shortname(Every other day), group(Maintenance), page(CR?)
Maintenance Interval: Daily, *1, shortname(Daily), group(Maintenance), page(CR?)
Maintenance Interval: Twice Daily, *2, shortname(Twice daily), group(Maintenance), page(CR?)
Maintenance Interval: Three times daily, *3, shortname(3-5 times daily), group(Maintenance), page(CR?)
Maintenance Interval: Four times daily, *3, shortname(3-5 times daily), group(Maintenance), page(CR?)
Maintenance Interval: Constant, *5, shortname(Constant), group(Maintenance), page(CR?)

<Metabolism Control>
Hibernation, -60%, group(Metabolism Control), page(CR?)

<Maintenance>
Maintenance Interval: Bi-weekly, *1/10, shortname(Bi-weekly), group(Maintenance), page(CR?)
Maintenance Interval: Weekly, *1/5, shortname(Weekly), group(Maintenance), page(CR?)
Maintenance Interval: Every other day, *1/2, shortname(Every other day), group(Maintenance), page(CR?)
Maintenance Interval: Daily, *1, shortname(Daily), group(Maintenance), page(CR?)
Maintenance Interval: Twice Daily, *2, shortname(Twice daily), group(Maintenance), page(CR?)
Maintenance Interval: Three times Daily, *3, shortname(Twice daily), group(Maintenance), page(CR?)
Maintenance Interval: Four times daily, *4, shortname(4 times daily), group(Maintenance), page(CR?)
Maintenance Interval: Constant, *5, shortname(Constant), group(Maintenance), page(CR?)

<Mind Control>

<Mind Probe/Reading>

<Mind Shield>

<Missing Legs>

<Modular Ability>

<Credits>
5% of Starting Wealth, +0
10% of Starting Wealth, +0
15% of Starting Wealth, +0
20% of Starting Wealth, +0
30% of Starting Wealth, +0
40% of Starting Wealth, +0
50% of Starting Wealth, +0
60% of Starting Wealth, +0
70% of Starting Wealth, +0
80% of Starting Wealth, +0
90% of Starting Wealth, +0
100% of Starting Wealth, +0

Trading Character Points for Credits, +1/+2, formula(0), forceformula(yes), gives(+@indexedvalue(ST:Tech Level::basevalue + 1, 25, 50, 75, 100, 200, 500, 1000, 1500, 2000, 3000, 5000, 7500, 10000) to ST:Credits, +@indexedvalue(ST:Tech Level::basevalue + 1, 25, 50, 75, 100, 200, 500, 1000, 1500, 2000, 3000, 5000, 7500, 10000) to ST:Remaining Funds), page(CR?)

Credits Earned in Play, +0/+0, formula(0), forceformula(yes), gives(+1 to ST:Credits, +1 to ST:Remaining Funds),
	x(#InputToTagReplace("Please describe how these credits were acquired", nameext, "note","Credits Earned in Play"))

Credits Spent in Play, +0/+0, formula(0), forceformula(yes), gives(-1 to ST:Credits, -1 to ST:Remaining Funds),
	x(#InputToTagReplace("Please describe how these credits were spent", nameext, "note","Credits Earned in Play"))

<Morph>
Cosmetic, -50%, group(Morph), page(CR?)
Extra Morphing Capacity, +1/+2, tier(1), group(Morph), page(CR?)
Unlimited, +50%, group(Morph), page(CR?)
Mass Conservation, -20%, group(Morph), page(CR?)
Retains Shape, -20%, group(Morph), page(CR?)

<Neck Snap>
ST Based, +0, gives(+(ST:ST - ST:DX) to owner::level)

<Neutralize>

<No Fine Manipulators>
No Fine Manipulators, -40%, group(No Fine Manipulators), page(CR?)

<No Fine Manipulators Stat>
No Fine Manipulators, -0%, formula(-@if(ST:No Fine Manipulators >0 & owner::score > 10 then 40 else 0)), forceformula(yes), group(No Fine Manipulators Stat), page(CR?)

<No Legs>
Mobility depends on fins/mast/paddles/sails, -5, group(No Legs), page(CR?)
Cannot dive, -5, group(No Legs), page(CR?)

<Nocturnal>

<Obscure>
Defensive, +50%, group(Obscure), page(CR?)
Extended, +20%/+40%, group(Obscure), page(CR?)
Ranged, +50%, group(Obscure), page(CR?),
	addmode(Primary, damage(), damtype(spcl.), rangehaldfam(-), rangemax(10), acc(3), rof(1), shots(), rcl(1))
Stealthy, +100%, group(Obscure), page(CR?)
Always On, -50%, group(Obscure), page(CR?)

<Pacifism>
Single Species Only, -20%, group(Pacifism), page(CR?)

<Patron>
Equipment: no more than starting wealth, +50%, group(Patron), page(CR?)
Equipment: more than starting wealth, +100%, group(Patron), page(CR?)
Highly Accessible, +50%, group(Patron), page(CR?)
Special Abilities: extensive social or political power, +50%, group(Patron), page(CR?)
Special Abilities: Force powers in non-Force world, +100%, group(Patron), page(CR?)
Special Abilities: possesses equipment from a greater TL, +100%, group(Patron), page(CR?)
Special Abilities: grants special powers, +100%, group(Patron), page(CR?)
Special Abilities: unusual reach in time or space, +100%, group(Patron), page(CR?)
Minimal Intervention, -50%, group(Patron), page(CR?)
Secret, -50%, group(Patron), page(CR?)
Unwilling, -50%, group(Patron), page(CR?)

<Payload>

<Penetrating Vision>

<Peripheral Vision>
Easy to Hit, -20%, group(Peripheral Vision), page(CR?)

<Permeation>

<Possession>

<Punch/Kick>

<Gauntlets>

<Boots>

<Rank>
Rank replaces Status, *2, group(Rank), page(CR?)

<Reduced Consumption>
Cast-Iron Stomach, -50%, group(Reduced Consumption), page(CR?)
Food Only, -50%, group(Reduced Consumption), page(CR?)
Water Only, -50%, group(Reduced Consumption), page(CR?)

<Reduced ST>
Affects displayed ST score, +0%, gives(-Owner::Level to ST:ST), group(Reduced ST), description(This modifier causes the Extra ST advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional ST penalty, +0%, conditional(-Owner::Level to ST:ST), group(Reduced ST), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)
Growth Size, +0%, formula(@min(0,-((@if(ST:Size Modifier < 0 THEN ST:Size Modifier::score ELSE 0) + AD:Growth::level) * 10))), forceformula(yes), group(Reduced ST), page(CR?)

<Reduced DX>
Affects displayed DX score, +0%, gives(-Owner::Level to ST:DX), group(Reduced DX), description(This modifier causes the Extra DX advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional DX penalty, +0%, conditional(-Owner::Level to ST:DX), group(Reduced DX), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Reduced IQ>
Affects displayed IQ score, +0%, gives(-Owner::Level to ST:IQ), group(Reduced IQ), description(This modifier causes the Extra IQ advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional IQ penalty, +0%, conditional(-Owner::Level to ST:IQ), group(Reduced IQ), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Reduced HT>
Affects displayed HT score, +0%, gives(-Owner::Level to ST:HT), group(Reduced HT), description(This modifier causes the Extra HT advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional HT penalty, +0%, conditional(-Owner::Level to ST:HT), group(Reduced HT), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Reduced Will>
Affects displayed Will score, +0%, gives(-Owner::Level to ST:Will), group(Reduced Will), description(This modifier causes the Extra Will advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Will penalty, +0%, conditional(-Owner::Level to ST:Will), group(Reduced Will), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Reduced Perception>
Affects displayed Per score, +0%, gives(-Owner::Level to ST:Perception), group(Reduced Perception), description(This modifier causes the Extra Perception advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Per penalty, +0%, conditional(-Owner::Level to ST:Perception), group(Reduced Perception), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Reduced Hit Points>
Affects displayed HP score, +0%, gives(-Owner::Level to ST:Hit Points), group(Reduced Hit Points), description(This modifier causes the Extra Hit Points advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional HP penalty, +0%, conditional(-Owner::Level to ST:Hit Points), group(Reduced Hit Points), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)
Growth Size, +0%, formula(@min(0,-((@if(ST:Size Modifier < 0 THEN ST:Size Modifier::score ELSE 0) + AD:Growth::level) * 10))), forceformula(yes), group(Reduced Hit Points), page(CR?)

<Reduced Fatigue Points>
Affects displayed FP score, +0%, gives(-Owner::Level to ST:Fatigue Points), group(Reduced Fatigue Points), description(This modifier causes the Extra Fatigue Points advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional FP penalty, +0%, conditional(-Owner::Level to ST:Fatigue Points), group(Reduced Fatigue Points), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Reduced Basic Move>
Affects displayed Basic Move score, +0%, gives(-Owner::Level to ST:Basic Move), group(Reduced Basic Move), description(This modifier causes the Extra Basic Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Basic Move penalty, +0%, conditional(-Owner::Level to ST:Basic Move), group(Reduced Basic Move), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Reduced Basic Speed>
Affects displayed Basic Speed score, +0%, gives(-(Owner::Level/4) to ST:Basic Speed), group(Reduced Basic Speed), description(This modifier causes the Extra Basic Speed advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Basic Speed penalty, +0%, conditional(-Owner::Level to ST:Basic Speed), group(Reduced Basic Speed), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Reduced Water Move>
Affects displayed Water Move score, +0%, gives(-Owner::Level to ST:Basic Water Move), group(Reduced Water Move), description(This modifier causes the Extra Water Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Water Move penalty, +0%, conditional(-Owner::Level to ST:Basic Water Move), group(Reduced Water Move), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Reduced Air Move>
Affects displayed Air Move score, +0%, gives(-Owner::Level to ST:Basic Air Move), group(Reduced Air Move), description(This modifier causes the Extra Air Move advantage to affect the displayed attribute score. If you don't wish this advantage to affect the displayed score remove this modifier.)
Gives conditional Air Move penalty, +0%, conditional(-Owner::Level to ST:Basic Air Move), group(Reduced Air Move), description(This modifier causes the Extra ST advantage to give a conditional bonus to the attribute score. In GCA a conditional bonus does not affect the displayed score but can be printed on the character sheet to note it occassionally receives the bonus.)

<Regeneration>
Heals Radiation, +40%, group(Regeneration), page(CR?)
Radiation Only, -60%, group(Regeneration), page(CR?)

<Regrowth>
Minor, -50%, group(Regrowth), page(CR?)

<Reputation>
People Affected: Almost everyone in the Star Wars universe, *1, shortname(Almost everyone), group(Reputation), page(CR?)
People Affected: Almost everyone in the Star Wars universe except one large class, *2/3, round(Down), shortname(Almost everyone, except large class), group(Reputation), page(CR?)
People Affected: Large class of people, *1/2, round(Down), shortname(Large class), group(Reputation), page(CR?)
People Affected: Small class of people, *1/3, round(Down), shortname(Small class), group(Reputation), page(CR?)
Frequency of Recognition: All the time, *1, shortname(All the time), group(Reputation), page(CR?)
Frequency of Recognition: Sometimes (roll of 10 or less), *1/2, round(Down), shortname(10 or less), group(Reputation), page(CR?)
Frequency of Recognition: Occasionally (roll of 7 or less), *1/3, round(Down), shortname(7 or less), group(Reputation), page(CR?)

<Resistant>
Degree: Immunity, *1, shortname(Immunity), group(Resistant), page(CR?)
Degree: +14 to HT rolls to resist, *4/5, round(Up), shortname(+14), group(Resistant), page(CR?)
Degree: +12 to HT rolls to resist, *2/3, round(Up), shortname(+12), group(Resistant), page(CR?)
Degree: +10 to HT rolls to resist, *3/5, round(Up), shortname(+10), group(Resistant), page(CR?)
Degree: +8 to HT rolls to resist, *1/2, round(Down), shortname(+8), group(Resistant), page(CR?)
Degree: +5 to HT rolls to resist, *2/5, round(Up), shortname(+5), group(Resistant), page(CR?)
Degree: +3 to HT rolls to resist, *1/3, round(Down), shortname(+3), group(Resistant), page(CR?)
Degree: +1 to HT rolls to resist, *1/5, round(Up), shortname(+1), group(Resistant), page(CR?)

<Restricted Diet>

<Scanning Sense>
Extended Arc: 240°, +75%, group(Scanning Sense), page(CR?)
Extended Arc: 360°, +125%, group(Scanning Sense), page(CR?)
Low-Probability Intercept, +10%, group(Scanning Sense), page(CR?)
Multi-Mode, +50%, group(Scanning Sense), page(CR?)
Penetrating, +50%, group(Scanning Sense), page(CR?)
Targeting, +20%, group(Scanning Sense), page(CR?)
Targeting Only, -40%, group(Scanning Sense), page(CR?)

<Secret Identity>

<Security Clearance>

<Self-Control>
You resist on a roll of  4 or less, *2.6, shortname(4 or less), group(Self-Control), page(CR?)
You resist on a roll of  5 or less, *2.4, shortname(5 or less), group(Self-Control), page(CR?)
You resist on a roll of  6 or less, *2.2, shortname(6 or less), group(Self-Control), page(CR?)
You resist on a roll of  7 or less, *2, shortname(7 or less), group(Self-Control), page(CR?)
You resist on a roll of  8 or less, *1.8, shortname(8 or less), group(Self-Control), page(CR?)
You resist on a roll of  9 or less, *1.6, shortname(9 or less), group(Self-Control), page(CR?)
You resist on a roll of 10 or less, *1.4, shortname(10 or less), group(Self-Control), page(CR?)
You resist on a roll of 11 or less, *1.2, shortname(11 or less), group(Self-Control), page(CR?)
You resist on a roll of 12 or less, *1, shortname(12 or less), group(Self-Control), page(CR?)
You resist on a roll of 13 or less, *0.8, shortname(13 or less), group(Self-Control), page(CR?)
You resist on a roll of 14 or less, *0.6, shortname(14 or less), group(Self-Control), page(CR?)
You resist on a roll of 15 or less, *0.4, shortname(15 or less), group(Self-Control), page(CR?)
You resist on a roll of 16 or less, *0.2, shortname(16 or less), group(Self-Control), page(CR?)

<Shadow Form Advantage>

<Shadow Form Disadvantage>

<Shrinking>
Affects Others, +50%/+100%, group(Shrinking), page(CR?)
Can Carry Objects, +10%/+20%/+50%/+100%, levelnames(No Encumbrance, Light Encumbrance, Medium Encumbrance, Heavy Encumbrance), upto(4), group(Shrinking), page(CR?)
Full Damage, +100%, group(Shrinking), page(CR?)
Full DR, +30%, group(Shrinking), page(CR?)
Full HP, +30%, group(Shrinking), page(CR?)
Full Move, +30%, group(Shrinking), page(CR?)

<Size>
Size, -10%, formula(-@if(ST:Size Modifier > 0 & ST:ST::Score > 10 then ST:Size Modifier * 10 else 0)), forceformula(yes), group(Size), page(CR?)

<Size ST>
Size, -10%, formula(_
			 -@if(_
				ST:Size Modifier > 0 _
				then ST:Size Modifier * 10 _
				else 0_
				)_
			), forceformula(yes), group(Size ST), page(CR?)

<Snatcher>

<Social Regard>

<Speak Underwater>
Interface Crossing, +50%, group(Speak Underwater), page(CR?)

<Status>

<Striking ST>
Doesn't give general damage bonus (e.g. for Limited: One Weapon), -0%, gives(-owner::level to ST:Striking ST)
Bite Only, -60%, group(Striking ST), page(CR?), gives(-owner::level to ST:Striking ST, +owner::level to ST:Bite)
Kick Only, -60%, group(Striking ST), page(CR?), gives(-owner::level to ST:Striking ST, +owner::level to ST:Kick)
Punch Only, -60%, group(Striking ST), page(CR?), gives(-owner::level to ST:Striking ST, +owner::level to ST:Punch)

<Striker>
Long: any reach, +100%/+200%, group(Striker), page(CR?), shortname(Long),
	gives(=nobase to owner::reach$, ="C,$if(me::level=1 THEN "1" ELSE "1-$solver(me::level)")" to owner::reach$)
Long: only at maximum reach, +75%/+150%, group(Striker), page(CR?), shortname(Long),
	gives(=nobase to owner::reach$, =$solver(me::level) to owner::reach$)
Cannot Parry, -40%, group(Striker), page(CR?),
	gives(=nobase to owner::parry$, ="No" to owner::parry$)
Clumsy, -20%/-40%, group(Striker), page(CR?), levelnames(-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20),
	gives(-1 to owner::skillscore)
Limited Arc, -40%, group(Striker), page(CR?)
Weak, -50%, group(Striker), page(CR?)

<Subsonic Hearing>
Can only hear low-frequency sounds, *0, shortname(No normal sounds), group(Subsonic Hearing), page(CR?)

<Subsonic Speech>
Can only communicate via Subsonic Speech, *0, shortname(No regular speech), group(Subsonic Speech), page(CR?)

<Supernatural Feature>

<Super-Memorization>

<Talents>

<Telecommunication>
Universal, +50%, group(Telecommunication), page(CR?)
Video, +40%, group(Telecommunication), page(CR?)
Racial, -20%, group(Telecommunication), page(CR?)
Vague, -50%, group(Telecommunication), page(CR?)
Telepathic, -10%, group(Telecommunication), page(CR?)

<Tech Level>

<Infrared Communication>
Receive Only, -50%, group(Infrared Communication), page(CR?)
Send Only, -50%, group(Infrared Communication), page(CR?)

<Laser Communication>
Receive Only, -50%, group(Laser Communication), page(CR?)
Send Only, -50%, group(Laser Communication), page(CR?)

<Radio>
Short Wave, +50%, group(Radio Communication), page(CR?)
Receive Only, -50%, group(Radio Communication), page(CR?)
Send Only, -50%, group(Radio Communication), page(CR?)

<Telesend>
Broadcast, +50%, group(Telesend), page(CR?)

<Telescopic Vision>
No Targeting, -60%, group(Telescopic Vision), page(CR?)

<Temperature Control>
Cold, -50%, group(Temperature Control), page(CR?)
Heat, -50%, group(Temperature Control), page(CR?)

<Temperature Tolerance>
Cold, -50%, group(Temperature Tolerance), page(CR?)
Heat, -50%, group(Temperature Tolerance), page(CR?)

<Terrain Adaptation>
Cannot function normally on solid ground, -5, group(Terrain Adaptation), page(CR?)

<Terror>
Active, +0%, group(Terror), page(CR?),
	addmode(Contest of Will, skillused(Will))
Always On, -20%, group(Terror), page(CR?)
Presence, +25%, group(Terror), page(CR?)

<Ultrahearing>
Can only hear high-frequency sounds, *0, shortname(No normal sounds), group(Ultrahearing), page(CR?)

<Ultrasonic Speech>
Can only communicate via Ultrasonic Speech, *0, shortname(No normal speech), group(Ultrasonic Speech), page(CR?)

<Ultravision>
Can only see ultraviolet and are blind without it, *0, shortname(Blind without UV), group(Ultravision), page(CR?)

<Unaging>
Age Control, +20%, group(Unaging), page(CR?)

<Unkillable>

<Vibration Sense>
Universal, +50%, group(Vibration Sense), page(CR?)
Accessibility (Only in Air), -0%, group(Vibration Sense), page(CR?)
Accessibility (Only in Water), -0%, group(Vibration Sense), page(CR?)

<Vulnerability>

<Weakness>
Rarity: Rare, *1/2, shortname(Rare), group(Weakness), page(CR?)
Rarity: Occasional, *1, shortname(Occasional), group(Weakness), page(CR?)
Rarity: Common, *2, shortname(Common), group(Weakness), page(CR?)
Rarity: Very Common, *3, shortname(Very Common), group(Weakness), page(CR?)
Fatigue Only, -50%, group(Weakness), page(CR?)
Variable, -40%, group(Weakness), page(CR?)

<Wealth>
Partial Multimillionaire, +5/+10, upto(4), levelnames(0.2,0.4,0.6,0.8), group(Wealth),
	formula(@if(owner::level > 4 THEN 5 * me::level ELSE 0)), forceformula(yes),
	gives(=+(@if(owner::level >4 THEN 1 ELSE 0) * @indexedvalue(me::level, 1, 3, 5, 7) * (10^(owner::level-1))) to "ST:Wealth Modifier"), page(CR?)

Signature Assets, +1%/+2%, upto(20), levelnames(5%,10%,15%,20%,25%,30%,35%,40%,45%,50%,55%,60%,65%,70%,75%,80%,85%,90%,95%,100%), page(CR?),
	gives(+(0.05 * ST:Wealth Modifier * @indexedvalue(ST:Tech Level::basevalue + 1, 25, 50, 75, 100, 200, 500, 1000, 1500, 2000, 3000, 5000, 7500, 10000)) to ST:Signature Assets),
	x(#InputToTag("Please describe the nature of the Signature Asset:", nameext, , "Signature Assets")),
	replacetags(in "ST:Signature Assets" with "mainwin(15), hide(), noresync(yes)"),
	taboo(ST:Signature Assets < 0)

Conditional Ownership, -1%/-2%, upto(20), levelnames(5%,10%,15%,20%,25%,30%,35%,40%,45%,50%,55%,60%,65%,70%,75%,80%,85%,90%,95%,100%), page(CR?)

<Wild Talent>
************************************************************************************************************************
[EQUIPMENT]
************************************************************************************************************************
<Natural Attacks>
Punch (Weak Arms), basecost(0), baseweight(0), mode(Punch), damage(_
		  @thr(@int(ST:One Arm Striking ST::score * @indexedvalue(1+@itemhasmod(AD:Extra Arms, Weak),1,0.75,0.5))) -1 + _
			@if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + _
			@max(_
				@if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Punch) else 0),
                                @if("SK:Boxing::level" = ST:DX+1 then @basethdice(ST:Punch) else @if("SK:Boxing::level" > ST:DX+1 then 2 * @basethdice(ST:Punch) else 0)),
				@if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0)) _
			   ) _
		  ), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(0), skillused(DX, Brawling, Striking), mods(Punch/Kick)

******************************************************************************************************************
*Equipment Modifiers
[MODIFIERS]
******************************************************************************************************************
<Quality Weapon Bond>
Weapon Bond, *0,Page(CR?), group(Quality Weapon Bond),
gives(_
	=+1 to owner::skillscore_
	)

*********************************************************************************************************************
[SKILLS]
*********************************************************************************************************************
<Animal>
Animal Handling, IQ/A, default(IQ - 5), page(CR?), cat(_General, Animal),
	x(#InputToTag("You must specialize in a category of animals:", nameext, , "Animal Handling"))

Animal Handling (Mammals), IQ/A, default(IQ - 5, "SK:Animal Handling (Reptiles)"-4, "SK:Animal Handling (Avions)"-4, "SK:Animal Handling (Aquatics)"-4), page(CR?), cat(_General, Animal)
Animal Handling (Reptiles), IQ/A, default(IQ - 5, "SK:Animal Handling (Mammals)"-4, "SK:Animal Handling (Avions)"-4, "SK:Animal Handling (Aquatics)"-4), page(CR?), cat(_General, Animal)
Animal Handling (Avions), IQ/A, default(IQ - 5, "SK:Animal Handling (Mammals)"-4, "SK:Animal Handling (Reptiles)"-4, "SK:Animal Handling (Aquatics)"-4), page(CR?), cat(_General, Animal)
Animal Handling (Aquatics), IQ/A, default(IQ - 5, "SK:Animal Handling (Mammals)"-4, "SK:Animal Handling (Reptiles)"-4, "SK:Animal Handling (Avions)"-4), page(CR?), cat(_General, Animal)

Veterinary, IQ/H, tl(0-12), default(SK:Animal Handling - 6, SK:Physician - 5, SK:Surgery - 5), page(CR?), cat(_General, Animal, Medical)

<Arts/Entertainment>
Artist, IQ/H, default(IQ - 6), page(CR?), cat(_General, Arts/Entertainment),
	x(#InputToTag("You must specialize in an art form:", nameext, , "Artist"))

Artist (Body Art), IQ/H, default(IQ - 6, "SK:Artist (Calligraphy)" - 4, "SK:Artist (Drawing)" - 4, "SK:Artist (Illumination)" - 4, SK:Artist - 6, "SK:Artist (Painting)" - 4), page(CR?), cat(_General, Arts/Entertainment)
Artist (Calligraphy), IQ/H, default(IQ - 6, "SK:Artist (Body Art)" - 4, "SK:Artist (Drawing)" - 2, "SK:Artist (Illumination)" - 2, "SK:Artist (Painting)" - 2, SK:Artist - 6), page(CR?), cat(_General, Arts/Entertainment)
Artist (Drawing), IQ/H, default(IQ - 6, "SK:Artist (Body Art)" - 4, "SK:Artist (Calligraphy)" - 2, "SK:Artist (Illumination)" - 2, "SK:Artist (Painting)" - 2, SK:Artist - 6), page(CR?), cat(_General, Arts/Entertainment)
Artist (Illumination), IQ/H, default(IQ - 6, "SK:Artist (Body Art)" - 4, "SK:Artist (Calligraphy)" - 2, "SK:Artist (Drawing)" - 2, "SK:Artist (Painting)" - 2, SK:Artist - 6), page(CR?), cat(_General, Arts/Entertainment)
Artist (Interior Decorating), IQ/H, default(IQ - 6, SK:Architecture - 3, "SK:Artist (Scene Design)" - 4, "SK:Artist (Woodworking)" - 4, SK:Artist - 6), page(CR?), cat(_General, Arts/Entertainment)
Artist (Painting), IQ/H, default(IQ - 6, "SK:Artist (Body Art)" - 4, "SK:Artist (Calligraphy)" - 2, "SK:Artist (Drawing)" - 2, "SK:Artist (Illumination)" - 2, SK:Artist - 6), page(CR?), cat(_General, Arts/Entertainment)
Artist (Pottery), IQ/H, default(IQ - 6, SK:Artist - 6), page(CR?), cat(_General, Arts/Entertainment, Craft)
Artist (Scene Design), IQ/H, default(IQ - 6, SK:Architecture - 3, "SK:Artist (Interior Decorating)" - 4, "SK:Artist (Woodworking)" - 4, SK:Artist - 6), page(CR?), cat(_General, Arts/Entertainment)
Artist (Sculpting), IQ/H, default(IQ - 6, SK:Artist - 6), page(CR?), cat(_General, Arts/Entertainment, Craft)
Artist (Woodworking), IQ/H, default(IQ - 6, SK:Carpentry - 3, "SK:Artist (Interior Decorating)" - 4, "SK:Artist (Scene Design)" - 4, SK:Artist - 6), page(CR?), cat(_General, Arts/Entertainment, Craft)

Current Affairs (High Culture), IQ/E, tl(0-12), default(IQ - 4, SK:Research - 4, SK:Current Affairs - 4), page(CR?), cat(_General, Arts/Entertainment, Everyman, Knowledge, Social)
Current Affairs (Popular Culture), IQ/E, tl(0-12), default(IQ - 4, SK:Research - 4, SK:Current Affairs - 4), page(CR?), cat(_General, Arts/Entertainment, Everyman, Knowledge, Social)

Dancing, DX/A, default(DX - 5), page(CR?), cat(_General, Arts/Entertainment)

Electronics Operation (Media), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Repair (Media)" - 5, "SK:Engineer (Electronics)" - 5, SK:Electronics Operation - 4), page(CR?), cat(_General, Arts/Entertainment, Technical)

Musical Instrument, IQ/H, page(CR?), cat(_General, Arts/Entertainment),
	x(#InputToTag("You must specialize in a particular instrument:", nameext, , "Musical Instrument"))

Singing, HT/E, default(HT - 4), page(CR?), cat(_General, Arts/Entertainment)

<Athletic>
Acrobatics, DX/H, default(DX - 6, SK:Aerobatics - 4, SK:Aquabatics - 4), page(CR?), cat(_General, Athletic)
Astrobatics, DX/H, default(SK:Aerobatics - 2, SK:Aquabatics - 6, SK:Acrobatics - 6), needs(SK:Free Fall), page(CR?), cat(_General, Athletic)
Aerobatics, DX/H, default(DX - 6, SK:Acrobatics - 4, SK:Aquabatics - 4), page(CR?), cat(_General, Athletic)
Aquabatics, DX/H, default(DX - 6, SK:Acrobatics - 4, SK:Aerobatics - 4), needs(SK:Swimming | AD:Amphibious | "DI:No Legs (Aquatic)"), page(CR?), cat(_General, Athletic)

Climbing, DX/A, default(DX - 5), page(CR?), cat(_General, Athletic, Criminal/Street, Outdoor/Exploration)

Free Fall, DX/A, default(DX - 5, HT - 5), page(CR?), cat(_General, Athletic)

Jumping, DX/E, page(CR?), cat(_General, Athletic)

Lifting, HT/A, page(CR?), cat(_General, Athletic)

Running, HT/A, default(HT - 5), page(CR?), cat(_General, Athletic)

Swimming, HT/E, default(HT - 4), page(CR?), cat(_General, Athletic, Outdoor/Exploration)

Throwing, DX/A, default(DX - 3, SK:Dropping - 4), page(CR?), cat(_General, Athletic, Combat/Weapons - Ranged Combat)

<Athletic - Combat Art/Sport>
*Combat Art skills
Axe/Mace Art, DX/A, default(DX - 5, "SK:Axe/Mace" - 3, "SK:Axe/Mace Sport" - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Bow Art, DX/A, default(DX - 5, SK:Bow - 3, SK:Bow Sport - 3), page(CR?), cat(Athletic - Combat Art/Sport)
Broadsword Art, DX/A, default(DX - 5, SK:Broadsword -3, SK:Broadsword Sport - 3, ), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Double-Headed Art, DX/A, default(DX-5, "SK:Double-Headed" -3, "SK:Double-Headed Sport" -3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+4)
Flail Art, DX/H, default(DX - 6, SK:Flail - 3, SK:Flail Sport - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Jitte/Sai Art, DX/A, default(DX - 5, "SK:Jitte/Sai" - 3, "SK:Jitte/Sai Sport" - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Knife Art, DX/E, default(DX - 4, SK:Knife - 3, SK:Knife Sport - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Main-Gauche Art, DX/A, default(DX - 5, "SK:Main-Gauche" - 3, "SK:Main-Gauche Sport" - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Polearm Art, DX/A, default(DX - 5, SK:Polearm - 3, SK:Polearm Sport - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Rapier Art, DX/A, default(DX - 5, SK:Rapier - 3, SK:Rapier Sport - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Saber Art, DX/A, default(DX - 5, SK:Saber - 3, SK:Saber Sport - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Shortsword Art, DX/A, default(DX - 5, SK:Shortsword - 3, SK:Shortsword Sport - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Smallsword Art, DX/A, default(DX - 5, SK:Smallsword - 3, SK:Smallsword Sport - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Spear Art, DX/A, default(DX - 5, SK:Spear - 3, SK:Spear Sport - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Staff Art, DX/A, default(DX - 5, SK:Staff - 3, SK:Staff Sport - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Two-Handed Axe/Mace Art, DX/A, default(DX - 5, "SK:Two-Handed Axe/Mace" - 3, "SK:Two-Handed Axe/Mace Sport" - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Two-Handed Flail Art, DX/H, default(DX - 6, "SK:Two-Handed Flail" - 3, "SK:Two-Handed Flail Sport" - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Two-Handed Sword Art, DX/A, default(DX - 5, "SK:Two-Handed Sword" - 3, "SK:Two-Handed Sword Sport" - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Whip Art, DX/A, default(DX - 5, SK:Whip - 3, SK:Whip Sport - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)

Brawling Art, DX/E, page(CR?), parryat(@int(%level/2)+3), default(SK:Brawling - 3, SK:Brawling Sport - 3), cat(Athletic - Combat Art/Sport)
Grappling & Throwing Art, DX/H, default(DX - 6, SK:Grappling & Throwing - 3, SK:Grappling & Throwing Sport - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Boxing Art, DX/A, default(DX - 6, SK:Punching - 3, SK:Boxing Sport - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Echani Art, DX/H, default(DX - 6, SK:Striking - 3, SK:Echani Sport - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Wrestling Art, DX/A, default(SK:Grappling & Pinning - 3, SK:Wrestling Sport - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)

Shield Art (Shield), DX/E, default(DX - 4, "SK:Shield (Shield)" - 3, "SK:Shield Sport (Shield)" - 3), page(CR?), blockat(@int(%level/2)+3), cat(Athletic - Combat Art/Sport)
Shield Art (Buckler), DX/E, default(DX - 4, "SK:Shield (Buckler)" - 3, "SK:Shield Sport (Buckler)" - 3), page(CR?), blockat(@int(%level/2)+3), cat(Athletic - Combat Art/Sport)
Shield Art (Energy), DX/E, default(DX - 4, "SK:Shield (Energy)" - 3, "SK:Shield Sport (Energy)" - 3), page(CR?), blockat(@int(%level/2)+3), cat(Athletic - Combat Art/Sport)

*Combat Sport skills
Axe/Mace Sport, DX/A, default(DX - 5, "SK:Axe/Mace" - 3, "SK:Axe/Mace Art" - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Bow Sport, DX/A, default(DX - 5, SK:Bow - 3, SK:Bow Art - 3), page(CR?), cat(Athletic - Combat Art/Sport)
Broadsword Sport, DX/A, default(DX - 5, SK:Broadsword -3, SK:Broadsword Art - 3, ), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Double-Headed Sport, DX/A, default(DX-5, "SK:Double-Headed" -3, "SK:Double-Headed Art" -3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+4)
Flail Sport, DX/H, default(DX - 6, SK:Flail - 3, SK:Flail Art - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Jitte/Sai Sport, DX/A, default(DX - 5, "SK:Jitte/Sai" - 3, "SK:Jitte/Sai Art" - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Knife Sport, DX/E, default(DX - 4, SK:Knife - 3, SK:Knife Art - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Main-Gauche Sport, DX/A, default(DX - 5, "SK:Main-Gauche" - 3, "SK:Main-Gauche Art" - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Polearm Sport, DX/A, default(DX - 5, SK:Polearm - 3, SK:Polearm Art - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Rapier Sport, DX/A, default(DX - 5, SK:Rapier - 3, SK:Rapier Art - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Saber Sport, DX/A, default(DX - 5, SK:Saber - 3, SK:Saber Art - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Shortsword Sport, DX/A, default(DX - 5, SK:Shortsword - 3, SK:Shortsword Art - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Smallsword Sport, DX/A, default(DX - 5, SK:Smallsword - 3, SK:Smallsword Art - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Spear Sport, DX/A, default(DX - 5, SK:Spear - 3, SK:Spear Art - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Staff Sport, DX/A, default(DX - 5, SK:Staff - 3, SK:Staff Art - 3), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Two-Handed Axe/Mace Sport, DX/A, default(DX - 5, "SK:Two-Handed Axe/Mace" - 3, "SK:Two-Handed Axe/Mace Art" - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Two-Handed Flail Sport, DX/H, default(DX - 6, "SK:Two-Handed Flail" - 3, "SK:Two-Handed Flail Art" - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Two-Handed Swordv, DX/A, default(DX - 5, "SK:Two-Handed Sword" - 3, "SK:Two-Handed Sword Art" - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Whip Sport, DX/A, default(DX - 5, SK:Whip - 3, SK:Whip Art - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)

Brawling Sport, DX/E, page(CR?), parryat(@int(%level/2)+3), default(SK:Brawling - 3, SK:Brawling Art - 3), cat(Athletic - Combat Art/Sport)
Grappling & Throwing Sport, DX/H, default(DX - 6, SK:Grappling & Throwing - 3, SK:Grappling & Throwing - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Boxing Sport, DX/A, default(DX - 6, SK:Punching - 3, SK:Boxing Art - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Echani Sport, DX/H, default(DX - 6, SK:Striking - 3, SK:Echani Art - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)
Wrestling Sport, DX/A, default(SK:Grappling & Pinning - 3, SK:Wrestling Art - 3), page(CR?), cat(Athletic - Combat Art/Sport), parryat(@int(%level/2)+3)

Shield Sport (Shield), DX/E, default(DX - 4, "SK:Shield (Shield)" - 3, "SK:Shield Art (Shield)" - 3), page(CR?), blockat(@int(%level/2)+3), cat(Athletic - Combat Art/Sport)
Shield Sport (Buckler), DX/E, default(DX - 4, "SK:Shield (Buckler)" - 3, "SK:Shield Art (Buckler)" - 3), page(CR?), blockat(@int(%level/2)+3), cat(Athletic - Combat Art/Sport)
Shield Sport (Energy), DX/E, default(DX - 4, "SK:Shield (Energy)" - 3, "SK:Shield Art (Energy)" - 3), page(CR?), blockat(@int(%level/2)+3), cat(Athletic - Combat Art/Sport)

<Business>
Accounting, IQ/H, default(IQ - 6, SK:Finance - 4, "SK:Mathematics (Statistics)" - 5, SK:Merchant - 5), page(CR?), cat(_General, Business)
Administration, IQ/A, default(IQ - 5, SK:Merchant - 3), page(CR?), cat(_General, Business, Social)
Current Affairs (Business), IQ/E, tl(0-12), default(IQ - 4, SK:Research - 4, SK:Current Affairs - 4), page(CR?), cat(_General, Business, Everyman, Knowledge, Social)
Diplomacy, IQ/H, default(IQ - 6, SK:Politics - 6), page(CR?), cat(_General, Business, Police, Social), gives(=@if(me::level >= 20 then 2 else 0) to ST:Reaction)
Economics, IQ/H, default(IQ - 6, SK:Finance - 3, SK:Market Analysis - 5, SK:Merchant - 6), page(CR?), cat(_General, Business, Social Sciences/Humanities)
Finance, IQ/H, default(SK:Accounting - 4, SK:Economics - 3, SK:Merchant - 6), page(CR?), cat(_General, Business)
Politics, IQ/A, default(IQ - 5, SK:Diplomacy - 5), page(CR?), cat(_General, Business, Social)

Law, IQ/H, default(IQ - 6), page(CR?), cat(_General, Business, Police, Social Sciences/Humanities),
	x(#InputToTag("You must specialize in the laws of a particular political region, or in a specialized body of law not associated with a political region:", nameext, "local", "Law"))

Market Analysis, IQ/H, default(IQ - 6, SK:Economics - 5, SK:Merchant - 4), page(CR?), cat(_General, Business)
Merchant, IQ/A, default(IQ - 5, SK:Finance - 6, SK:Market Analysis - 4), page(CR?), cat(_General, Business, Social), conditional(=@if(me::level >= 20 then 2 else @if(me::basepoints > 0 then 1 else 0)) to ST:Reaction when "buying or selling")
Propaganda, IQ/A, tl(0-12), default(IQ - 5, SK:Merchant - 5, SK:Psychology - 4), page(CR?), cat(_General, Business, Military, Social, Spy)

Public Speaking, IQ/A, default(IQ - 5, SK:Public Speaking, SK:Acting - 5, SK:Performance - 2, SK:Politics - 5), page(CR?), cat(_General, Business, Scholarly, Social)
Public Speaking (Debate), IQ/E, basedon(Public Speaking), optspec(1), default(IQ - 5, SK:Acting - 5, SK:Performance - 2, SK:Politics - 5), page(CR?), cat(_General, Business, Scholarly, Social)
Public Speaking (Oratory), IQ/E, basedon(Public Speaking), optspec(1), default(IQ - 5, SK:Acting - 5, SK:Performance - 2, SK:Politics - 5), page(CR?), cat(_General, Business, Scholarly, Social)
Public Speaking (Rhetoric), IQ/E, basedon(Public Speaking), optspec(1), default(IQ - 5, SK:Acting - 5, SK:Performance - 2, SK:Politics - 5), page(CR?), cat(_General, Business, Scholarly, Social)
Public Speaking (Punning), IQ/E, basedon(Public Speaking), optspec(1), default(IQ - 5, SK:Acting - 5, SK:Performance - 2, SK:Politics - 5), page(CR?), cat(_General, Business, Scholarly, Social)
Public Speaking (Storytelling), IQ/E, basedon(Public Speaking), optspec(1), default(IQ - 5, SK:Acting - 5, SK:Performance - 2, SK:Politics - 5), page(CR?), cat(_General, Business, Scholarly, Social)

<Combat/Weapons - Melee Combat>
Axe/Mace, DX/A, default(DX - 5, SK:Flail - 4, "SK:Two-Handed Axe/Mace" - 3, "SK:Axe/Mace Art" - 3, "SK:Axe/Mace Sport" - 3), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Broadsword, DX/A, default(DX - 5, SK:Rapier - 4, SK:Saber - 4, SK:Shortsword - 2, "SK:Two-Handed Sword" - 4, SK:Broadsword Art - 3, SK:Broadsword Sport - 3, SK:Sword!), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Double-Headed, DX/A, default(DX-5, SK:Staff -4, SK:Spear -4, SK:Polearm -4, "SK:Two-Handed Axe/Mace" -4, "SK:Two-Handed Sword"-4, "SK:Double Headed Art" -3, "SK:Double-Headed Sport" -3), page(CR?), parryat(@int(%level/2)+4), cat(_General, Combat/Weapons - Melee Combat)
Flail, DX/H, default(DX - 6, "SK:Axe/Mace" - 4, "SK:Two-Handed Flail" -3, SK:Flail Art - 3, SK:Flail Sport - 3), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Garrote, DX/E, default(DX - 4), page(CR?), cat(_General, Combat/Weapons - Melee Combat)
Jitte/Sai, DX/A, default(DX - 5, "SK:Main-Gauche" - 4, SK:Shortsword - 3, "SK:Jitte/Sai Art" - 3, "SK:Jitte/Sai Sport" - 3, SK:Sword!), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Knife, DX/E, default(DX - 4, "SK:Main-Gauche" - 3, SK:Shortsword - 3, SK:Knife Art - 3, SK:Knife Sport - 3, SK:Sword!), page(CR?), parryat(@int(%level/2)+3-1), cat(_General, Combat/Weapons - Melee Combat)
Main-Gauche, DX/A, default(DX - 5, "SK:Jitte/Sai" - 4, SK:Knife - 4, SK:Rapier - 3, SK:Saber - 3, SK:Smallsword - 3, "SK:Main-Gauche Art" - 3, "SK:Main-Gauche Sport" - 3, SK:Sword!), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Polearm, DX/A, default(DX - 5, "SK:Two-Handed Axe/Mace" - 4, SK:Spear - 4, SK:Staff - 4, SK:Polearm Art - 3, SK:Polearm Sport - 3), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Rapier, DX/A, default(DX - 5, SK:Broadsword - 4, "SK:Main-Gauche" - 3, SK:Saber - 3, SK:Smallsword - 3, SK:Rapier Art - 3, SK:Rapier Sport - 3, SK:Sword!), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Saber, DX/A, default(DX - 5, SK:Broadsword - 4, SK:Shortsword - 4, "SK:Main-Gauche" - 3, SK:Rapier - 3, SK:Smallsword - 3, SK:Saber Art - 3, SK:Saber Sport - 3, SK:Sword!), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Shortsword, DX/A, default(DX - 5, SK:Broadsword - 2, "SK:Jitte/Sai" - 3, SK:Knife - 4, SK:Saber - 4, SK:Smallsword - 4, SK:Tonfa - 3, SK:Shortsword Art - 3, SK:Shortsword Sport - 3, SK:Sword!), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Smallsword, DX/A, default(DX - 5, SK:Shortsword - 4, "SK:Main-Gauche" - 3, SK:Rapier - 3, SK:Saber - 3, SK:Smallsword Art - 3, SK:Smallsword Sport - 3, SK:Sword!), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Spear, DX/A, default(DX - 5, SK:Polearm - 4, SK:Staff - 2, SK:Spear Art - 3, SK:Spear Sport - 3), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Staff, DX/A, default(DX - 5, "SK:Double-Headed"-4, SK:Polearm - 4, SK:Spear - 2, SK:Staff Art - 3, SK:Staff Sport - 3), page(CR?), parryat(@int(%level/2)+5), cat(_General, Combat/Weapons - Melee Combat)
Two-Handed Axe/Mace, DX/A, default(DX - 5, SK:Polearm - 4, "SK:Two-Handed Flail" - 4, "SK:Axe/Mace" - 3, "SK:Two-Handed Axe/Mace Art" - 3, "SK:Two-Handed Axe/Mace Sport" - 3), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Two-Handed Flail, DX/H, default(DX - 6, "SK:Two-Handed Axe/Mace" - 4, SK:Flail - 3, "SK:Two-Handed Flail Art" - 3, "SK:Two-Handed Flail Sport" - 3), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Two-Handed Sword, DX/A, default(DX - 5, SK:Broadsword - 4, "SK:Two-Handed Sword Art" - 3, "SK:Two-Handed Sword Sport" - 3, SK:Sword!), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Whip, DX/A, default(DX - 5, SK:Whip Art - 3, SK:Whip Sport - 3), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)

Brawling, DX/E, page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat), mods(Punch/Kick), default(SK:Brawling Art - 3, SK:Brawling Sport - 3),
	newmode(Punch, damage(_
				  thr-1 + _
					@if(me::level > ST:DX+1 then @:basethdice(ST:Punch) else 0) + _
					@if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) _
				  ), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(0), skillused(Brawling), damagebasedon(ST:Punch)_
		),
	newmode(Bite, damage(_
				 thr-1 + _
				   @if(me::level > ST:DX+1 then @basethdice(ST:Bite) else 0) + _
				   -@if("DI:Weak Bite::level" = 1 then 2 * @basethdice(ST:Bite) else 0)_
				 ), damtype($if("AD:Teeth (Sharp Teeth)::level" = 1 THEN "cut" ELSE $if("AD:Teeth (Sharp Beak)::level" = 1 THEN "pi+" ELSE $if("AD:Teeth (Fangs)::level" = 1 THEN "imp" ELSE $if("AD:Vampiric Bite::level" = 1 THEN "cut" ELSE "cr"))))), reach(C), parry(No), skillused(Brawling), damagebasedon(ST:Bite)_
		),
	newmode(Kick, damage(_
				 thr + _
					@if(me::level > ST:DX+1 then @basethdice(ST:Kick) else 0) + _
					@if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Hooves)::level" = 1 then @basethdice(ST:Kick) else 0))) _
				 ), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C,1), parry(No), skillused(Brawling-2, Kicking (Brawling)), damagebasedon(ST:Kick)_
		),
	description(Notes: Calculated damage takes into account bonuses from Teeth, Weak Bite, Claws, and skill level. You may add the modifier "Has Gauntlets/Brass Knuckles" or "Has Boots" to apply the +1 damage to Punch or Kick, as appropriate.),
	gives(=$if(me::level >= ST:DX THEN nobase) to ST:Punch::reach$, =$if(me::level >= ST:DX THEN nobase) to ST:Kick::reach$, =$if(me::level >= ST:DX THEN nobase) to ST:Bite::reach$)
//	replacetags(in "ST:Punch" with "hide(yes), reach()", in "ST:Kick" with "hide(yes), reach()", in "ST:Bite" with "hide(yes), reach()")
	

Grappling & Pinning, DX/A, default(SK:Wrestling Art - 3, SK:Wrestling Sport - 3), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
	
Grappling & Throwing, DX/H, default(SK:Grappling & Throwing Art - 3, SK:Grappling & Throwing Sport - 3), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)

Punching, DX/A, default(SK:Boxing Art - 3, SK:Boxing Sport - 3), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat), mods(Punch/Kick),
	newmode(Punch, damage(_
				  thr-1 + _
					@if(me::level = ST:DX+1 then @basethdice(ST:Punch) else @if(me::level > ST:DX+1 then 2 * @basethdice(ST:Punch) else 0)) + _
					@if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) _
				 ), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(0), skillused(Punching),
				damagebasedon(ST:Punch),
		),
	description(Notes: Calculated damage takes into account bonuses from Claws and skill level. You may add the modifier "Has Gauntlets/Brass Knuckles" to apply the +1 damage to Punch.),
	gives(=$if(me::level >= ST:DX THEN nobase) to ST:Punch::reach$)
//	replacetags(in "ST:Punch" with "hide(yes), reach()")

Striking, DX/H, default(SK:Striking Art - 3, SK:Striking Sport - 3), page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat), mods(Punch/Kick),
	newmode(Punch, damage(_
				  thr - 1 + _
					@if(me::level = ST:DX then @basethdice(ST:Punch) else @if(me::level > ST:DX then 2 * @basethdice(ST:Punch) else 0)) + _
					@if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) _
				  ), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(0), skillused(Striking), damagebasedon(ST:Punch)_
		),
	newmode(Kick, damage(_
				 thr + _ 
					@if(me::level = ST:DX then @basethdice(ST:Kick) else @if(me::level > ST:DX then 2 * @basethdice(ST:Kick) else 0)) + _
					@if("DI:Horizontal::level" = 1 then -@basethdice(ST:Kick) else 0) + _
					@if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Hooves)::level" = 1 then @basethdice(ST:Kick) else 0))) _
				 ), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C,1), parry(No), skillused(Striking-2, Kicking (Striking)), damagebasedon(ST:Kick)_
			),
	description(Notes: Calculated damage takes into account bonuses from Claws and skill level. You may add the modifier "Has Gauntlets/Brass Knuckles" or "Has Boots" to apply the +1 damage to Punch or Kick, as appropriate.), gives(=$if(me::level >= ST:DX THEN nobase) to ST:Punch::reach$, =$if(me::level >= ST:DX THEN nobase) to ST:Kick::reach$)
//	replacetags(in "ST:Punch" with "hide(yes), reach()", in "ST:Kick" with "hide(yes), reach()")


Fast-Draw, DX/E, page(CR?), cat(_General, Combat/Weapons - Melee Combat, Combat/Weapons - Ranged Combat),
	x(#InputToTag("You must specialize in a type of Weapon:", nameext, , "Fast-Draw"))

Fast-Draw (Knife), DX/E, page(CR?), cat(_General, Combat/Weapons - Melee Combat, Combat/Weapons - Ranged Combat), default(SK:Sword!)
Fast-Draw (Sword), DX/E, page(CR?), cat(_General, Combat/Weapons - Melee Combat), default(SK:Sword!)
Fast-Draw (Two-Handed Sword), DX/E, page(CR?), cat(_General, Combat/Weapons - Melee Combat), default(SK:Sword!)

Parry Missile Weapons, DX/H, page(CR?), parryat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)

Shield (Shield), DX/E, default(DX - 4, "SK:Shield (Buckler)" - 2, "SK:Shield (energy)" - 2, "SK:Shield Art (Shield)" - 3, "SK:Shield Sport (Shield)" - 3), page(CR?), blockat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Shield (Buckler), DX/E, default(DX - 4, "SK:Shield (Shield)" - 2, "SK:Shield (Energy)" - 2, "SK:Shield Art (Buckler)" - 3, "SK:Shield Sport (Buckler)" - 3), page(CR?), blockat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)
Shield (Energy), DX/E, default(DX - 4, "SK:Shield (Shield)" - 2, "SK:Shield (Buckler)" - 2, "SK:Shield Art (Energy)" - 3, "SK:Shield Sport (Energy)" - 3), page(CR?), blockat(@int(%level/2)+3), cat(_General, Combat/Weapons - Melee Combat)

<Combat/Weapons - Ranged Combat>
Artillery (Beams), IQ/A, tl(0-12), default(IQ - 5), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Artillery (Bombs), IQ/A, tl(0-12), default(IQ - 5), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Artillery (Cannon), IQ/A, tl(0-12), default(IQ - 5), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Artillery (Catapult), IQ/A, tl(0-12), default(IQ - 5), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Artillery (Guided Missile), IQ/A, tl(0-12), default(IQ - 5), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)

Beam Weapons (Pistol), DX/E, tl(0-12), default(DX - 4, SK:Beam Weapons - 4, "SK:Guns (Pistol)" - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Beam Weapons (Projector), DX/E, tl(0-12), default(DX - 4, SK:Beam Weapons - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Beam Weapons (Repeater), DX/E, tl(0-12), default(DX - 4, SK:Beam Weapons - 4, "SK:Guns (Repeater)" - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Beam Weapons (Rifle), DX/E, tl(0-12), default(DX - 4, SK:Beam Weapons - 4, "SK:Guns (Rifle)" - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)

Blowpipe, DX/H, default(DX - 6), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)

Bow, DX/A, default(DX - 5, SK:Bow Art - 3, SK:Bow Sport - 3), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)

Dropping, DX/A, default(DX - 3, SK:Throwing - 4), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)

Fast-Draw (Projectile), DX/E, page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Fast-Draw (Ammo), DX/E, tl(4-12), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Fast-Draw (Long Arm), DX/E, page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Fast-Draw (Power Pack), DX/E, tl(10-11), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Fast-Draw (Pistol), DX/E, page(CR?), cat(_General, Combat/Weapons - Ranged Combat)

Gunner (Beams), DX/E, tl(0-12), default(DX - 4, SK:Gunner - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Gunner (Cannon), DX/E, tl(0-12), default(DX - 4, SK:Gunner - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Gunner (Catapult), DX/E, tl(0-12), default(DX - 4, SK:Gunner - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Gunner (Gravity Well Projector), DX/E, tl(0-12), default(DX - 4, SK:Gunner - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Gunner (Machine Gun), DX/E, tl(0-12), default(DX - 4, SK:Gunner - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Gunner (Tractor Beam), DX/E, tl(0-12), default(DX - 4, SK:Gunner - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Gunner (Rockets), DX/E, tl(0-12), default(DX - 4, SK:Gunner - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)

Guns (Grenade Launcher), DX/E, tl(0-12), default(DX - 4, SK:Guns - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Guns (Gyroc), DX/E, tl(0-12), default(DX - 4, SK:Guns - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Guns (Light Anti-Armor Weapon), DX/E, tl(0-12), default(DX - 4, SK:Guns - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Guns (Light Machine Gun), DX/E, tl(0-12), default(DX - 4, "SK:Guns (Grenade Launcher)" - 4, "SK:Guns (Gyroc)" - 4, "SK:Guns (Light Anti-Armor Weapon)" - 4, "SK:Guns (Light Machine Gun)" - 2, "SK:Guns (Musket)" - 2, "SK:Guns (Pistol)" - 2, "SK:Guns (Rifle)" - 2, "SK:Guns (Shotgun)" - 2, "SK:Guns (Repeater)" - 2, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Guns (Musket), DX/E, tl(0-12), default(DX - 4, "SK:Guns (Grenade Launcher)" - 4, "SK:Guns (Gyroc)" - 4, "SK:Guns (Light Anti-Armor Weapon)" - 4, "SK:Guns (Light Machine Gun)" - 2, "SK:Guns (Musket)" - 2, "SK:Guns (Pistol)" - 2, "SK:Guns (Rifle)" - 2, "SK:Guns (Shotgun)" - 2, "SK:Guns (Repeater)" - 2, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Guns (Pistol), DX/E, tl(0-12), default(DX - 4, "SK:Guns (Grenade Launcher)" - 4, "SK:Guns (Gyroc)" - 4, "SK:Guns (Light Anti-Armor Weapon)" - 4, "SK:Guns (Light Machine Gun)" - 2, "SK:Guns (Musket)" - 2, "SK:Guns (Pistol)" - 2, "SK:Guns (Rifle)" - 2, "SK:Guns (Shotgun)" - 2, "SK:Guns (Repeater)" - 2, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Guns (Rifle), DX/E, tl(0-12), default(DX - 4, "SK:Guns (Grenade Launcher)" - 4, "SK:Guns (Gyroc)" - 4, "SK:Guns (Light Anti-Armor Weapon)" - 4, "SK:Guns (Light Machine Gun)" - 2, "SK:Guns (Musket)" - 2, "SK:Guns (Pistol)" - 2, "SK:Guns (Rifle)" - 2, "SK:Guns (Shotgun)" - 2, "SK:Guns (Repeater)" - 2, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Guns (Shotgun), DX/E, tl(0-12), default(DX - 4, "SK:Guns (Grenade Launcher)" - 4, "SK:Guns (Gyroc)" - 4, "SK:Guns (Light Anti-Armor Weapon)" - 4, "SK:Guns (Light Machine Gun)" - 2, "SK:Guns (Musket)" - 2, "SK:Guns (Pistol)" - 2, "SK:Guns (Rifle)" - 2, "SK:Guns (Shotgun)" - 2, "SK:Guns (Repeater)" - 2, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Guns (Repeater), DX/E, tl(0-12), default(DX - 4, "SK:Guns (Grenade Launcher)" - 4, "SK:Guns (Gyroc)" - 4, "SK:Guns (Light Anti-Armor Weapon)" - 4, "SK:Guns (Light Machine Gun)" - 2, "SK:Guns (Musket)" - 2, "SK:Guns (Pistol)" - 2, "SK:Guns (Rifle)" - 2, "SK:Guns (Shotgun)" - 2, "SK:Guns (Repeater)" - 2, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)

Innate Attack (Beam), DX/E, default(DX - 4, SK:Innate Attack - 2), page(CR?), cat(_General, Combat/Weapons - Ranged Combat), parryat(@int((ST:Power Parry Beam + %level)/2)+3)
Innate Attack (Breath), DX/E, default(DX - 4, SK:Innate Attack - 2), page(CR?), cat(_General, Combat/Weapons - Ranged Combat), parryat(@int((ST:Power Parry Breath + %level)/2)+3)
Innate Attack (Gaze), DX/E, default(DX - 4, SK:Innate Attack - 2), page(CR?), cat(_General, Combat/Weapons - Ranged Combat), parryat(@int((ST:Power Parry Gaze + %level)/2)+3)
Innate Attack (Projectile), DX/E, default(DX - 4, SK:Innate Attack - 2), page(CR?), cat(_General, Combat/Weapons - Ranged Combat), parryat(@int((ST:Power Parry Projectile + %level)/2)+3)

Liquid Projector (Flamethrower), DX/E, tl(0-12), default(DX - 4, SK:Liquid Projector - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Liquid Projector (Sprayer), DX/E, tl(0-12), default(DX - 4, SK:Liquid Projector - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Liquid Projector (Squirt Gun), DX/E, tl(0-12), default(DX - 4, SK:Liquid Projector - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Liquid Projector (Water Cannon), DX/E, tl(0-12), default(DX - 4, SK:Liquid Projector - 4, SK:Gun!), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)

Thrown Weapon (Axe/Mace), DX/E, default(DX - 4), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Thrown Weapon (Dart), DX/E, default(DX - 4, SK:Throwing - 2), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Thrown Weapon (Disc), DX/E, default(DX - 4), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Thrown Weapon (Harpoon), DX/E, default(DX - 4, "SK:Thrown Weapon (Spear)" - 2), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Thrown Weapon (Knife), DX/E, default(DX - 4), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Thrown Weapon (Spear), DX/E, default(DX - 4, SK:Spear Thrower - 4, "SK:Thrown Weapon (Harpoon)" - 2), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Thrown Weapon (Stick), DX/E, default(DX - 4), page(CR?), cat(_General, Combat/Weapons - Ranged Combat)
Thrown Weapon (Throwing Star), DX/E, default(DX-4), Page(CR?), cat(_General, Combat/Weapons - Ranged Combat)



<Craft>
Jeweler, IQ/H, tl(0-12), default(IQ - 6, "SK:Smith (Copper)" - 4, "SK:Smith (Lead and Tin)" - 4), page(CR?), cat(_General, Craft)

<Criminal/Street>
Carousing, HT/E, default(HT - 4), page(CR?), cat(_General, Criminal/Street, Social)

Computer Hacking, IQ/VH, tl(0-12), needs(SK:Computer Programming = 1pts), page(CR?), cat(_General, Criminal/Street, Spy)

Disguise, IQ/A, tl(0-12), default(IQ - 5, SK:Makeup - 3), page(CR?), cat(_General, Criminal/Street, Spy),
	x(#InputToTag("You must specialize by species:", nameext, "Human", "Disguise"))

Electronics Operation (Security), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Repair (Security)" - 5, "SK:Engineer (Electronics)" - 5, SK:Electronics Operation - 4), page(CR?), cat(_General, Criminal/Street, Spy, Technical)

Escape, DX/H, default(DX - 6), page(CR?), cat(_General, Criminal/Street, Spy)

Explosives (Demolition), IQ/A, tl(0-12), default(IQ - 5, "SK:Engineer (Combat)" - 3, "SK:Engineer (Mining)" - 3, "SK:Explosives (Underwater Demolition)" - 2, SK:Explosives - 4), page(CR?), cat(_General, Criminal/Street, Military, Technical)

Fast-Talk, IQ/A, default(IQ - 5, SK:Acting - 5), page(CR?), cat(_General, Criminal/Street, Social, Spy), gives(=@if(me::level >= 20 then 2 else 0) to ST:Reaction)

Forgery, IQ/H, tl(0-12), default(IQ - 6, SK:Counterfeiting - 2), page(CR?), cat(_General, Criminal/Street, Spy)

Gambling, IQ/A, default(IQ - 5, "SK:Mathematics (Statistics)" - 5), page(CR?), cat(_General, Criminal/Street, Social)

Holdout, IQ/A, default(IQ - 5, SK:Sleight of Hand - 3), page(CR?), cat(_General, Criminal/Street, Spy)

Intimidation, Will/A, default(Will - 5, SK:Acting - 3), page(CR?), cat(_General, Criminal/Street, Police, Social)

Observation, Per/A, default(Per - 5, SK:Shadowing - 5), page(CR?), cat(_General, Criminal/Street, Military, Police, Spy)

Poisons, IQ/H, tl(0-12), default(IQ - 6, SK:Chemistry - 5, SK:Pharmacy - 3, SK:Physician - 3), page(CR?), cat(_General, Criminal/Street, Medical, Spy)

Scrounging, Per/E, default(Per - 4), page(CR?), cat(_General, Criminal/Street)

Shadowing, IQ/A, default(IQ - 5, SK:Observation - 5), page(CR?), cat(_General, Criminal/Street, Police, Spy)

Stealth, DX/A, default(DX - 5, IQ - 5), page(CR?), cat(_General, Criminal/Street, Police, Spy)

Streetwise, IQ/A, default(IQ - 5), page(CR?), cat(_General, Criminal/Street, Police, Social)

Traps, IQ/A, tl(0-12), default(IQ - 5, SK:Lockpicking - 3), page(CR?), cat(_General, Criminal/Street, Military)

Urban Survival, Per/A, default(Per - 5), page(CR?), cat(_General, Criminal/Street, Police)

<Design/Invention>
Bioengineering (Biogadgets), IQ/H, tl(0-12), default(SK:Biology - 5, SK:Bioengineering - 4), page(CR?), cat(_General, Design/Invention)
Bioengineering (Cloning), IQ/H, tl(0-12), default(SK:Biology - 5, SK:Bioengineering - 4), page(CR?), cat(_General, Design/Invention)
Bioengineering (Genetic Engineering), IQ/H, tl(0-12), default(SK:Biology - 5, SK:Bioengineering - 4), page(CR?), cat(_General, Design/Invention)
Bioengineering (Microbioengineering), IQ/H, tl(0-12), default(SK:Biology - 5, SK:Bioengineering - 4), page(CR?), cat(_General, Design/Invention)
Bioengineering (Tissue Engineering), IQ/H, tl(0-12), default(SK:Biology - 5, SK:Bioengineering - 4), page(CR?), cat(_General, Design/Invention)
Bioengineering (Uplift), IQ/H, tl(0-12), default(SK:Biology - 5, SK:Bioengineering - 4), page(CR?), cat(_General, Design/Invention)
Bioengineering (Vaccines), IQ/H, tl(0-12), default(SK:Biology - 5, SK:Bioengineering - 4), page(CR?), cat(_General, Design/Invention)

Computer Programming, IQ/H, tl(0-12), page(CR?), cat(_General, Design/Invention)
Computer Programming (Droid), IQ/H, tl(0-12), page(CR?), cat(_General, Design/Invention)

Engineer ([Type]), IQ/H, tl(0-12), default("SK:Mechanic ([Type])" - 6, "SK:Armoury ([Type])" - 6, SK:Engineer - 4),
	needs($if(me::tl > 4 THEN "SK:Mathematics (Applied) = 1pts")), page(CR?), cat(_General, Design/Invention), noresync(yes),
	x( #InputReplace("Choose an Armor, Machine, Motive System, Power Plant, Vehicle, or Weapon type:", "[Type]", , "Engineer") )

Engineer (%examplelist%), IQ/H, tl(0-12), default("SK:Mechanic (%examplelist%)" - 6, "SK:Armoury (%examplelist%)" - 6, SK:Engineer - 4),
	needs($if(me::tl > 4 THEN "SK:Mathematics (Applied) = 1pts")), page(CR?0), cat(_General, Design/Invention),
	x(#ChoiceList(_
			name(example),
			title(Engineer: Choose an Engineering Specialty),
			text(Choose an Engineering Specialty from the list of examples provided:),
			picksallowed(exactly 1),
			method(bynumber),
			list(_
				Aerospace,
				Airspeeder,
				Autogyro,
				Battlesuits,
				Body Armor,
				Clockwork,
				Construction Equipment,
				Droids,
				Fission Reactor,
				Flight Pack,
				Force Shields,
				Free-Flooding Sub,
				Fuel Cell,
				Fusion Reactor,
				Gas Turbine,
				Glider,
				Heavy Wheeled Vehicle,
				Hyperdrive,
				Large Powerboat,
				Large Sub,
				Legged Motive System,
				Light Airplane,
				Lighter-Than-Air,
				Lightsail,
				Locomotive,
				Low-G Wings,
				Melee Weapons,
				Mini-Sub,
				Missile Weapons,
				Motorboat,
				Pod Racer,
                                Reactionless Thrusters,
				Repulsorlift,
				Robotics,
				Rockets,
				Sailboat,
				Small Arms,
				Speeder,
				Speederbike,
				Starships,
				Swoop,
				Tracked Motive System,
				Tracked Vehicle,
				Ultralight Airplane,
				Unpowered Boat,
				Vehicular Armor,
				Wheeled Motive System _
			   )_
			)_
	), noresync(yes)

Engineer (Artillery), IQ/H, tl(0-12), default("SK:Armoury (Heavy Weapons)" - 6, SK:Engineer - 4), needs($if(me::tl > 4 THEN "SK:Mathematics (Applied) = 1pts")), page(CR?), cat(_General, Design/Invention)
Engineer (Civil), IQ/H, tl(0-12), default(SK:Architecture - 6, SK:Engineer - 4), needs($if(me::tl > 4 THEN "SK:Mathematics (Applied) = 1pts")), page(CR?), cat(_General, Design/Invention)
Engineer (Combat), IQ/H, tl(0-12), default("SK:Explosives (Demolition)" - 6, SK:Engineer - 4), needs($if(me::tl > 4 THEN "SK:Mathematics (Applied) = 1pts")), page(CR?), cat(_General, Design/Invention)
Engineer (Electrical), IQ/H, tl(0-12), default(SK:Electrician - 6, SK:Engineer - 4), needs($if(me::tl > 4 THEN "SK:Mathematics (Applied) = 1pts")), page(CR?), cat(_General, Design/Invention)
Engineer (Electronics), IQ/H, tl(0-12), default(SK:Electronics Repair - 6, SK:Engineer - 4), needs($if(me::tl > 4 THEN "SK:Mathematics (Applied) = 1pts")), page(CR?), cat(_General, Design/Invention)
Engineer (Materials), IQ/H, tl(0-12), default(SK:Chemistry - 6, SK:Metallurgy - 6, SK:Engineer - 4), needs($if(me::tl > 4 THEN "SK:Mathematics (Applied) = 1pts"), (SK:Chemistry = 1 pts | SK:Metallurgy = 1 pts)), page(CR?), cat(_General, Design/Invention)
Engineer (Mining), IQ/H, tl(0-12), default("SK:Explosives (Demolition)" - 6, SK:Geology - 6, SK:Engineer - 4), needs($if(me::tl > 4 THEN "SK:Mathematics (Applied) = 1pts")), page(CR?), cat(_General, Design/Invention)

<Esoteric>
Battle Shout, HT/H, needs(AD:Trained By A Master | AD:Weapon Master), page(CR?), cat(_General, Esoteric)

Blind Fighting, Per/VH, needs(AD:Trained By A Master | AD:Weapon Master | AD:Trained by a Jedi Battlemaster | AD:Trained by a Jedi Forcemaster), page(CR?), cat(_General, Esoteric)

Breaking Blow, IQ/H, needs(AD:Trained By A Master), page(CR?), cat(_General, Esoteric)

Enthrallment (Captivate), Will/H, needs(AD:Charisma = 1, SK:Public Speaking = 12, "SK:Enthrallment (Suggest)" = 12), page(CR?), cat(_General, Esoteric)
Enthrallment (Persuade), Will/H, needs(AD:Charisma = 1, SK:Public Speaking = 12), page(CR?), cat(_General, Esoteric)
Enthrallment (Suggest), Will/H, needs(AD:Charisma = 1, SK:Public Speaking = 12, "SK:Enthrallment (Persuade)" = 12), page(CR?), cat(_General, Esoteric)
Enthrallment (Sway Emotions), Will/H, needs(AD:Charisma = 1, SK:Public Speaking = 12, "SK:Enthrallment (Persuade)" = 12), page(CR?), cat(_General, Esoteric)

Immovable Stance, DX/H, needs(AD:Trained By A Master), page(CR?), cat(_General, Esoteric)

Mental Strength, Will/E, needs(AD:Trained By A Master | AD:Weapon Master), page(CR?), cat(_General, Esoteric)

Power Blow, Will/H, needs(AD:Trained By A Master | AD:Weapon Master), page(CR?), cat(_General, Esoteric)

Pressure Points, IQ/H, default(SK:Esoteric Medicine - 4), needs(AD:Trained By A Master | AD:Weapon Master), page(CR?), cat(_General, Esoteric),
	x(#InputToTag("You must specialize by species - Physiology Modifiers apply (p. CR?):", nameext, "Human", "Pressure Points"))
Pressure Secrets, IQ/VH, needs(TE: Anx | AD:Trained By A Master, SK:Pressure Points = 16), page(CR?), cat(_General, Esoteric),
	x(#InputToTag("You must specialize by species - Physiology Modifiers apply (p. CR?):", nameext, "Human", "Pressure Secrets"))

Throwing Art, DX/H, needs(AD:Trained By A Master | AD:Weapon Master), page(CR?), cat(_General, Esoteric)

<Everyman>
Area Knowledge ([Area]), IQ/E, default(IQ - 4, "SK:Geography ([Area])" - 3), page(CR?), cat(_General, Everyman, Knowledge),
	x(#InputReplace("Please specify the area covered:", "[Area]", "local", "Area Knowledge")), noresync(yes)

Computer Operation, IQ/E, tl(0-12), default(IQ - 4), page(CR?), cat(_General, Everyman, Scholarly, Technical)

Cooking, IQ/A, default(IQ - 5, SK:Housekeeping - 5), page(CR?), cat(_General, Everyman)

Current Affairs (Headline News), IQ/E, tl(0-12), default(IQ - 4, SK:Research - 4, SK:Current Affairs - 4), page(CR?), cat(_General, Everyman, Knowledge, Social)
Current Affairs (People), IQ/E, tl(0-12), default(IQ - 4, SK:Research - 4, SK:Current Affairs - 4), page(CR?), cat(_General, Everyman, Knowledge, Social)
Current Affairs (Politics), IQ/E, tl(0-12), default(IQ - 4, SK:Research - 4, SK:Current Affairs - 4), page(CR?), cat(_General, Everyman, Knowledge, Social)

Current Affairs ([Regional]), IQ/E, tl(0-12), default(IQ - 4, SK:Research - 4, SK:Current Affairs - 4), page(CR?), cat(_General, Everyman, Knowledge, Social),
	x(#InputReplace("Please specify a particular region:", "[Regional]", "local region", "Current Affairs"))

Current Affairs (Science & Technology), IQ/E, tl(0-12), default(IQ - 4, SK:Research - 4, SK:Current Affairs - 4), page(CR?), cat(_General, Everyman, Knowledge, Social)
Current Affairs (Sports), IQ/E, tl(0-12), default(IQ - 4, SK:Research - 4, SK:Current Affairs - 4), page(CR?), cat(_General, Everyman, Knowledge, Social)
Current Affairs (Travel), IQ/E, tl(0-12), default(IQ - 4, SK:Research - 4, SK:Current Affairs - 4), page(CR?), cat(_General, Everyman, Knowledge, Social)

First Aid, IQ/E, tl(0-12), default(IQ - 4, SK:Esoteric Medicine, SK:Physician, SK:Veterinary - 4), page(CR?), cat(_General, Everyman, Medical),
	x(#InputToTag("You must specialize by species - Physiology Modifiers apply (p. CR?):", nameext, "Near-Human, Humanoid, or Alien", "First Aid"))

Housekeeping, IQ/E, default(IQ - 4), page(CR?), cat(_General, Everyman)

Knot-Tying, DX/E, default(DX - 4, SK:Climbing - 4, SK:Seamanship - 4), page(CR?), cat(_General, Everyman)

Tracking, Per/A, default(Per - 5, SK:Naturalist - 5), page(CR?), cat(_General, Outdoor/Exploration)

<Knowledge>
Expert Skill, IQ/H, page(CR?), cat(_General, Knowledge, Scholarly),
	x(#InputToTag("Please specify an area of expertise here:", nameext, , "Expert Skill"))
Expert Skill (Computer Security), IQ/H, page(CR?), cat(_General, Knowledge, Scholarly)
Expert Skill (Military Science), IQ/H, page(CR?), cat(_General, Knowledge, Scholarly)
Expert Skill (Political Science), IQ/H, page(CR?), cat(_General, Knowledge, Scholarly)

Games, IQ/E, default(IQ - 4), page(CR?), cat(_General, Knowledge),
	x(#InputToTag("You must specialize in a particular game:", nameext, "Game/Sport", "Games"))

Hidden Lore, IQ/A, page(CR?), cat(_General, Knowledge),
	x(#InputToTag("You must specialize in a particular body of secret knowledge:", nameext, , "Hidden Lore"))

Hidden Lore (Precursor Race), IQ/A, page(CR?), cat(_General, Knowledge)

Hobby Skill ([DX-based]), DX/E, default(DX - 4), page(CR?), cat(_General, Knowledge),
   x( #InputReplace("Specify the field of study:", "[DX-based]", , "Hobby Skill") )
Hobby Skill ([IQ-based]), IQ/E, default(IQ - 4), page(CR?), cat(_General, Knowledge),
   x( #InputReplace("Specify the field of study:", "[IQ-based]", , "Hobby Skill") )

Professional Skill ([DX based]), DX/A, default(DX - 5), page(CR?), cat(_General, Knowledge),
   x( #InputReplace("Specify the profession encompassed by this skill:", "[DX based]", , "Professional Skill") )
Professional Skill ([IQ based]), IQ/A, default(IQ - 5), page(CR?), cat(_General, Knowledge),
   x( #InputReplace("Specify the profession encompassed by this skill:", "[IQ based]", , "Professional Skill") )

<Medical>
Diagnosis, IQ/H, tl(0-12), default(IQ - 6, SK:First Aid - 8, SK:Physician - 4, SK:Veterinary - 5), page(CR?), cat(_General, Medical),
	x(#InputToTag("You must specialize by species - Physiology Modifiers apply (p. CR?):", nameext, "Human", "Diagnosis"))

Electronics Operation (Medical), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Repair (Medical)" - 5, "SK:Engineer (Electronics)" - 5, SK:Electronics Operation - 4), page(CR?), cat(_General, Medical, Technical)

Physician, IQ/H, tl(0-12), default(IQ - 7, SK:First Aid - 11, SK:Veterinary - 5), page(CR?), cat(_General, Medical),
	x(#InputToTag("You must specialize by species - Physiology Modifiers apply (CR?):", nameext, "Human", "Physician"))

Physiology, IQ/H, tl(0-12), default(IQ - 6, SK:Diagnosis - 5, SK:Physician - 5, SK:Surgery - 5), page(CR?), cat(_General, Medical, Natural Sciences),
	x(#InputToTag("You must specialize by species - Physiology Modifiers apply (CR?):", nameext, "Human", "Physiology"))

Psychology, IQ/H, default(IQ - 6, SK:Sociology - 4), page(CR?), cat(_General, Medical, Social Sciences/Humanities),
	x(#InputToTag("You must specialize by species:", nameext, "Human", "Psychology"))

Surgery, IQ/VH, tl(0-12), default(SK:First Aid - 12, SK:Physician - 5, SK:Physiology - 8, SK:Veterinary - 5), needs(SK:First Aid = 1pts | SK:Physician = 1pts), page(CR?), cat(_General, Medical),
	x(#InputToTag("You must specialize by species - Physiology Modifiers apply (CR?):", nameext, "Human", "Surgery"))

<Military>
Armoury (Battlesuits), IQ/A, tl(0-12), IQ/A, default(IQ - 5, SK:Armoury - 4, "SK:Engineer (Battlesuits)" - 4), page(CR?), cat(_General, Military, Repair/Maintenance)

Armoury (Body Armor), IQ/A, tl(0-12), IQ/A, page(CR?), cat(_General, Military, Repair/Maintenance), default(IQ - 5, SK:Armoury - me::default0, "SK:Armoury (Battlesuits)" - 4, "SK:Armoury (Force Shields)" - 4, "SK:Armoury (Vehicular Armor)" - 4, "SK:Engineer (Body Armor)" - 4, "SK:Smith (Copper)" - me::default1, "SK:Smith (Iron)" - me::default2, SK:Machinist - me::default3),
	default0(@if(me::tl > 4 THEN 100 ELSE 4)),
	default1(@if(me::tl = 1 THEN 3 ELSE 100)),
	default2(@if(me::tl = 2 then 3 else @if(me::tl = 3 then 3 else @if(me::tl = 4 then 3 else 100)))),
	default3(@if(me::tl > 4 then 3 else 100))

Armoury (Force Shields), IQ/A, tl(0-12), IQ/A, page(CR?), cat(_General, Military, Repair/Maintenance),	default(IQ - 5, SK:Armoury - me::default0, "SK:Armoury (Battlesuits)" - 4, "SK:Armoury (Body Armor)" - 4, "SK:Armoury (Vehicular Armor)" - 4, "SK:Engineer (Force Shields)" - 4), default0(@if(me::tl > 4 THEN 100 ELSE 4))

Armoury (Vehicular Armor), IQ/A, tl(0-12), IQ/A, page(CR?), cat(_General, Military, Repair/Maintenance), default(IQ - 5, SK:Armoury - me::default0, "SK:Armoury (Battlesuits)" - 4, "SK:Armoury (Body Armor)" - 4, "SK:Armoury (Force Shields)" - 4, "SK:Engineer (Vehicular Armor)" - 4), default0(@if(me::tl > 4 THEN 100 ELSE 4))

Armoury (Melee Weapons), IQ/A, tl(0-12), IQ/A, page(CR?), cat(_General, Military, Repair/Maintenance), default(IQ - 5, SK:Armoury - me::default0, "SK:Armoury (Battlesuits)" - 4, "SK:Armoury (Small Arms)" - 4, "SK:Armoury (Heavy Weapons)" - 4, "SK:Armoury (Missile Weapons)" - 4, "SK:Engineer (Melee Weapons)" - 4, "SK:Smith (Copper)" - me::default1, "SK:Smith (Iron)" - me::default2, SK:Machinist - me::default3),
	default0(@if(me::tl > 4 THEN 100 ELSE 4)),
	default1(@if(me::tl =1 THEN 3 ELSE 100)),
	default2(@if(me::tl = 2 then 3 else @if(me::tl = 3 then 3 else @if(me::tl = 4 then 3 else 100)))),
	default3(@if(me::tl > 4 then 3 else 100))

Armoury (Small Arms), IQ/A, tl(0-12), page(CR?), cat(_General, Military, Repair/Maintenance), default(IQ - 5, SK:Armoury - me::default0, "SK:Armoury (Battlesuits)" - 4, "SK:Armoury (Melee Weapons)" - 4, "SK:Armoury (Heavy Weapons)" - 4, "SK:Armoury (Missile Weapons)" - 4, "SK:Engineer (Small Arms)" - 4, SK:Machinist - me::default1),
	default0(@if(me::tl > 4 THEN 100 ELSE 4)),
	default1(@if(me::tl > 4 then 3 else 100))

Armoury (Heavy Weapons), IQ/A, tl(0-12), IQ/A,  page(CR?), cat(_General, Military, Repair/Maintenance), default(IQ - 5, SK:Armoury - me::default0, "SK:Armoury (Battlesuits)" - 4, "SK:Armoury (Melee Weapons)" - 4, "SK:Armoury (Small Arms)" - 4, "SK:Armoury (Missile Weapons)" - 4, "SK:Engineer (Artillery)" - 4), default0(@if(me::tl > 4 THEN 100 ELSE 4))

Armoury (Missile Weapons), IQ/A, tl(0-12), IQ/A, page(CR?), cat(_General, Military, Repair/Maintenance),default(IQ - 5, SK:Armoury - me::default0, "SK:Armoury (Battlesuits)" - 4, "SK:Armoury (Melee Weapons)" - 4, "SK:Armoury (Small Arms)" - 4, "SK:Armoury (Heavy Weapons)" - 4, "SK:Engineer (Missile Weapons)" - 4), default0(@if(me::tl > 4 THEN 100 ELSE 4))

Camouflage, IQ/E, default(IQ - 4, SK:Survival - 2), page(CR?), cat(_General, Military, Outdoor/Exploration)

Cryptography, IQ/H, tl(0-12), default("SK:Mathematics (Cryptology)" - 5), page(CR?), cat(_General, Military, Spy)

Electronics Operation (Electronic Warfare), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Repair (Electronic Warfare)" - 5, "SK:Engineer (Electronics)" - 5, SK:Electronics Operation - 4), page(CR?), cat(_General, Military, Spy, Technical)

Electronics Repair (Electronic Warfare), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Operation (Electronic Warfare)" - 3, "SK:Engineer (Electronics)" - 3, SK:Electronics Repair - 4), page(CR?), cat(_General, Military, Repair/Maintenance)

Environment Suit (Battlesuit), DX/A, tl(0-12), default(DX - 5, "SK:Environment Suit (RBC Suit)" - 2, "SK:Environment Suit (EVA Suit)" - 2), page(CR?), cat(_General, Military, Technical, Vehicle)
Environment Suit (RBC Suit), DX/A, tl(0-12), default(DX - 5, "SK:Environment Suit (Battlesuit)" - 2, "SK:Environment Suit (EVA Suit)" - 2), page(CR?), cat(_General, Military, Technical)
Environment Suit (EVA Suit), DX/A, tl(0-12), default(DX - 5, "SK:Environment Suit (RBC Suit)" - 2, "SK:Environment Suit (Battlesuit)" - 2), page(CR?), cat(_General, Military, Technical, Vehicle)
Environment Suit (Hydrosuit), DX/A, tl(0-12), default(DX - 5, "SK:Environment Suit (Battlesuit)" - 2), page(CR?), cat(_General, Technical)

Explosives (Explosive Ordnance Disposal), IQ/A, tl(0-12), default(IQ - 5 - 2, SK:Explosives - 4), needs(DX = 12), page(CR?), cat(_General, Military, Police, Technical)
Explosives (Fireworks), IQ/A, tl(0-12), default(IQ - 5, SK:Chemistry - 3, SK:Explosives - 4), page(CR?), cat(_General, Military, Technical)
Explosives (Underwater Demolition), IQ/A, tl(0-12), default(IQ - 5, "SK:Explosives (Demolition)" - 2, SK:Explosives - 4), page(CR?), cat(_General, Military, Technical)

Intelligence Analysis, IQ/H, tl(0-12), default(IQ - 6, SK:Strategy - 6), page(CR?), cat(_General, Military, Police, Spy)

Leadership, IQ/A, default(IQ - 5), page(CR?), cat(_General, Military, Social)

Soldier, IQ/A, tl(0-12), default(IQ - 5), page(CR?), cat(_General, Military)

Strategy (Air), IQ/H, default(IQ - 6, SK:Intelligence Analysis - 6, SK:Tactics - 6, SK:Strategy - 4), page(CR?), cat(_General, Military)
Strategy (Land), IQ/H, default(IQ - 6, SK:Intelligence Analysis - 6, SK:Tactics - 6, SK:Strategy - 4), page(CR?), cat(_General, Military)
Strategy (Naval), IQ/H, default(IQ - 6, SK:Intelligence Analysis - 6, SK:Tactics - 6, SK:Strategy - 4), page(CR?), cat(_General, Military)
Strategy (Space), IQ/H, default(IQ - 6, SK:Intelligence Analysis - 6, SK:Tactics - 6, SK:Strategy - 4), page(CR?), cat(_General, Military)

Tactics, IQ/H, default(IQ - 6, SK:Strategy - 6), page(CR?), cat(_General, Military, Police)

<Natural Sciences>
Astronomy, IQ/H, tl(0-12), default(IQ - 6, SK:Astronomy), needs("SK:Mathematics (Applied)" = 1pts), page(CR?), cat(_General, Natural Sciences)
Astronomy (Observational), IQ/A, tl(0-12), basedon(Astronomy), optspec(1), default(IQ - 6), page(CR?), cat(_General, Natural Sciences)

Biology (Gaia), IQ/VH, tl(0-12), default(IQ - 6, "SK:Naturalist (Gaia)" - 6, SK:Biology - 4), page(CR?), cat(_General, Natural Sciences, Plant)
Biology (Gas Giants), IQ/VH, tl(0-12), default(IQ - 6, "SK:Naturalist (Gas Giants)" - 6, SK:Biology - 4), page(CR?), cat(_General, Natural Sciences, Plant)
Biology (Hostile Terrestrial), IQ/VH, tl(0-12), default(IQ - 6, "SK:Naturalist (Hostile Terrestrial)" - 6, SK:Biology - 4), page(CR?), cat(_General, Natural Sciences, Plant)
Biology (Ice Dwarfs), IQ/VH, tl(0-12), default(IQ - 6, "SK:Naturalist (Ice Dwarfs)" - 6, SK:Biology - 4), page(CR?), cat(_General, Natural Sciences, Plant)
Biology (Ice Worlds), IQ/VH, tl(0-12), default(IQ - 6, "SK:Naturalist (Ice Worlds)" - 6, SK:Biology - 4), page(CR?), cat(_General, Natural Sciences, Plant)
Biology (Rock Worlds), IQ/VH, tl(0-12), default(IQ - 6, "SK:Naturalist (Rock Worlds)" - 6, SK:Biology - 4), page(CR?), cat(_General, Natural Sciences, Plant)

Chemistry, IQ/H, tl(0-12), default(IQ - 6, SK:Alchemy - 3), page(CR?), cat(_General, Natural Sciences)

Geology (Temperate), IQ/H, tl(0-12), default(IQ - 6, "SK:Geography (Physical)" -4, SK:Prospecting - 5, SK:Geology - 4), page(CR?), cat(_General, Natural Sciences)
Geology (Gas Giants), IQ/H, tl(0-12), default(IQ - 6, "SK:Geography (Physical)" -4, SK:Prospecting - 5, SK:Geology - 4), page(CR?), cat(_General, Natural Sciences)
Geology (Hostile Terrestrial), IQ/H, tl(0-12), default(IQ - 6, "SK:Geography (Physical)" -4, SK:Prospecting - 5, SK:Geology - 4), page(CR?), cat(_General, Natural Sciences)
Geology (Ice Dwarfs), IQ/H, tl(0-12), default(IQ - 6, "SK:Geography (Physical)" -4, SK:Prospecting - 5, SK:Geology - 4), page(CR?), cat(_General, Natural Sciences)
Geology (Ice Worlds), IQ/H, tl(0-12), default(IQ - 6, "SK:Geography (Physical)" -4, SK:Prospecting - 5, SK:Geology - 4), page(CR?), cat(_General, Natural Sciences)
Geology (Rock Worlds), IQ/H, tl(0-12), default(IQ - 6, "SK:Geography (Physical)" -4, SK:Prospecting - 5, SK:Geology - 4), page(CR?), cat(_General, Natural Sciences)

Mathematics (Applied), IQ/H, tl(0-12), default(IQ - 6, SK:Engineer - 5, SK:Physics - 5, SK:Mathematics - 5), page(CR?), cat(_General, Natural Sciences)
Mathematics (Computer Science), IQ/H, tl(0-12), default(IQ - 6, SK:Computer Programming - 5, SK:Mathematics - 5), page(CR?), cat(_General, Natural Sciences)
Mathematics (Cryptology), IQ/H, tl(0-12), default(IQ - 6, SK:Cryptography - 5, SK:Mathematics - 5), page(CR?), cat(_General, Natural Sciences)
Mathematics (Pure), IQ/H, tl(0-12), default(IQ - 6, SK:Mathematics - 5), page(CR?), cat(_General, Natural Sciences)
Mathematics (Surveying), IQ/H, tl(0-12), default(IQ - 6, SK:Cartography - 3, SK:Navigation - 4, SK:Mathematics - 5), page(CR?), cat(_General, Natural Sciences, Technical)

Metallurgy, IQ/H, tl(0-12), default(SK:Chemistry - 5, SK:Jeweler - 8, SK:Smith - 8), page(CR?), cat(_General, Natural Sciences)

<Outdoor/Exploration>
Mount, DX/A, default(DX - 5), page(CR?), cat(_General, Animal, Athletic)

Naturalist, IQ/H, default(IQ - 6, SK:Biology - 3, SK:Naturalist - 4), page(CR?), cat(_General, Animal, Natural Sciences, Outdoor/Exploration, Plant),
	x(#InputToTag("You must specialize by planet:", nameext, "Earth", "Naturalist"))

Navigation (Air), IQ/A, tl(0-12), default(SK:Astronomy - 5, "SK:Navigation (Sea)" - 2, "SK:Navigation (Land)" - 2), page(CR?1), cat(_General, Outdoor/Exploration, Technical, Vehicle)
Navigation (Hyperspace), IQ/A, tl(0-12), default(SK:Astronomy - 4, "SK:Mathematics (Applied)" - 4, "SK:Navigation (Space)" - 5), page(CR?), cat(_General, Outdoor/Exploration, Technical, Vehicle)
Navigation (Land), IQ/A, tl(0-12), default(IQ - 5, SK:Cartography - 4, "SK:Mathematics (Surveying)" - 4, "SK:Navigation (Sea)" - 2, "SK:Navigation (Air)" - 2), page(CR?), cat(_General, Outdoor/Exploration, Technical, Vehicle)
Navigation (Sea), IQ/A, tl(0-12), default(SK:Astronomy - 5, "SK:Crewman (Surface Vessel)" - 5, "SK:Navigation (Air)" - 2, "SK:Navigation (Land)" - 2), page(CR?), cat(_General, Outdoor/Exploration, Technical, Vehicle)
Navigation (Space), IQ/A, tl(0-12), default(SK:Astronomy - 4, "SK:Mathematics (Applied)" - 4, "SK:Navigation (Hyperspace)" - 5), page(CR?), cat(_General, Outdoor/Exploration, Technical, Vehicle)

Prospecting, IQ/A, tl(0-12), default(IQ - 5, SK:Geology - 4), page(CR?), cat(_General, Outdoor/Exploration)

Riding ([Mount]), DX/A, default(DX - 5, SK:Riding - 10), page(CR?), cat(_General, Animal),
	x(#InputReplace("You must specialize by riding beast:", "[Mount]", " ", "Riding"))

Survival, Per/A, default(Per - 5, SK:Naturalist - 3), page(CR?), cat(_General, Outdoor/Exploration),
  x(#InputToTag("You must specialize by a particular terrain type:", nameext, , "Survival"))

Survival (Acid Wasteland), Per/A, page(CR?), cat(_General, Outdoor/Exploration)
Survival (Radioactive Wasteland), Per/A, page(CR?), cat(_General, Outdoor/Exploration)
Survival (Volcanic), Per/A, page(CR?),, cat(_General, Outdoor/Exploration)
Survival (Geothermal), Per/A, page(CR?),, cat(_General, Outdoor/Exploration)

* Land Survival skills
Survival (Arctic), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Desert)" - 3, "SK:Survival (Island/Beach)" - 3, "SK:Survival (Jungle)" - 3, "SK:Survival (Mountain)" - 3, "SK:Survival (Plains)" - 3, "SK:Survival (Swampland)" - 3, "SK:Survival (Woodlands)" - 3), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Desert), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Arctic)" - 3, "SK:Survival (Island/Beach)" - 3, "SK:Survival (Jungle)" - 3, "SK:Survival (Mountain)" - 3, "SK:Survival (Plains)" - 3, "SK:Survival (Swampland)" - 3, "SK:Survival (Woodlands)" - 3), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Island/Beach), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Tropical Lagoon)" - 4, "SK:Survival (Arctic)" - 3, "SK:Survival (Desert)" - 3, "SK:Survival (Jungle)" - 3, "SK:Survival (Mountain)" - 3, "SK:Survival (Plains)" - 3, "SK:Survival (Swampland)" - 3, "SK:Survival (Woodlands)" - 3), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Jungle), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Arctic)" - 3, "SK:Survival (Desert)" - 3, "SK:Survival (Island/Beach)" - 3, "SK:Survival (Mountain)" - 3, "SK:Survival (Plains)" - 3, "SK:Survival (Swampland)" - 3, "SK:Survival (Woodlands)" - 3), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Mountain), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Arctic)" - 3, "SK:Survival (Desert)" - 3, "SK:Survival (Island/Beach)" - 3, "SK:Survival (Jungle)" - 3, "SK:Survival (Plains)" - 3, "SK:Survival (Swampland)" - 3, "SK:Survival (Woodlands)" - 3), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Plains), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Arctic)" - 3, "SK:Survival (Desert)" - 3, "SK:Survival (Island/Beach)" - 3, "SK:Survival (Jungle)" - 3, "SK:Survival (Mountain)" - 3, "SK:Survival (Swampland)" - 3, "SK:Survival (Woodlands)" - 3), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Swampland), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (River/Stream)" - 4, "SK:Survival (Arctic)" - 3, "SK:Survival (Desert)" - 3, "SK:Survival (Island/Beach)" - 3, "SK:Survival (Jungle)" - 3, "SK:Survival (Mountain)" - 3, "SK:Survival (Plains)" - 3, "SK:Survival (Woodlands)" - 3), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Woodlands), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Arctic)" - 3, "SK:Survival (Desert)" - 3, "SK:Survival (Island/Beach)" - 3, "SK:Survival (Jungle)" - 3, "SK:Survival (Mountain)" - 3, "SK:Survival (Plains)" - 3, "SK:Survival (Swampland)" - 3), page(CR?), cat(_General, Outdoor/Exploration)

* Aquatic Survival skills
Survival (Bank), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Deep Ocean Vent)" - 4, "SK:Survival (Fresh-Water Lake)" - 4, "SK:Survival (Open Ocean)" - 4, "SK:Survival (Reef)" - 4, "SK:Survival (River/Stream)" - 4, "SK:Survival (Salt-Water Sea)" - 4, "SK:Survival (Tropical Lagoon)" - 4), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Deep Ocean Vent), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Bank)" - 4, "SK:Survival (Fresh-Water Lake)" - 4, "SK:Survival (Open Ocean)" - 4, "SK:Survival (Reef)" - 4, "SK:Survival (River/Stream)" - 4, "SK:Survival (Salt-Water Sea)" - 4, "SK:Survival (Tropical Lagoon)" - 4), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Fresh-Water Lake), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Bank)" - 4, "SK:Survival (Deep Ocean Vent)" - 4, "SK:Survival (Open Ocean)" - 4, "SK:Survival (Reef)" - 4, "SK:Survival (River/Stream)" - 4, "SK:Survival (Salt-Water Sea)" - 4, "SK:Survival (Tropical Lagoon)" - 4), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Open Ocean), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Bank)" - 4, "SK:Survival (Deep Ocean Vent)" - 4, "SK:Survival (Fresh-Water Lake)" - 4, "SK:Survival (Reef)" - 4, "SK:Survival (River/Stream)" - 4, "SK:Survival (Salt-Water Sea)" - 4, "SK:Survival (Tropical Lagoon)" - 4), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Reef), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Bank)" - 4, "SK:Survival (Deep Ocean Vent)" - 4, "SK:Survival (Fresh-Water Lake)" - 4, "SK:Survival (Open Ocean)" - 4, "SK:Survival (River/Stream)" - 4, "SK:Survival (Salt-Water Sea)" - 4, "SK:Survival (Tropical Lagoon)" - 4), page(CR?), cat(_General, Outdoor/Exploration)
Survival (River/Stream), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Swampland)" - 4, "SK:Survival (Bank)" - 4, "SK:Survival (Deep Ocean Vent)" - 4, "SK:Survival (Fresh-Water Lake)" - 4, "SK:Survival (Open Ocean)" - 4, "SK:Survival (Reef)" - 4, "SK:Survival (Salt-Water Sea)" - 4, "SK:Survival (Tropical Lagoon)" - 4), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Salt-Water Sea), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Bank)" - 4, "SK:Survival (Deep Ocean Vent)" - 4, "SK:Survival (Fresh-Water Lake)" - 4, "SK:Survival (Open Ocean)" - 4, "SK:Survival (Reef)" - 4, "SK:Survival (River/Stream)" - 4, "SK:Survival (Tropical Lagoon)" - 4), page(CR?), cat(_General, Outdoor/Exploration)
Survival (Tropical Lagoon), Per/A, default(Per - 5, SK:Naturalist - 3, "SK:Survival (Island/Beach)" - 4, "SK:Survival (Bank)" - 4, "SK:Survival (Deep Ocean Vent)" - 4, "SK:Survival (Fresh-Water Lake)" - 4, "SK:Survival (Open Ocean)" - 4, "SK:Survival (Reef)" - 4, "SK:Survival (River/Stream)" - 4, "SK:Survival (Salt-Water Sea)" - 4), page(CR?), cat(_General, Outdoor/Exploration)

<Plant>
Farming, IQ/A, tl(0-12), default(IQ - 5, SK:Biology - 5, SK:Gardening - 3), page(CR?), cat(_General, Plant)
Gardening, IQ/E, default(IQ - 4, SK:Farming - 3), page(CR?), cat(_General, Plant)
Herb Lore, IQ/VH, tl(0-12), needs(SK:Naturalist = 1pts), page(CR?), cat(_General, Occult/Magical, Plant)

<Police>
Body Language, Per/A, default(SK:Detect Lies - 4, SK:Psychology - 4), page(CR?), cat(_General, Police, Social, Spy),
	x(#InputToTag("You must specialize by species - Physiology Modifiers apply (p. CR?):", nameext, "Human", "Body Language"))

Detect Lies, Per/H, default(SK:Perception - 6, SK:Body Language - 4, SK:Psychology - 4), page(CR?), cat(_General, Police, Social, Spy)

Electronics Operation (Surveillance), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Repair (Surveillance)" - 5, "SK:Engineer (Electronics)" - 5, SK:Electronics Operation - 4), page(CR?), cat(_General, Police, Spy, Technical)

Forensics, IQ/H, tl(0-12), default(IQ - 6, SK:Criminology - 4), page(CR?), cat(_General, Police)

Search, Per/A, default(Per - 5, SK:Criminology - 5), page(CR?), cat(_General, Police, Spy)

<Repair/Maintenance>
Electronics Repair (Communications), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Operation (Communications)" - 3, "SK:Engineer (Electronics)" - 3, SK:Electronics Repair - 4), page(CR?), cat(_General, Repair/Maintenance)
Electronics Repair (Computers), IQ/A, tl(0-12), default(IQ - 5, "SK:Computer Operation" - 3, "SK:Engineer (Electronics)" - 3, SK:Electronics Repair - 4), page(CR?), cat(_General, Repair/Maintenance)
Electronics Repair (Force Shields), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Operation (Force Shields)" - 3, "SK:Engineer (Electronics)" - 3, SK:Electronics Repair - 4), page(CR?), cat(_General, Repair/Maintenance)
Electronics Repair (Media), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Operation (Media)" - 3, "SK:Engineer (Electronics)" - 3, SK:Electronics Repair - 4), page(CR?), cat(_General, Repair/Maintenance)
Electronics Repair (Medical), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Operation (Medical)" - 3, "SK:Engineer (Electronics)" - 3, SK:Electronics Repair - 4), page(CR?), cat(_General, Repair/Maintenance)
Electronics Repair (Scientific), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Operation (Scientific)" - 3, "SK:Engineer (Electronics)" - 3, SK:Electronics Repair - 4), page(CR?), cat(_General, Repair/Maintenance)
Electronics Repair (Security), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Operation (Security)" - 3, "SK:Engineer (Electronics)" - 3, SK:Electronics Repair - 4), page(CR?), cat(_General, Repair/Maintenance)
Electronics Repair (Sensors), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Operation (Sensors)" - 3, "SK:Engineer (Electronics)" - 3, SK:Electronics Repair - 4), page(CR?), cat(_General, Repair/Maintenance)
Electronics Repair (Sonar), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Operation (Sonar)" - 3, "SK:Engineer (Electronics)" - 3, SK:Electronics Repair - 4), page(CR?), cat(_General, Repair/Maintenance)
Electronics Repair (Surveillance), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Operation (Surveillance)" - 3, "SK:Engineer (Electronics)" - 3, SK:Electronics Repair - 4), page(CR?), cat(_General, Repair/Maintenance)

Mechanic ([Type]), IQ/A, tl(0-12), page(CR?), cat(_General, Repair/Maintenance), noresync(yes),
	default(IQ - 5, "SK:Engineer ([Type])" - 4, SK:Machinist - 5, SK:Mechanic - 4),
	x( #InputReplace("Choose a Machine, Motive System, Power Plant, or Vehicle type:", "[Type]", , "Mechanic") )

Mechanic (%examplelist%), IQ/A, tl(0-12), page(CR?), default(IQ - 5, "SK:Engineer (%examplelist%)" - 4, SK:Machinist - 5, SK:Mechanic - 4), cat(_General, Repair/Maintenance),
	x(#ChoiceList(_
			name(example),
			title(Mechanic: Choose a Mechanic Specialty),
			text(Choose a Mechanic Specialty from the list of examples provided:),
			picksallowed(exactly 1),
			method(bynumber),
			list(_
				Aerospace,
				Airspeeder,
				Autogyro,
				Battlesuits,
				Body Armor,
				Clockwork,
				Construction Equipment,
                                Combustion Engine,
				Droids,
				Fission Reactor,
				Flight Pack,
				Force Shields,
				Free-Flooding Sub,
				Fuel Cell,
				Fusion Reactor,
				Gas Turbine,
				Glider,
				Heavy Wheeled Vehicle,
				Hyperdrive,
				Hypermatter Reactor,
				Hypersail,
				Jet Engines,
				Large Powerboat,
				Large Sub,
				Legged Motive System,
				Light Airplane,
				Lighter-Than-Air,
				Lightsail,
				Lightspeed Drive,
				Locomotive,
				Low-G Wings,
				Magsail,
                                Maneuver Drives,
				Melee Weapons,
				Mini-Sub,
				Missile Weapons,
				Motorboat,
				Pod Racer,
				Repulsorlift,
				Robotics,
				Rockets,
				Sailboat,
				Small Arms,
				Solar Panel,
				Speeder,
				Speederbike,
				Starships,
				Swoop,
				Tracked Motive System,
				Tracked Vehicle,
				Ultralight Airplane,
				Unpowered Boat,
				Vehicular Armor,
				Wheeled Motive System _
			   )_
			)_
	), noresync(yes)

<Scholarly>
Literature, IQ/H, default(IQ - 6), page(CR?), cat(_General, Scholarly, Social Sciences/Humanities)

Research, IQ/A, tl(0-12), default(IQ - 5, SK:Writing - 3), needs(1 CA:Language Written = 2), page(CR?), cat(_General, Scholarly, Spy)

<Social>
Acting, IQ/A, IQ/A, default(IQ - 5, SK:Performance - 2, SK:Public Speaking - 5), page(CR?), cat(_General, Social, Spy)

Fortune-Telling, IQ/A, default(IQ - 5, "SK:Fast-Talk" - 3, SK:Occultism - 3), page(CR>), cat(_General, Social),
	x(#InputToTag("You must specialize in a particular method of Fortune-Telling:", nameext, , "Fortune-Telling"))

Fortune-Telling (Astrology), IQ/A, default(IQ - 5, "SK:Fast-Talk" - 3, SK:Occultism - 3), page(CR?), cat(_General, Social)
Fortune-Telling (Augury), IQ/A, default(IQ - 5, "SK:Fast-Talk" - 3, SK:Occultism - 3), page(CR?), cat(_General, Social)
Fortune-Telling (Crystal Gazing), IQ/A, default(IQ - 5, "SK:Fast-Talk" - 3, SK:Occultism - 3), page(CR?), cat(_General, Social)
Fortune-Telling (Dream Interpretation), IQ/A, default(IQ - 5, "SK:Fast-Talk" - 3, SK:Occultism - 3), page(CR?), cat(_General, Social)
Fortune-Telling (Palmistry), IQ/A, default(IQ - 5, "SK:Fast-Talk" - 3, SK:Occultism - 3), page(CR?), cat(_General, Social)

Savoir-Faire, IQ/E, default(IQ - 4), page(CR?), cat(_General, Knowledge, Social),
	x(#InputToTag("You must specialize in a subculture:", nameext, , "Savoir-Faire"))
Savoir-Faire (Crime Syndicate), IQ/E, default(IQ - 4), page(CR?), cat(_General, Criminal/Street, Knowledge, Social)
Savoir-Faire (Dojo), IQ/E, default(IQ - 4), page(CR?), cat(_General, Knowledge, Social)
Savoir-Faire (High Society), IQ/E, default(IQ - 4, "SK:Savoir-Faire (Servant)" - 2), page(CR?), cat(_General, Business, Knowledge, Social)
Savoir-Faire (Military), IQ/E, default(IQ - 4), page(CR?), cat(_General, Knowledge, Military, Social)
Savoir-Faire (Police), IQ/E, default(IQ - 4), page(CR?), cat(_General, Knowledge, Police, Social)
Savoir-Faire (Servant), IQ/E, default(IQ - 4, "SK:Savoir-Faire (High Society)" - 2), page(CR?), cat(_General, Everyman, Knowledge, Social)

Sex Appeal, HT/A, default(HT - 3), page(CR?), cat(_General, Social),
	x(#InputToTag("You must specialize by species:", nameext, "Human", "Erotic Art"))

<Social Sciences/Humanities>
Anthropology, IQ/H, default(IQ - 6, "SK:Paleontology (Paleoanthropology)" - 2, SK:Sociology - 3), page(CR?), cat(_General, Social Sciences/Humanities),
	x(#InputToTag("You must specialize in a particular species:", nameext, "Human", "Anthropology"))

Geography (Political), IQ/H, tl(0-12), default(IQ - 6, SK:Economics - 4, SK:Geography - 5), page(CR?), cat(_General, Social Sciences/Humanities)

Geography ([Regional]), IQ/H, tl(0-12), default(IQ - 6, "SK:Area Knowledge ([Regional])" - 6, SK:Geography - 5), page(CR?), cat(_General, Social Sciences/Humanities),
	x(#InputReplace("Please specify the region covered:", "[Regional]", "local", "Geography (Regional)")), noresync(yes)

Geography (Temperate), IQ/H, tl(0-12), default(IQ - 6, "SK:Geology (Temperate)" - 4, "SK:Meteorology (Temperate)" - 4, SK:Geography - 5), page(CR?), cat(_General, Social Sciences/Humanities)
Geography (Gas Giants), IQ/H, tl(0-12), default(IQ - 6, "SK:Geology (Gas Giants)" - 4, "SK:Meteorology (Gas Giants)" - 4, SK:Geography - 5), page(CR?), cat(_General, Social Sciences/Humanities)
Geography (Hostile Terrestrial), IQ/H, tl(0-12), default(IQ - 6, "SK:Geology (Hostile Terrestrial)" - 4, "SK:Meteorology (Hostile Terrestrial)" - 4, SK:Geography - 5), page(CR?), cat(_General, Social Sciences/Humanities)
Geography (Ice Dwarfs), IQ/H, tl(0-12), default(IQ - 6, "SK:Geology (Ice Dwarfs)" - 4, "SK:Meteorology (Ice Dwarfs)" - 4, SK:Geography - 5), page(CR?), cat(_General, Social Sciences/Humanities)
Geography (Ice Worlds), IQ/H, tl(0-12), default(IQ - 6, "SK:Geology (Ice Worlds)" - 4, "SK:Meteorology (Ice Worlds)" - 4, SK:Geography - 5), page(CR?), cat(_General, Social Sciences/Humanities)
Geography (Rock Worlds), IQ/H, tl(0-12), default(IQ - 6, "SK:Geology (Rock Worlds)" - 4, "SK:Meteorology (Rock Worlds)" - 4, SK:Geography - 5), page(CR?), cat(_General, Social Sciences/Humanities)

History, IQ/H, default(IQ - 6), page(CR?), cat(_General, Social Sciences/Humanities),
	x(#InputToTag("You must specialize in a limited geographical region, planet or system, or a single era:", nameext, , "History"))

Linguistics, IQ/H, page(CR?), cat(_General, Social Sciences/Humanities)

<Spy>
Invisibility Art, IQ/VH, needs(AD:Trained By A Master, SK:Stealth = 14), page(CR?), cat(_General, Spy)
Light Walk, DX/H, needs(AD:Trained By A Master, SK:Acrobatics = 14, SK:Stealth = 14), page(CR?), cat(_General, Spy)

<Technical>
Electronics Operation (Communications), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Repair (Communications)" - 5, "SK:Engineer (Electronics)" - 5, SK:Electronics Operation - 4), page(CR?), cat(_General, Technical)
Electronics Operation (Force Shields), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Repair (Force Shields)" - 5, "SK:Engineer (Electronics)" - 5, SK:Electronics Operation - 4), page(CR?), cat(_General, Technical)
Electronics Operation (Scientific), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Repair (Scientific)" - 5, "SK:Engineer (Electronics)" - 5, SK:Electronics Operation - 4), page(CR?), cat(_General, Technical)
Electronics Operation (Sensors), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Repair (Sensors)" - 5, "SK:Engineer (Electronics)" - 5, SK:Electronics Operation - 4), page(CR?), cat(_General, Technical)
Electronics Operation (Sonar), IQ/A, tl(0-12), default(IQ - 5, "SK:Electronics Repair (Sonar)" - 5, "SK:Engineer (Electronics)" - 5, SK:Electronics Operation - 4), page(CR?), cat(_General, Technical)

Freight Handling, IQ/A, tl(0-12), default(IQ - 5), page(CR?), cat(_General, Technical, Vehicle)

Hazardous Materials, IQ/A, tl(0-12), default(IQ - 5, SK:Hazardous Materials - 5), page(CR?), cat(_General, Technical),
	x(#InputToTag("You must specialize in a type of HazMat:", nameext, , "Hazardous Materials"))

Hazardous Materials (Biological), IQ/A, tl(0-12), default(IQ - 5, SK:Hazardous Materials - 5), page(CR?), cat(_General, Technical)
Hazardous Materials (Chemical), IQ/A, tl(0-12), default(IQ - 5, SK:Hazardous Materials - 5), page(CR?), cat(_General, Technical)
Hazardous Materials (Radioactive), IQ/A, tl(0-12), default(IQ - 5, SK:Hazardous Materials - 5), page(CR?), cat(_General, Technical)

<Vehicle>
Crewman (Airship), IQ/E, tl(0-12), default(IQ - 4), page(CR?), cat(_General, Vehicle)
Crewman (Surface Vessel), IQ/E, tl(0-12), default(IQ - 4), page(CR?), cat(_General, Vehicle)
Crewman (Spacecraft), IQ/E, tl(0-12), default(IQ - 4), page(CR?), cat(_General, Vehicle)
Crewman (Submergible), IQ/E, tl(0-12), default(IQ - 4), page(CR?), cat(_General, Vehicle)

Driving (Construction Equipment), DX/A, tl(0-12), default(DX - 5, IQ - 5, SK:Driving - 5), page(CR?), cat(_General, Vehicle)
Driving (Groundcar), DX/A, tl(0-12), default(DX - 5, IQ - 5, "SK:Driving (Heavy Wheeled)" - 2, SK:Driving - 4), page(CR?), cat(_General, Vehicle)
Driving (Halftrack), DX/A, tl(0-12), default(DX - 5, IQ - 5, "SK:Driving (Tracked)" - 2, SK:Driving - 4), page(CR?), cat(_General, Vehicle)
Driving (Heavy Wheeled), DX/A, tl(0-12), default(DX - 5, IQ - 5, "SK:Driving (Automobile)" - 2, SK:Driving - 4), page(CR?), cat(_General, Vehicle)
Driving (Locomotive), DX/A, tl(0-12), default(DX - 5, IQ - 5, SK:Driving - 5), page(CR?), cat(_General, Vehicle)
Driving (Tracked), DX/A, tl(0-12), default(DX - 5, IQ - 5, "SK:Driving (Halftrack)" - 2, SK:Driving - 4), page(CR?), cat(_General, Vehicle)
Driving (Walker), DX/A, tl(0-12), default(DX - 5, IQ - 5, SK:Battlesuit - 3, SK:Driving - 5), page(CR?), cat(_General, Vehicle)
Driving (Wheeled Bike), DX/A, tl(0-12), default(DX - 5, IQ - 5, SK:Bicycling - 4), page(CR?), cat(_General, Vehicle)

Piloting (Aerospace), DX/A, tl(0-12), default(IQ - 6, SK:Piloting - 4), page(CR?), cat(_General, Vehicle)
Piloting (Airspeeder), DX/A, tl(0-12), default(IQ - 6, "SK:Piloting (Aerospace)" - 4, SK:Piloting - 5), page(CR?), cat(_General, Vehicle)
Piloting (Capital), DX/A, tl(0-12), default(IQ-6, "SK:Piloting (Aerospace)" -4, "SK:Piloting (Airspeeder)" -4, "SK:Piloting (Fighter/Bomber)" -2, "SK:Piloting (Freighter/Transport)" -2, "SK:Piloting (Utility Craft)" -2), page(CR?), cat(_General, Vehicle)
Piloting (Fighter/Bomber), DX/A, tl(0-12), default(IQ-6, "SK:Piloting (Aerospace)" -4, "SK:Piloting (Airspeeder)" -4, "SK:Piloting (Capital)" -2, "SK:Piloting (Freighter/Transport)" -2, "SK:Piloting (Utility Craft)" -2), page(CR?), cat(_General, Vehicle)
Piloting (Flight Pack), DX/A, tl(0-12), default(IQ - 6, SK:Piloting - 5), page(CR?), cat(_General, Vehicle)
Piloting (Freighter/Transport), DX/A, tl(0-12), default(IQ-6, "SK:Piloting (Aerospace)" -4, "SK:Piloting (Airspeeder)" -4, "SK:Piloting (Fighter/Bomber)" -2, "SK:Piloting (Capital)" -2, "SK:Piloting (Utility Craft)" -2), page(CR?), cat(_General, Vehicle)
Piloting (Glider), DX/A, tl(0-12), default(IQ - 6, SK:Piloting - 4), page(CR?), cat(_General, Vehicle)
Piloting (Lightsail), DX/A, tl(0-12), default(IQ - 6, "SK:Piloting (Capital)" -2, "SK:Piloting (Fighter/Bomber)" -2, "SK:Piloting (Freighter/Transport)" -2, "SK:Piloting (Utility Craft)" -2), page(CR?), cat(_General, Vehicle)
Piloting (Low-G Wings), DX/A, tl(0-12), default(IQ - 6, "SK:Piloting (Glider)" - 4), page(CR?), cat(_General, Vehicle)
Piloting (RPV), DX/A, tl(0-12), default(IQ-6), page(CR?), cat(_General, Vehicle)
Piloting (Speeder), DX/A, tl(0-12), default(IQ-6, "SK:Piloting (Airspeeder)" -4, "SK:Piloting (Speeder Bike)" -2, Driving (Groundcar)" -4), page(CR?), cat(_General, Vehicle)
Piloting (Speeder Bike), DX/A, tl(0-12), default(IQ-6, "SK:Piloting (Speeder)" -2, "SK:Piloting (Airspeeder)" -4, Driving (Wheeled Bike)" -4), page(CR?), cat(_General, Vehicle)
Piloting (Utility Craft), DX/A, tl(0-12), default(IQ-6, "SK:Piloting (Aerospace)" -4, "SK:Piloting (Airspeeder)" -4, "SK:Piloting (Fighter/Bomber)" -2, "SK:Piloting (Freighter/Transport)" -2, "SK:Piloting (Capital)" -2), page(CR?), cat(_General, Vehicle)

Shiphandling (Airship), IQ/H, tl(0-12), default(IQ - 6, "SK:Crewman (Airship)" - 5, "SK:Piloting (Lighter-Than-Air)" - 5), needs("SK:Crewman (Airship)", SK:Leadership, "SK:Navigation (Air)"), page(CR?), cat(_General, Vehicle)
Shiphandling (Surface Vessel), IQ/H, tl(0-12), default(IQ - 6, "SK:Crewman (Surface Vessel)" - 5, "SK:Boating (Sailboat)" - 5), needs("SK:Crewman (Surface Vessel)", SK:Leadership, "SK:Navigation (Sea)"), page(CR?), cat(_General, Vehicle)
Shiphandling (Spaceship), IQ/H, tl(0-12), default(IQ - 6, "SK:Crewman (Spacecraft)" - 5, "SK:Piloting (Aerospace)" - 5, "SK:Piloting (Capital)" - 5, "SK:Piloting (Fighter/Bomber)" - 5, "SK:Piloting (Freighter/Transport)" - 5, "SK:Piloting (Lightsail)" - 5, "SK:Piloting (Utility Craft)" - 5), needs("SK:Crewman (Spacecraft)", SK:Leadership, "SK:Navigation (Space)"), page(CR?), cat(_General, Vehicle)
Shiphandling (Starship), IQ/H, tl(0-12), default(IQ - 6, "SK:Crewman (Spacecraft)" - 5, "SK:Piloting (Aerospace)" - 5, "SK:Piloting (Capital)" - 5, "SK:Piloting (Fighter/Bomber)" - 5, "SK:Piloting (Freighter/Transport)" - 5, "SK:Piloting (Lightsail)" - 5, "SK:Piloting (Utility Craft)" - 5), needs("SK:Crewman (Spacecraft)", SK:Leadership, "SK:Navigation (Hyperspace)"), page(CR?), cat(_General, Vehicle)
Shiphandling (Submergible), IQ/H, tl(0-12), default(IQ - 6, "SK:Crewman (Submergible)" - 5, "SK:Submergible (Large Sub)" - 5), needs("SK:Crewman (Submergible)", SK:Leadership, "SK:Navigation (Sea)"), page(CR?), cat(_General, Vehicle)

<Combat Techniques - Realistic>
Acrobatic Stand (Acrobatics), Tech/A, default("SK:Acrobatics::level" - 6), needs(SK:Acrobatics), upto(prereq), page(CR?)
Acrobatic Stand ([Skill]), Tech/A, default("SK:[Skill]::level" - 6), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Acrobatic Stand"))

Aggressive Parry (Brawling), Tech/H, default("SK:Brawling::parrylevel" - 1), needs(SK:Brawling), upto("SK:Brawling::parrylevel"), page(CR?), parryat(%level),
	mods(Combat Techniques Punch), damage(thr-@max(4,2+@basethdice(ST:Punch)) + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Punch) else 0)), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(0), skillused(Aggressive Parry (Brawling)), damagebasedon(ST:Punch)
Aggressive Parry (Punching), Tech/H, default("SK:Punching::parrylevel" - 1), needs(SK:Punching), upto("SK:Punching::parrylevel"), page(CR?), parryat(%level),
	mods(Combat Techniques Punch), damage(thr-@max(4,2+@basethdice(ST:Punch)) + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + @if("SK:Punching::level" = ST:DX+1 then @basethdice(ST:Punch) else @if("SK:Punching::level" > ST:DX+1 then 2 * @basethdice(ST:Punch) else 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(0), skillused(Aggressive Parry (Punching)), damagebasedon(ST:Punch)
Aggressive Parry (Striking), Tech/H, default("SK:Striking::parrylevel" - 1), needs(SK:Striking), upto("SK:Striking::parrylevel"), page(CR?), parryat(%level),
	mods(Combat Techniques Punch), damage(thr-@max(4,2+@basethdice(ST:Punch)) + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + @if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(0), skillused(Aggressive Parry (Striking)), damagebasedon(ST:Punch)
Aggressive Parry ([Skill]), Tech/H, needs(SK:[Skill]), page(CR?), parryat(%level),
	default("SK:[Skill]::parrylevel" - 1), needs(SK:[Skill]), upto("SK:[Skill]::parrylevel"),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Aggressive Parry")),
	mods(Combat Techniques Punch), damage(thr-@max(4,2+@basethdice(ST:Punch)) + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + @if(@sametext("Brawling","[Skill]") THEN @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Punch) else 0) ELSE @if(@sametext("Punching","[Skill]") THEN @if("SK:Punching::level" = ST:DX+1 then @basethdice(ST:Punch) else @if("SK:Punching::level" > ST:DX+1 then 2 * @basethdice(ST:Punch) else 0)) ELSE @if(@sametext("Striking","[Skill]") THEN @if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0)) ELSE 0)))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(0), skillused(Aggressive Parry ([Skill])), damagebasedon(ST:Punch)

Arm Lock (Grappling & Pinning), Tech/A, default("SK:Grappling & Pinning::level"), needs(SK:Grappling & Pinning), upto(prereq + 4), page(CR?)
Arm Lock (Grappling & Throwing), Tech/A, default("SK:Grappling & Throwing::level"), needs(SK:Grappling & Throwing), upto(prereq + 4), page(CR?), cat(Combat Techniques)
Arm Lock (Tonfa), Tech/A, default("SK:Tonfa::level"), needs(SK:Tonfa), upto(prereq + 4), page(CR?)
Arm Lock ([Melee Weapon]), Tech/A, default("SK:[Melee Weapon]::level"), needs(SK:[Melee Weapon]), upto(prereq + 4), page(CR?),
	x(#InputReplace("You must specialize by Melee Weapon Skill:", "[Melee Weapon]", "", "Arm Lock"))

Armed Grapple (Cloak), Tech/H, default("SK:Cloak::level"), needs(SK:Cloak), upto(prereq), page(CR?)
Armed Grapple ([Melee Weapon]), Tech/H, default("SK:[Melee Weapon]::level" - 2), needs(SK:[Melee Weapon]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Weapon Skill:", "[Melee Weapon]", "", "Armed Grapple"))

Attack from Above ([Melee Combat Skill]), Tech/A, default("SK:[Melee Combat Skill]::level" - 2), needs(SK:[Melee Combat Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Attack from Above"))

Axe Kick (Striking), Tech/H, default("SK:Striking::level" - 4), needs(SK:Striking), upto(prereq), page(CR?),
	mods(Combat Techniques Kick), damage(thr+@max(1,@int(@basethdice(ST:Kick)/2)) + @if("SK:Striking::level" = ST:DX then @basethdice(ST:Kick) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Kick) else 0))), damtype(cr), reach(C,1), parry(No), skillused(Axe Kick (Striking)), damagebasedon(ST:Kick)

Back Kick (Striking), Tech/H, default(SK:Striking::level - 4), needs(SK:Striking), upto(prereq), page(CR?)
Back Kick (Echani Art), Tech/H, default(SK:Echani Art::level - 4), needs(SK:Echani ARt), upto(prereq), page(CR?)
Back Kick (Echani Sport), Tech/H, default(SK:Echani Sport::level - 4), needs(SK:Echani Sport), upto(prereq), page(CR?)

Back Strike ([Melee Weapon]), Tech/H, default("SK:[Melee Weapon]::level" - 2), needs(SK:[Melee Weapon]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Weapon Skill:", "[Melee Weapon]", "", "Back Strike"))

Bind Weapon (Jitte/Sai), Tech/H, default("SK:Jitte/Sai::level" - 3), needs(SK:Jitte/Sai), upto(prereq), page(CR?)
Bind Weapon (Rapier), Tech/H, default("SK:Rapier::level" - 3), needs(SK:Rapier), upto(prereq), page(CR?)
Bind Weapon (Saber), Tech/H, default("SK:Saber::level" - 3), needs(SK:Saber), upto(prereq), page(CR?)
Bind Weapon ([Fencing Weapon Skill]), Tech/H, default("SK:[Fencing Weapon Skill]::level" - 3), needs(SK:[Fencing Weapon Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Fencing Weapon:", "[Fencing Weapon Skill]", "", "Bind Weapon"))

Breakfall ([Skill]), Tech/A, default("SK:[Skill]::level"), needs(SK:[Skill]), upto(prereq + 5), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Breakfall"))
Breakfall (Acrobatics), Tech/A, default("SK:Acrobatics::level"), needs(SK:Acrobatics), upto(prereq + 5), page(CR?)
Breakfall (Grappling & Pinning), Tech/A, default("SK:Grappling & Pinning::level"), needs(SK:Grappling & Pinning), upto(prereq + 5), page(CR?)
Breakfall (Grappling & Throwing), Tech/A, default("SK:Grappling & Throwing::level"), needs(SK:Grappling & Throwing), upto(prereq + 5), page(CR?)

Choke Hold (Grappling & Pinning), Tech/H, default(SK:Grappling & Pinning::level - 3), needs(SK:Grappling & Pinning), upto(prereq), page(CR?)
Choke Hold (Grappling & Throwing), Tech/H, default(SK:Grappling & Throwing::level - 2), needs(SK:Grappling & Throwing), upto(prereq), page(CR?)

Close Combat ([Melee Weapon]), Tech/H, default("SK:[Melee Weapon]::level" -%WeaponReachCostList%), needs(SK:[Melee Weapon]), upto(prereq -(%WeaponReachCostList% / -2)), page(CR?),
	x(#InputReplace("You must spcialize by Melee Weapon Skill:", "[Melee Weapon]", "", "Close Combat")),
x(#ChoiceList(_
			name(WeaponReach),
			title(Close Combat: Reach),
text(Select the maximum reach of a standard weapon used with the previously selected skill. Note that the standard reach may not be the same as the maximum reach of some weapons.),
			picksallowed(exactly 1),
			method(bynumber),
			list(_
				Reach 1=-4,
				Reach 2=-8,
				Reach 3=-12_
			   )_
		)_
	), noresync(yes)

Close Combat ([Ranged Weapon]), Tech/H, default("SK:[Ranged Weapon]::level" [Bulk]), needs(SK:[Ranged Weapon]), upto(prereq - (%WeaponReachCostList% / -2)), page(CR?),
	x(#InputReplace("You must spcialize by Ranged Weapon Skill:", "[Ranged Weapon]", "", "Close Combat")),
	x(#InputReplace("What is the Bulk penalty of the average weapon used with this skill:", "[Bulk]", "-1", "Close Combat"),
	), noresync(yes)

Counterattack ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::level" - 5), needs(SK:[Melee Combat Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Counterattack"))

Disarming ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::level"), needs(SK:[Melee Combat Skill]), upto(prereq + 5), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Disarming"))
Disarming ([Melee Combat Art Skill]), Tech/H, default("SK:[Melee Combat Art Skill]::level"), needs(SK:[Melee Combat Art Skill]), upto(prereq + 5), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Art Skill:", "[Melee Combat Art Skill]", " Art", "Disarming"))
Disarming ([Melee Combat Sport Skill]), Tech/H, default("SK:[Melee Combat Sport Skill]::level"), needs(SK:[Melee Combat Sport Skill]), upto(prereq + 5), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Sport Skill:", "[Melee Combat Sport Skill]", " Sport", "Disarming"))

Elbow Drop ([Skill]), Tech/H, default("SK:[Skill]::level" - 4), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Elbow Drop")),
	mods(Combat Techniques Punch), damage(thr+@max(2,@basethdice(ST:Punch)) + @if(@sametext("Brawling","[Skill]") THEN @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Punch) else 0) ELSE @if(@sametext("Punching","[Skill]") THEN @if("SK:Punching::level" = ST:DX+1 then @basethdice(ST:Punch) else @if("SK:Punching::level" > ST:DX+1 then 2 * @basethdice(ST:Punch) else 0)) ELSE @if(@sametext("Striking","[Skill]") THEN @if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0)) ELSE 0)))), damtype(cr), reach(C), parry(No), skillused(Elbow Drop ([Skill])), damagebasedon(ST:Punch)
Elbow Drop (Brawling), Tech/H, default("SK:Brawling::level" - 4), needs(SK:Brawling), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr+@max(2,@basethdice(ST:Punch)) + @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Punch) else 0)), damtype(cr), reach(C), parry(No), skillused(Elbow Drop (Brawling)), damagebasedon(ST:Punch)
Elbow Drop (Grappling & Pinning), Tech/H, default("SK:Grappling & Pinning::level" - 5), needs(SK:Grappling & Pinning), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr+@max(2,@basethdice(ST:Punch)) + @if("SK:Grappling & Pinning::level" = ST:DX+1 then @basethdice(ST:Punch) else @if("SK:Grappling & Pinning::level" > ST:DX+1 then 2 * @basethdice(ST:Punch) else 0))), damtype(cr), reach(C), parry(No), skillused(Elbow Drop (Grappling & Pinning)), damagebasedon(ST:Punch)
Elbow Drop (Brawling Art), Tech/H, default("SK:Brawling Art::level" - 4), needs(SK:Brawling Art), upto(prereq), page(CR?)
Elbow Drop (Wrestling Art), Tech/H, default("SK:Wrestling Art::level" - 5), needs(SK:Wrestling Art), upto(prereq), page(CR?)
Elbow Drop (Brawling Sport), Tech/H, default("SK:Brawling Sport::level" - 4), needs(SK:Brawling Sport), upto(prereq), page(CR?)
Elbow Drop (Wrestling Sport), Tech/H, default("SK:Wrestling Sport::level" - 5), needs(SK:Wrestling Sport), upto(prereq), page(CR?)

Elbow Strike (Brawling), Tech/A, default(SK:Brawling::level - 2), needs(SK:Brawling), upto(Prereq), page(CR?),
	damage(_
		 thr-1+@if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Punch) else 0) _
		 ), damtype(cr), reach(C), parry(No), skillused(Elbow Strike (Brawling))
Elbow Strike (Striking), Tech/A, default(SK:Striking::level - 2), needs(SK:Striking), upto(Prereq), page(CR?),
	damage(_
		 thr-1+@if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0)) _
		 ), damtype(cr), reach(C), parry(No), skillused(Elbow Strike (Striking))
Elbow Strike (Echani Art), Tech/A, default(SK:Echani Art::level - 2), needs(SK:Echani Art), upto(Prereq), page(CR?),
	damage(_
		 thr-1+@if("SK:Echani Art::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Echani Art::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0)) _
		 ), damtype(cr), reach(C), parry(No), skillused(Elbow Strike (Echani Art))
Elbow Strike (Echani Sport), Tech/A, default(SK:Echani Sport::level - 2), needs(SK:Echani Sport), upto(Prereq), page(CR?),
	damage(_
		 thr-1+@if("SK:Echani Sport::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Echani Sport::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0)) _
		 ), damtype(cr), reach(C), parry(No), skillused(Elbow Strike (Echani Sport))

Exotic Hand Strike ([Skill]), Tech/A, default("SK:[Skill]::level" - 1), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Exotic Hand Strike")),
	mods(Combat Techniques Punch), damage(thr+@if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + @if(@sametext("Brawling","[Skill]") THEN @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Punch) else 0) ELSE @if(@sametext("Punching","[Skill]") THEN @if("SK:Punching::level" = ST:DX+1 then @basethdice(ST:Punch) else @if("SK:Punching::level" > ST:DX+1 then 2 * @basethdice(ST:Punch) else 0)) ELSE @if(@sametext("Striking","[Skill]") THEN @if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0)) ELSE 0)))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Exotic Hand Strike ([Skill])), damagebasedon(ST:Punch)
Exotic Hand Strike (Striking), Tech/A, default("SK:Striking::level" - 1), needs(SK:Striking), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr+@if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + @if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Exotic Hand Strike (Striking)), damagebasedon(ST:Punch)
Exotic Hand Strike (Echani Art), Tech/A, default("SK:Echani Art::level" - 1), needs(SK:Echani Art), upto(prereq), page(CR?)
Exotic Hand Strike (Echani Sport), Tech/A, default("SK:Echani Sport::level" - 1), needs(SK:Echani Sport), upto(prereq), page(CR?)

Evade (Acrobatics), Tech/A, default("SK:Acrobatics::level"), needs(SK:Acrobatics), upto(prereq + 5), page(CR?)

Eye-Gouge ([Skill]), Tech/H, default("SK:[Skill]::level" - 5), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Eye-Gouge")),
	mods(Combat Techniques Punch), damage(thr-4 + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Eye-Gouge ([Skill])), damagebasedon(ST:Punch)
Eye-Gouge (Brawling), Tech/H, default("SK:Brawling::level" - 5), needs(SK:Brawling), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr-4 + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Eye-Gouge (Brawling)), damagebasedon(ST:Punch)
Eye-Gouge (Grappling & Pinning), Tech/H, default("SK:Grappling & Pinning::level" - 5), needs(SK:Grappling & Pinning), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr-4 + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Eye-Gouge (Grappling & Pinning)), damagebasedon(ST:Punch)
Eye-Gouge (Grappling & Throwing), Tech/H, default("SK:Grappling & Throwing::level" - 5), needs(SK:Grappling & Throwing), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr-4 + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Eye-Gouge (Grappling & Throwing)), damagebasedon(ST:Punch)
Eye-Gouge (Brawling Art), Tech/H, default("SK:Brawling Art::level" - 5), needs(SK:Brawling Art), upto(prereq), page(CR?)
Eye-Gouge (Wrestling Art), Tech/H, default("SK:Wrestling Art::level" - 5), needs(SK:Wrestling Art), upto(prereq), page(CR?)
Eye-Gouge (Brawling Sport), Tech/H, default("SK:Brawling Sport::level" - 5), needs(SK:Brawling Sport), upto(prereq), page(CR?)
Eye-Gouge (Wrestling Sport), Tech/H, default("SK:Wrestling Sport::level" - 5), needs(SK:Wrestling Sport), upto(prereq), page(CR?)

Eye-Rake ([Skill]), Tech/H, default("SK:[Skill]::level" - 5), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Eye-Rake")),
	mods(Combat Techniques Punch), damage(thr-1 + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Eye-Rake ([Skill])), damagebasedon(ST:Punch)
Eye-Rake (Brawling), Tech/H, default("SK:Brawling::level" - 5), needs(SK:Brawling), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr-1 + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Eye-Rake (Brawling)), damagebasedon(ST:Punch)
Eye-Rake (Striking), Tech/H, default("SK:Striking::level" - 5), needs(SK:Striking), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr-1 + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Eye-Rake (Striking)), damagebasedon(ST:Punch)
Eye-Rake (Brawling Art), Tech/H, default("SK:Brawling Art::level" - 5), needs(SK:Brawling Art), upto(prereq), page(CR?)
Eye-Rake (Echani Art), Tech/H, default("SK:Echani Art::level" - 5), needs(SK:Echanie Art), upto(prereq), page(CR?)
Eye-Rake (Brawling Sport), Tech/H, default("SK:Brawling Sport::level" - 5), needs(SK:Brawling Sport), upto(prereq), page(CR?)
Eye-Rake (Echani Sport), Tech/H, default("SK:Echani Sport::level" - 5), needs(SK:Echani Sport), upto(prereq), page(CR?)

Feint ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::level"), needs(SK:[Melee Combat Skill]), upto(prereq + 4), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Feint"))
Feint ([Melee Combat Art Skill]), Tech/H, default("SK:[Melee Combat Art Skill]::level"), needs(SK:[Melee Combat Art Skill]), upto(prereq + 4), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Art Skill:", "[Melee Combat Art Skill]", " Art", "Feint"))
Feint ([Melee Combat Sport Skill]), Tech/H, default("SK:[Melee Combat Sport Skill]::level"), needs(SK:[Melee Combat Sport Skill]), upto(prereq + 4), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Sport Skill:", "[Melee Combat Sport Skill]", " Sport", "Feint"))

Finger Lock ([Skill]), Tech/H, default("SK:[Skill]::level" - 3), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Finger Lock"))
Finger Lock (Grappling & Pinning), Tech/H, default("SK:Arm Lock (Grappling & Pinning)::level" - 3), needs(SK:Arm Lock (Grappling & Pinning)), upto(Prereq), page(CR?)
Finger Lock (Grappling & Throwing), Tech/H, default("SK:Arm Lock (Grappling & Throwing)::level" - 3), needs(SK:Arm Lock (Grappling & Throwing)), upto(Prereq), page(CR?)

Finger Lock (Arm Lock (Grappling & Pinning)), Tech/H, default("SK:Arm Lock (Grappling & Pinning)::level" - 3), needs(SK:Arm Lock (Grappling & Pinning)), upto(prereq), page(CR?)
Finger Lock (Arm Lock (Grappling & Throwing)), Tech/H, default("SK:Arm Lock (Grappling & Throwing)::level" - 3), needs(SK:Arm Lock (Grappling & Throwing)), upto(prereq), page(CR?)
Finger Lock (Arm Lock (Wrestling Art)), Tech/H, default("SK:Arm Lock (Wrestling Art)::level" - 3), needs(SK:Arm Lock (Wrestling Art)), upto(prereq), page(CR?)
Finger Lock (Arm Lock (Wrestling Sport)), Tech/H, default("SK:Arm Lock (Wrestling Sport)::level" - 3), needs(SK:Arm Lock (Wrestling Sport)), upto(prereq), page(CR?)

Ground Fighting ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::level" -4), needs(SK:[Melee Combat Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Ground Fighting"))
Ground Fighting ([Melee Combat Art Skill]), Tech/H, default("SK:[Melee Combat Art Skill]::level" - 4), needs(SK:[Melee Combat Art Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Art Skill:", "[Melee Combat Art Skill]", " Art", "Ground Fighting"))
Ground Fighting ([Melee Combat Sport Skill]), Tech/H, default("SK:[Melee Combat Sport Skill]::level" - 4), needs(SK:[Melee Combat Sport Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Sport Skill:", "[Melee Combat Sport Skill]", " Sport", "Ground Fighting"))

Hammer Fist ([Skill]), Tech/A, default("SK:[Skill]::level" - 1), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Hammer Fist")),
	mods(Combat Techniques Punch), damage(thr-2 + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + @if(@sametext("Brawling","[Skill]") THEN @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Punch) else 0) ELSE @if(@sametext("Punching","[Skill]") THEN @if("SK:Punching::level" = ST:DX+1 then @basethdice(ST:Punch) else @if("SK:Punching::level" > ST:DX+1 then 2 * @basethdice(ST:Punch) else 0)) ELSE @if(@sametext("Striking","[Skill]") THEN @if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0)) ELSE 0)))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Hammer Fist ([Skill])), damagebasedon(ST:Punch)
Hammer Fist (Brawling), Tech/A, default("SK:Brawling::level" - 1), needs(SK:Brawling), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr-2 + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Punch) else 0)), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Hammer Fist (Brawling)), damagebasedon(ST:Punch)
Hammer Fist (Brawling Art), Tech/A, default("SK:Brawling Art::level" - 1), needs(SK:Brawling Art), upto(prereq), page(CR?)
Hammer Fist (Echani Art), Tech/A, default("SK:Echani Art::level" - 1), needs(SK:Echani Art), upto(prereq), page(CR?)
Hammer Fist (Brawling Sport), Tech/A, default("SK:Brawling Sport::level" - 1), needs(SK:Brawling Sport), upto(prereq), page(CR?)
Hammer Fist (Echani Sport), Tech/A, default("SK:Echani Sport::level" - 1), needs(SK:Echani Sport), upto(prereq), page(CR?)
Hammer Fist (Striking), Tech/A, default("SK:Striking::level" - 1), needs(SK:Striking), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr-2 + @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + @if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(Hammer Fist (Striking)), damagebasedon(ST:Punch)

Head Lock ([Skill]), Tech/H, default("SK:[Skill]::level" - 3), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Head Lock"))
Head Lock (Grappling & Pinning), Tech/H, default("SK:Grappling & Pinning::level" - 3), needs(SK:Grappling & Pinning), upto(prereq), page(CR?)
Head Lock (Grappling & Throwing), Tech/H, default("SK:Grappling & Throwing::level" - 3), needs(SK:Grappling & Throwing), upto(prereq), page(CR?)
Head Lock (Wrestling Art), Tech/H, default("SK:Wrestling Art::level" - 3), needs(SK:Wrestling Art), upto(prereq), page(CR?)
Head Lock (Wrestling Sport), Tech/H, default("SK:Wrestling Sport::level" - 3), needs(SK:Wrestling Sport), upto(prereq), page(CR?)

Jump Kick (Striking), Tech/H, default(SK:Striking::level - 4), needs(SK:Striking), upto(Prereq), page(CR?), mods(Punch/Kick),
	damage(_
		 thr+2 + _ 
			 @if("SK:Striking::level" = ST:DX then @basethdice(ST:Kick) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Kick) else 0)) + _
			 @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Hooves)::level" = 1 then @basethdice(ST:Kick) else 0))) _
		 ), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C,1-2), parry(No), skillused(Jump Kick (Striking))
Jump Kick (Echani Art), Tech/H, default(SK:Echani Art::level - 4), needs(SK:Echani Art), upto(Prereq), page(CR?), mods(Punch/Kick),
	damage(_
		 thr+2 + _ 
			 @if("SK:Echani Art::level" = ST:DX then @basethdice(ST:Kick) else @if("SK:Echani Art::level" > ST:DX then 2 * @basethdice(ST:Kick) else 0)) + _
			 @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Hooves)::level" = 1 then @basethdice(ST:Kick) else 0))) _
		 ), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C,1-2), parry(No), skillused(Jump Kick (Echani Art))
Jump Kick (Echani Sport), Tech/H, default(SK:Echani Sport::level - 4), needs(SK:Echani Sport), upto(Prereq), page(CR?), mods(Punch/Kick),
	damage(_
		 thr+2 + _ 
			 @if("SK:Echani Sport::level" = ST:DX then @basethdice(ST:Kick) else @if("SK:Echani Sport::level" > ST:DX then 2 * @basethdice(ST:Kick) else 0)) + _
			 @if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Hooves)::level" = 1 then @basethdice(ST:Kick) else 0))) _
		 ), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C,1-2), parry(No), skillused(Jump Kick (Striking))

Kicking ([Skill]), Tech/H, default("SK:[Skill]::level" - 2), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Kicking")),
	mods(Combat Techniques Kick), damage(thr+@if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Kick) else @if("AD:Claws (Hooves)::level" = 1 then @basethdice(ST:Kick) else 0))) + @if(@sametext("Brawling","[Skill]") THEN @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Kick) else 0) ELSE @if(@sametext("Striking","[Skill]") THEN @if("SK:Striking::level" = ST:DX then @basethdice(ST:Kick) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Kick) else 0)) ELSE 0))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C,1), parry(No), skillused(Kicking ([Skill])), damagebasedon(ST:Kick),
	gives(=$if(me::level >= ST:DX-2 THEN nobase) to ST:Kick::reach$)
Kicking (Brawling), Tech/H, default(SK:Brawling::level - 2), needs(SK:Brawling), upto(Prereq), page(CR?),
	gives(=$if(me::level >= ST:DX-2 THEN nobase) to ST:Kick::reach$)
Kicking (Striking), Tech/H, default(SK:Striking::level - 2), needs(SK:Striking), upto(Prereq), page(CR?),
	gives(=$if(me::level >= ST:DX-2 THEN nobase) to ST:Kick::reach$)
Kicking (Brawling Art), Tech/H, default("SK:Brawling Art::level" - 2), needs(SK:Brawling Art), upto(prereq), page(CR?)
Kicking (Echani Art), Tech/H, default("SK:Echani Art::level" - 2), needs(SK:Echani Art), upto(prereq), page(CR?)
Kicking (Brawling Sport), Tech/H, default("SK:Brawling Sport::level" - 2), needs(SK:Brawling Sport), upto(prereq), page(CR?)
Kicking (Echani Sport), Tech/H, default("SK:Echani Sport::level" - 2), needs(SK:Echani Sport), upto(prereq), page(CR?)

Knee Drop ([Skill]), Tech/H, default("SK:[Skill]::level" - 3), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Knee Drop")),
	mods(Combat Techniques Punch), damage(thr+@max(2,@basethdice(ST:Kick)) + @if(@sametext("Brawling","[Skill]") THEN @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Kick) else 0) ELSE @if(@sametext("Striking","[Skill]") THEN @if("SK:Striking::level" = ST:DX then @basethdice(ST:Kick) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Kick) else 0)) ELSE 0))), damtype(cr), reach(C), parry(No), skillused(Knee Drop ([Skill])), damagebasedon(ST:Kick)
Knee Drop (Brawling), Tech/H, default("SK:Brawling::level" - 3), needs(SK:Brawling), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr+@max(2,@basethdice(ST:Kick)) + @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Kick) else 0)), damtype(cr), reach(C), parry(No), skillused(Knee Drop (Brawling)), damagebasedon(ST:Kick)
Knee Drop (Grappling & Pinning), Tech/H, default("SK:Grappling & Pinning::level" - 4), needs(SK:Grappling & Pinning), upto(prereq), page(CR?),
	mods(Combat Techniques Punch), damage(thr+@max(2,@basethdice(ST:Kick)) + @if("SK:Grappling & Pinning::level" = ST:DX+1 then @basethdice(ST:Kick) else @if("SK:Grappling & Pinning::level" > ST:DX+1 then 2 * @basethdice(ST:Kick) else 0))), damtype(cr), reach(C), parry(No), skillused(Knee Drop (Grappling & Pinning)), damagebasedon(ST:Kick)
Knee Drop (Brawling Art), Tech/H, default("SK:Brawling Art::level" - 3), needs(SK:Brawling Art), upto(prereq), page(CR?)
Knee Drop (Wrestling Art), Tech/H, default("SK:Wrestling Art::level" - 4), needs(SK:Wrestling Art), upto(prereq), page(CR?)
Knee Drop (Brawling Sport), Tech/H, default("SK:Brawling Sport::level" - 3), needs(SK:Brawling Sport), upto(prereq), page(CR?)
Knee Drop (Wrestling Sport), Tech/H, default("SK:Wrestling Sport::level" - 4), needs(SK:Wrestling Sport), upto(prereq), page(CR?)

Knee Strike ([Skill]), Tech/A, default("SK:[Skill]::level" - 1), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Knee Strike")),
	mods(Combat Techniques Punch), damage(thr+@if(@sametext("Brawling","[Skill]") THEN @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Kick) else 0) ELSE @if(@sametext("Echani","[Skill]") THEN @if("SK:Echani::level" = ST:DX then @basethdice(ST:Kick) else @if("SK:Echani::level" > ST:DX then 2 * @basethdice(ST:Kick) else 0)) ELSE 0))), damtype(cr), reach(C), parry(No), skillused(Knee Strike ([Skill])), damagebasedon(ST:Kick)
Knee Strike (Brawling), Tech/A, default(SK:Brawling::level - 1), needs(SK:Brawling), upto(Prereq), page(CR?),
	damage(_
		 thr+@if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Kick) else 0) _
		 ), damtype(cr), reach(C), parry(No), skillused(Knee Strike (Brawling)), damagebasedon(ST:Kick)
Knee Strike (Striking), Tech/A, default(SK:Striking::level - 1), needs(SK:Striking), upto(Prereq), page(CR?),
	damage(_
		 thr+@if("SK:Striking::level" = ST:DX then @basethdice(ST:Kick) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Kick) else 0)) _
		 ), damtype(cr), reach(C), parry(No), skillused(Knee Strike (Striking)), damagebasedon(ST:Kick)
Knee Strike (Brawling Art), Tech/A, default("SK:Brawling Art::level" - 1), needs(SK:Brawling Art), upto(prereq), page(CR?)
Knee Strike (Echani Art), Tech/A, default("SK:Echani Art::level" - 1), needs(SK:Echani Art), upto(prereq), page(CR?)
Knee Strike (Brawling Sport), Tech/A, default("SK:Brawling Sport::level" - 1), needs(SK:Brawling Sport), upto(prereq), page(CR?)
Knee Strike (Echani Sport), Tech/A, default("SK:Echani Sport::level" - 1), needs(SK:Echani Sport), upto(prereq), page(CR?)

Mounted Shooting ([Ranged Weapon]/[Mount/Vehicle]), Tech/H, default("SK:[Ranged Weapon]::level" - 4), needs(SK:[Ranged Weapon], SK:[Mount/VehicleSkill]), upto(prereq), page(CR?),
	x(_
		#InputReplace("You must specify the type of Mount or Vehicle (i.e. Car or Horse):", "[Mount/Vehicle]", "", "Mounted Shooting"),
		#InputReplace("You must specialize by Mount or Vehicle skill (i.e. Driving (Automobile) or Riding (Horse)):", "[Mount/VehicleSkill]", "", "Mounted Shooting"),
		#InputReplace("You must specialize by Ranged Weapon skill:", "[Ranged Weapon]", "", "Mounted Shooting")_
	)

Neck Snap ([Skill]), Tech/H, default("SK:[Skill]::level" - 4), needs(SK:[Skill]), upto(prereq + 3), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Neck Snap")),
	initmods(ST Based, +0, gives(+(ST:ST - ST:DX) to owner::level)),
	mods(Combat Techniques, Neck Snap), damage(sw), damtype(cr), reach(C), parry(No), skillused(Neck Snap ([Skill]))
Neck Snap (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?),
	mods(Combat Techniques Punch), damage(sw), damtype(cr), reach(C), parry(No), skillused(Neck Snap (ST))
Neck Snap Art (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?)
Neck Snap Sport (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?)

Retain Weapon ([Ranged Weapon]), Tech/H, default("ST:DX::score"), needs(ST:DX > 0), upto(ST:DX::score + 5), page(CR?),
	x(#InputReplace("You must specialize by Ranged Weapon Skill:", "[Ranged Weapon]", "", "Retain Weapon"))
Retain Weapon ([Melee Weapon]), Tech/H, default("SK:[Melee Weapon]::level"), needs(SK:[Melee Weapon]), upto(prereq + 5), page(CR?),
	x(#InputReplace("You must specialize by Melee Weapon Skill:", "[Melee Weapon]", "", "Retain Weapon"))

Spinning Punch ([Skill]), Tech/H, default("SK:[Skill]::level" - 2), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Spinning Punch"))
Spinning Punch (Striking), Tech/H, default("SK:Striking::level" - 2), needs(SK:Striking), upto(prereq), page(CR?)
Spinning Punch (Echani Art), Tech/H, default("SK:Echani Art::level" - 2), needs(SK:Echani Art), upto(prereq), page(CR?)
Spinning Punch (Echani Sport), Tech/H, default("SK:Echani Sport::level" - 2), needs(SK:Echani Sport), upto(prereq), page(CR?)
Spinning Kick ([Skill]), Tech/H, default("SK:[Skill]::level" - 3), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Spinning Kick"))
Spinning Kick (Striking), Tech/H, default("SK:Striking::level" - 3), needs(SK:Striking), upto(prereq), page(CR?)
Spinning Kick (Echani Art), Tech/H, default("SK:Echani Art::level" - 3), needs(SK:Echani Art), upto(prereq), page(CR?)
Spinning Kick (Echani Sport), Tech/H, default("SK:Echani Sport::level" - 3), needs(SK:Echani Sport), upto(prereq), page(CR?)
Spinning Strike ([Melee Weapon]), Tech/H, default("SK:[Melee Weapon]::level" - 2), needs(SK:[Melee Weapon]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Weapon Skill:", "[Melee Weapon]", "", "Spinning Strike"))
Spinning Strike ([Melee Weapon Art]), Tech/H, default("SK:[Melee Weapon Art]::level" - 2), needs(SK:[Melee Weapon Art]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Weapon Skill:", "[Melee Weapon Art]", " Art", "Spinning Strike"))
Spinning Strike ([Melee Weapon Sport]), Tech/H, default("SK:[Melee Weapon Sport]::level" - 2), needs(SK:[Melee Weapon Sport]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Weapon Skill:", "[Melee Weapon Sport]", " Sport", "Spinning Strike"))

Springing Attack ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::level" - 2), needs(SK:[Melee Combat Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Springing Attack"))

Stamp Kick ([Skill]), Tech/H, default("SK:[Skill]::level" - 3), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Stamp Kick")),
	mods(Combat Techniques Kick), damage(thr+1 + @if(@sametext("Brawling","[Skill]") THEN @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Kick) else 0) ELSE @if(@sametext("Striking","[Skill]") THEN @if("SK:Striking::level" = ST:DX then @basethdice(ST:Kick) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Kick) else 0)) ELSE 0))), damtype(cr), reach(C,1), parry(No), skillused(Stamp Kick ([Skill])), damagebasedon(ST:Kick)
Stamp Kick (Brawling), Tech/H, default("SK:Brawling::level" - 3), needs(SK:Brawling), upto(prereq), page(CR?),
	mods(Combat Techniques Kick), damage(thr+1 + @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Kick) else 0)), damtype(cr), reach(C,1), parry(No), skillused(Stamp Kick (Brawling)), damagebasedon(ST:Kick)
Stamp Kick (Striking), Tech/H, default("SK:Striking::level" - 3), needs(SK:Striking), upto(prereq), page(CR?),
	mods(Combat Techniques Kick), damage(thr+1 + @if("SK:Striking::level" = ST:DX then @basethdice(ST:Kick) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Kick) else 0))), damtype(cr), reach(C,1), parry(No), skillused(Stamp Kick (Striking)), damagebasedon(ST:Kick)
Stamp Kick (Brawling Art), Tech/H, default("SK:Brawling Art::level" - 3), needs(SK:Brawling Art), upto(prereq), page(CR?)
Stamp Kick (Echani Art), Tech/H, default("SK:Echani Art::level" - 3), needs(SK:Echani Art), upto(prereq), page(CR?)
Stamp Kick (Brawling Sport), Tech/H, default("SK:Brawling Sport::level" - 3), needs(SK:Brawling Sport), upto(prereq), page(CR?)
Stamp Kick (Echani Sport), Tech/H, default("SK:Echani Sport::level" - 3), needs(SK:Echani Sport), upto(prereq), page(CR?)

Sweeping Kick (Grappling & Pinning), Tech/H, default(SK:Grappling & Pinning::level - 3), needs(SK:Grappling & Pinning), upto(Prereq), page(CR?)
Sweeping Kick (Grappling & Throwing), Tech/H, default(SK:Grappling & Throwing::level - 3), needs(SK:Grappling & Throwing), upto(Prereq), page(CR?)
Sweeping Kick (Striking), Tech/H, default(SK:Striking::level - 3), needs(SK:Striking), upto(Prereq), page(CR?)

Sweep ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::level" - 3), needs(SK:[Melee Combat Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Sweep"))
Sweep ([Melee Combat Art Skill]), Tech/H, default("SK:[Melee Combat Art Skill]::level" - 3), needs(SK:[Melee Combat Art Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Art Skill:", "[Melee Combat Art Skill]", " Art", "Sweep"))
Sweep ([Melee Combat Sport Skill]), Tech/H, default("SK:[Melee Combat Sport Skill]::level" - 3), needs(SK:[Melee Combat Sport Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Sport Skill:", "[Melee Combat Sport Skill]", " Sport", "Sweep"))

Takedown Defense ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::level" -4), needs(SK:[Melee Combat Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Takedown Defense"))
Takedown Defense ([Melee Combat Art Skill]), Tech/H, default("SK:[Melee Combat Art Skill]::level" - 4), needs(SK:[Melee Combat Art Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Art Skill:", "[Melee Combat Art Skill]", " Art", "Takedown Defense"))
Takedown Defense ([Melee Combat Sport Skill]), Tech/H, default("SK:[Melee Combat Sport Skill]::level" - 4), needs(SK:[Melee Combat Sport Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Sport Skill:", "[Melee Combat Sport Skill]", " Sport", "Takedown Defense"))

Targeted Attack ([Skill] [Attack]/[Target]), Tech/H, needs(SK:[Skill]), page(CR?),
	default("SK:[Skill]::level" + ([Attack Penalty] + [Hit Location Penalty]), "SK:[Attack] ([Skill])::level" + [Hit Location Penalty]),
	upto(@max("SK:[Skill]" - @int(-@if(@sametext("[Attack]", "Grapple") THEN 0 ELSE 0.5)  * ([Attack Penalty] + [Hit Location Penalty])), "SK:[Attack] ([Skill])" -  @int(-@if(@sametext("[Attack]", "Grapple") THEN 0 ELSE 0.5) * [Hit Location Penalty]))),
	x(_
		#InputReplace("Please specify the Skill:", "[Skill]", "", "Targeted Attack"),
		#InputReplace("Please Specify the Attack (e.g. Swing, Punch, Grapple, etc):", "[Attack]", "", "Targeted Attack"),
		#InputReplace("Please Specify the Attack Penalty (e.g. -2 for a Kick):", "[Attack Penalty]", "-0", "Targeted Attack"),
		#InputReplace("Please specify the Hit Location targeted by this Attack:", "[Target]", "", "Targeted Attack"),
		#InputReplace("Please specify the Hit Location Penalty:", "[Hit Location Penalty]", "-0", "Targeted Attack"),
		#Edit _
		)

Targeted Attack ([Ranged Weapon Skill]/[Target]), Tech/H, needs(SK:[Ranged Weapon Skill]), page(CR?), tl(0-12),
	default("SK:[Ranged Weapon Skill]::level" + [Hit Location Penalty], "SK:[Attack] ([Ranged Weapon Skill])::level" + [Hit Location Penalty]),
	upto("SK:[Ranged Weapon Skill]" - @int(-0.5 * [Hit Location Penalty])),
	x(_
		#InputReplace("Please specify the Skill:", "[Ranged Weapon Skill]", "", "Targeted Attack"),
		#InputReplace("Please specify the Hit Location targeted by this Attack:", "[Target]", "", "Targeted Attack"),
		#InputReplace("Please specify the Hit Location Penalty:", "[Hit Location Penalty]", "-0", "Targeted Attack"),
		#Edit _
		)

Uppercut ([Skill]), Tech/A, default("SK:[Skill]::level" - 1), needs(SK:[Skill]), upto(prereq), page(C R?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Uppercut")),
	mods(Combat Techniques Punch), damage(thr+@if("AD:Claws (Blunt Claws)::level" = 1 then @basethdice(ST:Punch) else @if("AD:Claws (Long Talons)::level" = 1 then @basethdice(ST:Punch) else 0)) + @if(@sametext("Brawling","[Skill]") THEN @if("SK:Brawling::level" > ST:DX+1 then @basethdice(ST:Punch) else 0) ELSE @if(@sametext("Punching","[Skill]") THEN @if("SK:Punching::level" = ST:DX+1 then @basethdice(ST:Punch) else @if("SK:Punching::level" > ST:DX+1 then 2 * @basethdice(ST:Punch) else 0)) ELSE @if(@sametext("Striking","[Skill]") THEN @if("SK:Striking::level" = ST:DX then @basethdice(ST:Punch) else @if("SK:Striking::level" > ST:DX then 2 * @basethdice(ST:Punch) else 0)) ELSE 0)))), damtype($if("AD:Claws (Sharp Claws)::level" = 1 THEN "cut" ELSE $if("AD:Claws (Talons)::level" = 1 THEN "cut/imp" ELSE $if("AD:Claws (Long Talons)::level" = 1 THEN "cut/imp" ELSE "cr")))), reach(C), parry(No), skillused(SK:Uppercut ([Skill])), damagebasedon(ST:Punch)

Wrist Lock (Grappling & Pinning), Tech/A, default("SK:Grappling & Pinning::level"), needs(SK:Grappling & Pinning), upto(prereq + 4), page(CR?)
Wrist Lock (Grappling & Throwing), Tech/A, default("SK:Grappling & Throwing::level"), needs(SK:Grappling & Throwing), upto(prereq + 4), page(CR?)
Wrist Lock (Tonfa), Tech/A, default("SK:Tonfa::level"), needs(SK:Tonfa), upto(prereq + 4), page(CR?)
Wrist Lock ([Melee Weapon]), Tech/A, default("SK:[Melee Weapon]::level"), needs(SK:[Melee Weapon]), upto(prereq + 4), page(CR?),
	x(#InputReplace("You must specialize by Melee Weapon Skill:", "[Melee Weapon]", "", "Wrist Lock"))

Wrench Arm ([Skill]), Tech/H, default("SK:[Skill]::level" - 4), needs(SK:[Skill]), upto(prereq + 3), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Wrench Arm")),
	mods(Combat Techniques Punch), damage(sw), damtype(cr), reach(C), parry(No), skillused(Wrench Arm ([Skill]))
Wrench Leg ([Skill]), Tech/H, default("SK:[Skill]::level" - 4), needs(SK:[Skill]), upto(prereq + 3), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Wrench Leg")),
	mods(Combat Techniques Punch), damage(sw), damtype(cr), reach(C), parry(No), skillused(Wrench Leg ([Skill]))
Wrench [Limb] ([Skill]), Tech/H, default("SK:[Skill]::level" - 4), needs(SK:[Skill]), upto(prereq + 3), page(CR?),
	x(#InputReplace("Please enter the type of Limb that can be Wrenched:", "[Limb]", , "Wrench Limb")),
	mods(Combat Techniques Punch), damage(sw), damtype(cr), reach(C), parry(No), skillused(Wrench [Limb] ([Skill]))
Wrench Spine ([Skill]), Tech/H, default("SK:[Skill]::level" - 4), needs(SK:[Skill]), upto(prereq + 3), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Wrench Spine")),
	mods(Combat Techniques Punch), damage(sw), damtype(cr), reach(C), parry(No), skillused(Wrench Spine ([Skill]))
Wrench Arm (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?),
	mods(Combat Techniques Punch), damage(sw), damtype(cr), reach(C), parry(No), skillused(Wrench Arm (ST))
Wrench Leg (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?),
	mods(Combat Techniques Punch), damage(sw), damtype(cr), reach(C), parry(No), skillused(Wrench leg (ST))
Wrench [Limb] (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?),
	x(#InputReplace("Please enter the type of Limb that can be Wrenched:", "[Limb]", , "Wrench Limb")),
	mods(Combat Techniques Punch), damage(sw), damtype(cr), reach(C), parry(No), skillused(Wrench [Limb] (ST))
Wrench Spine (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?),
	mods(Combat Techniques Punch), damage(sw), damtype(cr), reach(C), parry(No), skillused(Wrench Spine (ST))
Wrench Spine (Grappling & Pinning), Tech/H, default("SK:Grappling & Pinning::level" - 4), needs(SK:Grappling & Pinning), upto(prereq + 3), page(CR?), mods(Combat Techniques Punch), damage(sw), damtype(cr), reach(C), parry(No), skillused(Wrench Spine (Grappling & Pinning))
Wrench Arm Art (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?)
Wrench Leg Art (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?)
Wrench [Limb] Art (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?),
	x(#InputReplace("Please enter the type of Limb that can be Wrenched:", "[Limb Art]", , "Wrench Limb"))
Wrench Spine Art (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?)
Wrench Spine (Wrestling Art), Tech/H, default("SK:Wrestling Art::level" - 4), needs(SK:Wrestling Art), upto(prereq + 3), page(CR?)
Wrench Arm Sport (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?)
Wrench Leg Sport (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?)
Wrench [Limb] Sport (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?),
	x(#InputReplace("Please enter the type of Limb that can be Wrenched:", "[Limb Sport]", , "Wrench Limb"))
Wrench Spine Sport (ST), Tech/H, default("ST:ST::score" - 4), needs(ST:ST = 1), upto(prereq + 3), page(CR?)
Wrench Spine (Wrestling Sport), Tech/H, default("SK:Wrestling Sport::level" - 4), needs(SK:Wrestling Sport), upto(prereq + 3), page(CR?)

<Combat Techniques - Cinematic>
Backbreaker ([Skill]), Tech/H, default("SK:[Skill]::level" - 3), needs(SK:[Skill]), upto(prereq + 3), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Backbreaker"))
Backbreaker (Grappling & Pinning), Tech/H, default("SK:Grappling & Pinning::level" - 3), needs(SK:Grappling & Pinning), upto(prereq + 3), page(CR?)
Backbreaker (ST), Tech/H, default("ST:ST::score" - 3), needs(ST:ST = 1), upto(prereq + 3), page(CR?)
Backbreaker Art (ST), Tech/H, default("ST:ST::score" - 3), needs(ST:ST = 1), upto(prereq + 3), page(CR?)
Backbreaker (Wrestling Art), Tech/H, default("SK:Wrestling Art::level" - 3), needs(SK:Wrestling Art), upto(prereq + 3), page(CR?)
Backbreaker Sport (ST), Tech/H, default("ST:ST::score" - 3), needs(ST:ST = 1), upto(prereq + 3), page(CR?)
Backbreaker (Wrestling Sport), Tech/H, default("SK:Wrestling Sport::level" - 3), needs(SK:Wrestling Sport), upto(prereq + 3), page(CR?)

Binding (Grappling & Throwing), Tech/H, default("SK:Grappling & Throwing::level"), needs(SK:Grappling & Throwing), upto(prereq + 4), page(CR?)
Binding (Knot-Tying), Tech/H, default("SK:Knot-Tying::level"), needs(SK:Knot-Tying), upto(prereq + 4), page(CR?)

Dual-Weapon Attack (Beam Weapons (Pistol)), Tech/H, default("SK:Beam Weapons (Pistol)::level" - 4), needs(SK:Beam Weapons (Pistol)), upto(prereq), page(CR?)
Dual-Weapon Attack (Guns (Pistol)), Tech/H, default("SK:Guns (Pistol)::level" - 4, SK:Gun! - 4), needs(SK:Guns (Pistol) | SK:Gun!), upto(Prereq), page(CR?)
Dual-Weapon Attack (Bow), Tech/H, default("SK:Bow::level" - 4), needs(SK:Bow), upto(prereq), page(CR?)
Dual-Weapon Attack ([One-Handed Combat Skill]), Tech/H, default("SK:[One-Handed Combat Skill]::level" - 4), needs(SK:[One-Handed Combat Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by One-Handed Combat Skill:", "[One-Handed Combat Skill]", "", "Dual-Weapon Attack"))

Dual-Weapon Defense ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::parrylevel" - 1), needs(SK:[Melee Combat Skill]), upto("SK:[Melee Combat Skill]::parrylevel"), page(CR?), parryat(%level),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Dual-Weapon Defense"))

Fighting While Seated ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::level" - 2), needs(SK:[Melee Combat Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Fighting While Seated"))
Fighting While Seated ([Melee Combat Art Skill]), Tech/H, default("SK:[Melee Combat Art Skill]::level" - 2), needs(SK:[Melee Combat Art Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Art Skill:", "[Melee Combat Art Skill]", " Art", "Fighting While Seated"))
Fighting While Seated ([Melee Combat Sport Skill]), Tech/H, default("SK:[Melee Combat Sport Skill]::level" - 2), needs(SK:[Melee Combat Sport Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Sport Skill:", "[Melee Combat Sport Skill]", " Sport", "Fighting While Seated"))

Lethal Kick ([Skill]), Tech/H, default("SK:[Skill]::level" - 4), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Lethal Kick"))
Lethal Kick (Striking), Tech/H, default("SK:Striking::level" - 4), needs(SK:Striking), upto(prereq), page(CR?)
Lethal Kick (Echani Art), Tech/H, default("SK:Echani Art::level" - 4), needs(SK:Echani Art), upto(prereq), page(CR?)
Lethal Kick (Echani Sport), Tech/H, default("SK:Echani Sport::level" - 4), needs(SK:Echani Sport), upto(prereq), page(CR?)

Lethal Strike ([Skill]), Tech/H, default("SK:[Skill]::level" - 2), needs(SK:[Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Skill:", "[Skill]", "", "Lethal Strike"))
Lethal Strike (Striking), Tech/H, default("SK:Striking::level" - 2), needs(SK:Striking), upto(prereq), page(CR?)
Lethal Strike (Echani Art), Tech/H, default("SK:Echani Art::level" - 2), needs(SK:Echani Art), upto(prereq), page(CR?)
Lethal Strike (Echani Sport), Tech/H, default("SK:Echani Sport::level" - 2), needs(SK:Echani Sport), upto(prereq), page(CR?)

Pressure-Point Strike ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::level" - 2), needs(SK:[Melee Combat Skill], (SK:Pressure Points | SK:Pressure Secrets)), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Pressure-Point Strike"))
Pressure-Point Strike ([Melee Combat Art Skill]), Tech/H, default("SK:[Melee Combat Art Skill]::level" - 2), needs(SK:[Melee Combat Art Skill], (SK:Pressure Points | SK:Pressure Secrets)), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Art Skill:", "[Melee Combat Art Skill]", " Art", "Pressure-Point Strike"))
Pressure-Point Strike ([Melee Combat Sport Skill]), Tech/H, default("SK:[Melee Combat Sport Skill]::level" - 2), needs(SK:[Melee Combat Sport Skill], (SK:Pressure Points | SK:Pressure Secrets)), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Sport Skill:", "[Melee Combat Sport Skill]", " Sport", "Pressure-Point Strike"))

Timed Defense (Dodge), Tech/H, default("ST:Dodge::score" - 2), upto(ST:Dodge), page(CR?)
Timed Defense (Shield (Buckler)), Tech/H, default("SK:Shield (Buckler)::blocklevel" - 2), needs(SK:Shield (Buckler)), upto("SK:Shield (Buckler)::blocklevel"), page(CR?), blockat(%level)
Timed Defense (Shield (Shield)), Tech/H, default("SK:Shield (Shield)::blocklevel" - 2), needs(SK:Shield (Shield)), upto("SK:Shield (Shield)::blocklevel"), page(CR?), blockat(%level)
Timed Defense (Shield (Force)), Tech/H, default("SK:Shield (Force)::blocklevel" - 2), needs(SK:Shield (Force)), upto("SK:Shield (Force)::blocklevel"), page(CR?), blockat(%level)
Timed Defense ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::parrylevel" - 2), needs(SK:[Melee Combat Skill]), upto("SK:[Melee Combat Skill]::parrylevel"), page(CR?), parryat(%level),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Timed Defense"))

Whirlwind Attack ([Melee Combat Skill]), Tech/H, default("SK:[Melee Combat Skill]::level" - 5), needs(SK:[Melee Combat Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Skill:", "[Melee Combat Skill]", "", "Whirlwind Attack"))
Whirlwind Attack ([Melee Combat Art Skill]), Tech/H, default("SK:[Melee Combat Art Skill]::level" - 5), needs(SK:[Melee Combat Art Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Art Skill:", "[Melee Combat Art Skill]", " Art", "Whirlwind Attack"))
Whirlwind Attack ([Melee Combat Sport Skill]), Tech/H, default("SK:[Melee Combat Sport Skill]::level" - 5), needs(SK:[Melee Combat Sport Skill]), upto(prereq), page(CR?),
	x(#InputReplace("You must specialize by Melee Combat Sport Skill:", "[Melee Combat Sport Skill]", " Sport", "Whirlwind Attack"))

<Noncombat Techniques>


<Wildcard!>
Athletic!, DX/WC, page(CR?), description(Climbing, Lifting, Jumping, Running, Skating, Skiing, Sports, Swimming, Throwing, and all specialties of Acrobatics.), cat(_General, Wildcard!)

Detective!, IQ/WC, page(CR?), description(Criminology, Detect Lies, Electronics Operation (Security & Surveillance), Forensics, Interrogation, Law, Observation, Research, Savoir-Faire (Police), Search, Shadowing, Streetwise), cat(_General, Wildcard!)

Gearhead!, DX/WC, page(CR?), description(Carpentry, Electrician, Mathematics (Applied) and all specialties of Armoury, Electronics Repair, Engineer, Machinist, Mechanic), cat(_General, Wildcard!)

Guns!, DX/WC, page(CR?), description(Beam Weapons, Gunner, Guns, Liquid Projector), cat(_General, Wildcard!)

Science!, IQ/WC, page(CR?), description(Astronomy, Bioengineering, Biology, Chemistry, Engineer, Geology, Mathematics, Metallurgy, Meteorology, Naturalist, Paleontology, Physics, Psychology), cat(_General, Wildcard!)

*********************************************************************************************************************
[GROUPS]
*********************************************************************************************************************
<Conducting>
SK:Musical Instrument
SK:Singing

<Appeal>
ST:Appealing
ST:Unappealing

<3D Spatial Sense>
SK:Aerobatics
SK:Astrobatics
SK:Free Fall
SK:Navigation (Hyperspace)
SK:Navigation (Space)

<Absolute Direction>
SK:Body Sense
SK:Navigation (Air)
SK:Navigation (Land)
SK:Navigation (Sea)

<Alien Friend Gives>
SK:Diplomacy
SK:Expert Skill (Xenology)

<Alien Friend Conditionals>
SK:Anthropology
SK:History
SK:Psychology

<Animal Friend>
SK:Animal Handling
SK:Packing
SK:Riding
SK:Teamster
SK:Veterinary

<Artificer>
SK:Armoury
SK:Carpentry
SK:Electrician
SK:Electronics Repair
SK:Engineer
SK:Machinist
SK:Masonry
SK:Mechanic
SK:Smith

<Born Tactician>
SK:Expert Skill (Military Science)
SK:History (Military)
SK:Intelligence Analysis
SK:Leadership
SK:Savoir-Faire (Military)
SK:Soldier
SK:Strategy (Land)
SK:Tactics

<Business Acumen>
SK:Accounting
SK:Administration
SK:Economics
SK:Finance
SK:Gambling
SK:Market Analysis
SK:Merchant
SK:Propaganda

<Charisma>
SK:Fortune-Telling
SK:Leadership
SK:Panhandling
SK:Public Speaking

<Combat Reflexes>
ST:Dodge
ST:Parry
ST:Block
SK:Fast-Draw

<Cyberneticist>
SK:Computer Hacking
SK:Computer Operation
SK:Computer Programming
SK:Computer Programming (AI)
SK:Electronics Repair (Computers)

<Empathy>
SK:Detect Lies
SK:Fortune-Telling

<Flexibility>
SK:Climbing
SK:Escape
SK:Erotic Art

<Gifted Artist>
SK:Artist
SK:Jeweler
SK:Leatherworking
SK:Photography
SK:Sewing

<Green Thumb>
SK:Biology
SK:Farming
SK:Gardening
SK:Herb Lore
SK:Naturalist

<Healer>
SK:Diagnosis
SK:Esoteric Medicine
SK:First Aid
SK:Pharmacy
SK:Physician
SK:Physiology
SK:Psychology
SK:Surgery
SK:Veterinary

<High Manual Dexterity>
SK:Artist
SK:Jeweler
SK:Knot-Tying
SK:Leatherworking
SK:Lockpicking
SK:Pickpocket
SK:Sewing
SK:Sleight of Hand
SK:Surgery

<Hot Pilot>
SK:Gunner
SK:Navigation (Air)
SK:Navigation (Space)
SK:Piloting

<Hunchback>
SK:Disguise
SK:Shadowing

<Hyperspectral Vision>

<Influence Skills>
SK:Diplomacy
SK:Fast-Talk
SK:Intimidation
SK:Savoir-Faire
SK:Sex Appeal
SK:Streetwise

<Intuitive Admiral>
SK:Crewman (Spacecraft)
SK:Expert Skill (Military Science)
SK:History (Military)
SK:Intelligence Analysis
SK:Leadership
SK:Savoir-Faire (Military)
SK:Shiphandling (Spaceship)
SK:Shiphandling (Starship)
SK:Strategy (Space)

<Killjoy>
SK:Carousing
SK:Gambling

<Low Empathy>
SK:Acting
SK:Carousing
SK:Detect Lies
SK:Diplomacy
SK:Fast-Talk
SK:Merchant
SK:Politics
SK:Savoir-Faire
SK:Sex Appeal
SK:Streetwise

<Martial Prowess>
SK:Brawling
SK:Grappling & Pinning
SK:Grappling & Throwing
SK:Punching
SK:Striking
SK:Axe/Mace
SK:Broadsword
SK:Double-Headed
SK:Flail
SK:Jitte/Sai
SK:Knife
SK:Main-Gauche
SK:Polearm
SK:Rapier
SK:Saber
SK:Shortsword
SK:Smallsword
SK:Spear
SK:Staff
SK:Striking
SK:Two-Handed Axe/Mace
SK:Two-Handed Flail
SK:Two-Handed Sword
SK:Whip

<Mathematical Ability>
SK:Accounting
SK:Astronomy
SK:Cryptography
SK:Engineer
SK:Finance
SK:Market Analysis
SK:Mathematics
SK:Physics

<Musical Ability>
SK:Group Performance (Conducting)
SK:Musical Composition
SK:Musical Influence
SK:Musical Instrument
SK:Singing

<Nimble & Swift>
SK:Climbing
SK:Escape
SK:Jumping
SK:Running
SK:Swimming

<Oblivious>
SK:Diplomacy
SK:Fast-Talk
SK:Savoir-Faire
SK:Sex Appeal
SK:Streetwise

<Outdoorsman>
SK:Camouflage
SK:Fishing
SK:Mimicry
SK:Naturalist
SK:Navigation
SK:Survival
SK:Tracking

<Pacifism>

<Perfect Balance>
SK:Acrobatics
SK:Aerobatics
SK:Aquabatics
SK:Climbing
SK:Piloting

<Shyness>
SK:Acting
SK:Carousing
SK:Diplomacy
SK:Fast-Talk
SK:Intimidation
SK:Leadership
SK:Merchant
SK:Panhandling
SK:Performance
SK:Politics
SK:Public Speaking
SK:Savoir-Faire
SK:Sex Appeal
SK:Streetwise
SK:Teaching

<Smooth Operator>
SK:Acting
SK:Carousing
SK:Diplomacy
SK:Carousing
SK:Detect Lies
SK:Fast-Talk
SK:Intimidation
SK:Leadership
SK:Panhandling
SK:Politics
SK:Public Speaking
SK:Savoir-Faire
SK:Sex Appeal
SK:Streetwise

<Stuttering>
SK:Diplomacy
SK:Fats-Talk
SK:Singing

<Voice>
SK:Diplomacy
SK:Fast-Talk
SK:Mimicry
SK:Performance
SK:Politics
SK:Public Speaking
SK:Sex Appeal
SK:Singing

<Survival Land-Based>
SK:Survival (Arctic)
SK:Survival (Desert)
SK:Survival (Island/Beach)
SK:Survival (Jungle)
SK:Survival (Mountain)
SK:Survival (Plains)
SK:Survival (Swampland)
SK:Survival (Woodland)

<Survival Aquatic-Based>
SK:Survival (Bank)
SK:Survival (Deep Ocean Vent)
SK:Survival (Fresh/Water Lake)
SK:Survival (Open Ocean)
SK:Survival (Reef)
SK:Survival (Rivers/Stream)
SK:Survival (Salt-Water Sea)
SK:Survival (Tropical Lagoon)
*********************************************************************************************************************
[TEMPLATES]
*********************************************************************************************************************
<Lenses>
Imperial Slave Breeding, displaycost(-110), cost(0),
description(During the Rebellion era, the Empire enslaved alien species and took advantage of them, assigning them to dangerous tasks. The Empire went as far as to selectively breed these aliens in an attempt to make them less intelligent and more compliant and pacifistic. The effects of Imperial experimentation continue to haunt these aliens for generations afterward.),
page(CR?),
noresync(yes),
owns(yes),
hides(yes),
locks(yes),
adds(_
       {DI:Pacifism (Total Nonviolence)}#DoNotOwn,
       {DI:Slave Mentality}#DoNotOwn_
    ),
creates(_
          {DI:IQ Penalty from Imperial Slave Breeding, -40, gives(-2.0 to ST:IQ)}_
       )

<Styles>
Boxing, displaycost(4),
	description(This is the modern sport of boxing. It developed out of bare-knuckle and no-holds-barred matches in the early days of the Galactic Republic.),
	page(CR?),
	cat(Styles, Styles - Realistic Styles, Styles - Realistic Styles - Martial Arts),
	select1(text(Primary Skills: Select from the following skills and Style Familiarity Perk. In order to take the Style Familiarity Perk you must take at least 1 point in each of the skills.), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		PE:Style Familiarity (Boxing),
		SK:Punching,
		SK:Boxing Sport,
		#newitem(SK:Games (Boxing), IQ/E, default(IQ - 4), page(CR?), cat(_General, Knowledge)) _
			)_
		),
	select2(text(You may select from among the following Techniques:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		SK:Counterattack (%MeleeCombatSkillList%),
		SK:Feint (Punching),
		#newitem(SK:Targeted Attack (Punching Punch/Face), Tech/H, default("SK:Punching::level" - 5), page(CR?), upto(Prereq - 2), needs(SK:Punching)),
		#newitem(SK:Targeted Attack (Punching Uppercut/Face), Tech/H, default("SK:Uppercut (Punching)::level" - 5), page(CR?), upto(Prereq - 2), needs(SK:Uppercut (Punching))),
		SK:Uppercut (Punching) _
			)_
		),
	select3(text(You may select from among the following Cinematic Skills and Techniques:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		SK:Power Blow,
		SK:Roll with Blow (%UnarmedCombatSkillList%) _
			)_
		),
	select4(text(You may select from among the following Perks:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		PE:Skill Adaptation (Clinch/%UnarmedCombatSkillList%),
		PE:Neck Control,
		#newitem(PE:Special Exercises (DR with Ablative), 1, cat(Style Perks - Realistic), page(CR?), adds(AD:Damage Resistance with "Ablative, -80%, group(Damage Resistance), page(CR?)"), cat(Style Perks - Realistic)),
		PE:Special Exercises (Striking ST +1),
		#newitem(PE:Unusual Training (Roll with Blow, Only against the ropes), 1, cat(Style Perks - Realistic), page(CR?), cat(Style Perks - Realistic)) _
			)_
		),
	select5(text(You may select from among the following Optional Traits:), pointswanted(atleast -1000, upto 1000), itemswanted(upto 1000), multitype(yes), list(_, 
		DI:Reduced IQ,
		AD:Extra Basic Speed,
		AD:Extra Hit Points,
		AD:Fit,
		AD:Very Fit,
		AD:Hard to Subdue,
		AD:High Pain Threshold,
		AD:Striking ST,
		DI:Appearance,
		SK:Running,
		#newitem(SK:Savoir-Faire (Gym), IQ/A, default(IQ - 5, SK:Public Speaking, SK:Acting - 5, SK:Performance - 2, SK:Politics - 5), page(CR?), cat(_General, Business, Social, Atheletic)),
		SK:Low-Line Defense (Punching) _
			)_
		)

Corellian An Ch'i, displaycost(6),
	description(This unusual Corellian style concentrates on hidden weapons and gadgets, and is thought in secret.),
	page(CR?),
	cat(Styles, Styles - Cinematic Styles, Styles - Cinematic Styles - Martial Arts),
	select1(text(Primary Skills: Select from the following skills and Style Familiarity Perk. In order to take the Style Familiarity Perk you must take at least 1 point in each of the skills.), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		PE:Style Familiarity (Corellian An Ch'i),
		SK:Fast-Draw (Knife),
		#newitem(SK:Fast-Draw (Throwing Star), DX/E, page(CR?), cat(_General, Combat/Weapons - Melee Combat, Combat/Weapons - Ranged Combat)),
		SK:Holdout,
		SK:Traps,
		SK:Throwing Art _
			)_
		),
	select2(text(You may select from among the following Optional Traits:), pointswanted(atleast -1000, upto 1000), itemswanted(upto 1000), multitype(yes), list(_,
		SK:Blowpipe,
		SK:Grappling & Throwing, 
		SK:Power Blow,
		SK:Pressure Points,
		SK:Striking,
		#newitem(SK:Armoury (Thrown Weapons), IQ/A, default(IQ-5), page(CR?), cat(_General, Military, Repair/Maintenance)),
		#newitem(SK:Targeted Attack (Throwing Art Thrust/Vitals), Tech/H, default("SK:Throwing Art::level" - 3), page(CR?), upto(Prereq - 2), needs(SK:Throwing Art)),
		#newitem(SK:Targeted Attack (Throwing Art Swing/Vitals), Tech/H, default("SK:Throwing Art::level" - 3), page(CR?), upto(Prereq - 2), needs(SK:Throwing Art)),
		#newitem(SK:Feint (Throwing Art), Tech/H, default("SK:Throwing Art::level"), needs(SK:Throwing Art), upto(prereq +4), page(CR?))_ 
			)_
		)

Echani (Martial Arts), displaycost(5),
	description(The Echani martial arts was founded by the Echani, a race similar to Humans. Echani culture held the belief that to know one fully, you must fight them. Echani fighting was not only self-defense, but a form of self-expression, a means of communication similar to art.),
	page(CR?),
	cat(Styles, Styles - Realistic Styles, Styles - Realistic Styles - Martial Arts),
	select1(text(Primary Skills: Select from the following skills and Style Familiarity Perk. In order to take the Style Familiarity Perk you must take at least 1 point in each of the skills.), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		PE:Style Familiarity (Echani),
		SK:Body Language,
		SK:Exotic Hand Strike (Striking),
		SK:Spot Defensive Hole (Body Language),
		SK:Striking,
		SK:Savoir-Faire (Dojo) _
			)_
		),
	select2(text(You may select from among the following Techniques:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		SK:Back Kick (Striking),
		SK:Elbow Strike (Striking),
		SK:Feint ([Melee Combat Skill]),
		SK:Hammer Fist (Striking),
		SK:Jump Kick (Striking),
		SK:Kicking (Striking),
		SK:Knee Strike (Striking),
		SK:Spinning Kick (Striking),
		SK:Stamp Kick (Striking) _
			)_
		),
	select3(text(You may select from among the following Cinematic Skills and Techniques:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		SK:Battle Shout,
		SK:Breaking Blow,
		SK:Immovable Stance,
		SK:Mental Strength,
		SK:Pressure Points,
		SK:Pressure Secrets,
		SK:Lethal Kick (Striking),
		SK:Lethal Strike (Striking),
		SK:Pressure-Point Strike ([Melee Combat Skill]) _
			)_
		),
	select4(text(You may select from among the following Perks:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		#newitem(PE:Skill Adaptation (Clinch/Striking), 1, cat(Style Perks - Realistic), page(CR?)),
		#newitem(PE:Technique Adaptation (Feint), 1, cat(Style Perks - Realistic), page(CR?)),
		#newitem(PE:Unusual Training (Breaking Blow, Only vs. well-braced objects out of combat), 1, cat(Style Perks - Realistic), page(CR?)) _
		)_
		),
	select5(text(You may select from among the following Optional Traits:), pointswanted(atleast -1000, upto 1000), itemswanted(upto 1000), multitype(yes),
list(_, 
		#newitem(AD:Echani, 2/4, page(CR?), upto(3 LimitingTotal), mods(Language), levelnames([None], Broken, Accented, Native), cat(Language, Language Spoken, Language Written, Social Background), taboo(Native Languages > 1)),
		#newitem(AD:Reputation (Echani Student, from all Echani practitioners), 5/10, mods(Reputation, Reputation Advantage), page(CR?), upto(4), cat(Mundane, Social, Influence), initmods(People Affected: Small class of people, *1/3, shortname(Small class), group(Reputation) | Frequency of Recognition: All the time, *1, shortname(All the time), group(Reputation)), conditional(+1 to ST:Reaction, +1 to SK:Indimidation when "your reputation counts", -1 to SK:Intimidation when "your reputation works against you")),
		DI:Pacifism (Self-Defense Only),
		#newitem(SK:Games (Echani), IQ/E, default(IQ - 4), page(CR?), cat(_General, Knowledge)),
		SK:Echani Art,
		SK:Echani Sport,
		SK:Parry Missile Weapons,
		SK:Back Kick (Echani Art),
		SK:Elbow Strike (Echani Art),
		SK:Exotic Hand Strike (Echani Art),
		SK:Feint ([Melee Combat Art Skill]),
		SK:Hammer Fist (Echani Art),
		SK:Jump Kick (Echani Art),
		SK:Kicking (Echani Art),
		SK:Knee Strike (Echani Art),
		SK:Pressure-Point Strike ([Melee Combat Art Skill]),
		SK:Spinning Kick (Echani Art),
		SK:Stamp Kick (Echani Art),
		SK:Back Kick (Echani Sport),
		SK:Elbow Strike (Echani Sport),
		SK:Exotic Hand Strike (Echani Sport),
		SK:Feint ([Melee Combat Sport Skill]),
		SK:Hammer Fist (Echani Sport),
		SK:Jump Kick (Echani Sport),
		SK:Kicking (Echani Sport),
		SK:Knee Strike (Echani Sport),
		SK:Pressure-Point Strike ([Melee Combat Sport Skill]),
		SK:Spinning Kick (Echani Sport),
		SK:Stamp Kick (Echani Sport) _
			)_
		)

Military Style - K'tara - Rebel Alliance Martial Arts Program (Martial Arts), displaycost(4),
	description(K'tara was a martial arts style often used by Alliance Special Forces and other military units, focusing on stealth by maximizing damage to an opponent while making a minimum amount of noise. The style featured short, quick movements, most beginning from the set position and moving within the small area framed by the target's shoulders and hips. A skilled practitioner could quietly silence an opponent, disarm him, and disable him within a very short period of time.),
	page(CR?),
	cat(Styles, Styles - Realistic Styles, Styles - Realistic Styles - Martial Arts),
	select1(text(Primary Skills: Select from the following skills and Style Familiarity Perk. In order to take the Style Familiarity Perk you must take at least 1 point in each of the skills.), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		PE:Style Familiarity (Military Hand-To-Hand - K'tara (Alliance Martial Arts Training)),
		SK:Brawling,
		SK:Grappling & Throwing,
		SK:Stealth _
			)_
		),
	select2(text(You may select from among the following Techniques:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		#newitem(SK:Disarming (Grappling & Throwing), Tech/H, default("SK:Grappling & Throwing::level" -2), needs(SK:Grappling & Throwing), upto(prereq +5), page(CR?)),
		SK:Elbow Strike (Brawling),
		SK:Knee Strike (Brawling),
		#newitem(SK:Stamp Kick (Brawling), Tech/H, default("SK:Brawling::level" -3), needs(SK:Brawling), upto(prereq), page(CR?)),
		#newitem(SK:Targeted Attack (Brawling Stamp Kick/Face), Tech/H, default("SK:Stamp Kick (Brawling)::level" - 5), needs(SK:Brawling), upto(SK:Stamp Kick (Brawling) - 2), page(CR?)),
		#newitem(SK:Targeted Attack (Brawling Stamp Kick/Skull), Tech/H, default("SK:Stamp Kick(Brawling)::level" - 7), needs(SK:Brawling), upto(SK:Stamp Kick (Brawling) - 3), page(CR?)) _
			)_
		),
	select3(text(You may select from among the following Techniques:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		#newitem(PE:Improvised Weapons (Brawling), 1, cat(Style Perks - Realistic), page(CR?)) _
			)_
		),
	select4(text(You may select from among the following Optional Traits:), pointswanted(atleast -1000, upto 1000), itemswanted(upto 1000), multitype(yes), list(_, 
		AD:Combat Reflexes,
		AD:Fit,
		AD:Very Fit,
		DI:Bloodlust,
		DI:Overconfidence,
		SK:Striking,
		SK:Staff,
		#newitem(SK:Ground Fighting (Brawling), Tech/H, default("SK:Brawling::level" -3), needs(SK:Brawling), upto(prereq), page(CR?)),
		#newitem(SK:Ground Fighting (Grappling & Throwing),, Tech/H, default("SK:Grappling & Throwing::level" -3), needs(SK:Grappling & Throwing), upto(prereq), page(CR?)),
		#newitem(SK:Ground Fighting (Striking),, Tech/H, default("SK:Striking::level" -3), needs(SK:Striking), upto(prereq), page(CR?)),
		#newitem(SK:Retain Weapon (Beam Weapons (Rifle)), Tech/H, default("SK:Beam Weapons (Rifle)::level"), needs(SK:Beam Weapons (Rifle)), upto(Prereq), page(CR?))_
			)_
		)

Military Style - Republic Close Combat Training (Martial Arts), displaycost(5),
	description(The Republic Military Education Centre - with some assistance from Jango Fett - created the style of hand-to-hand fighting most widely taught to Clone Commandos during the Clone Wars. Clone Commandos used techniques for vibrodaggers and ion pistols. This style emphasizes killing and sentry removal. There's nothing gentlemanly about it methods or their execution (even if they are droids); it's purely pragmatic. The training places relatively little emphasis on traditional kicking and punching, because the practitioner is supposed to be taking out sentries or isolated enemy troops - not fighting in a stand-up brawl.),
	page(CR?),
	cat(Styles, Styles - Realistic Styles, Styles - Realistic Styles - Martial Arts),
	select1(text(Primary Skills: Select from the following skills and Style Familiarity Perk. In order to take the Style Familiarity Perk you must take at least 1 point in each of the skills.), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		PE:Style Familiarity (Military Hand-To-Hand - Republic Close Combat Training),
		SK:Grappling & Throwing,
		SK:Knife,
		SK:Stealth,
		SK:Striking _
			)_
		),
	select2(text(You may select from among the following Techniques:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		SK:Choke Hold (Grappling & Throwing),
		#newitem(SK:Disarming (Grappling & Throwing), Tech/H, default("SK:Grappling & Throwing::level" -2), needs(SK:Grappling & Throwing), upto(prereq +5), page(CR?)),
		#newitem(SK:Disarming (Knife), Tech/H, default("SK:Knife::level" -2), needs(SK:Knife), upto(prereq +5), page(CR?)),
		#newitem(SK:Disarming (Striking), Tech/H, default("SK:Striking::level" -2), needs(SK:Striking), upto(prereq +5), page(CR?)),
		SK:Knee Strike (Striking),
		SK:Neck Snap (ST),
		#newitem(SK:Targeted Attack (Knife Thrust/Neck), Tech/H, default("SK:Knife::level" - 5), needs(SK:Knife), upto(prereq - 2), page(CR?)) _
			)_
		),
	select3(text(You may select from among the following Cinematic Skills and Techniques:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		SK:Invisibility Art,
		SK:Light Walk,
		SK:Backbreaker (ST),
		SK:Binding (Grappling & Throwing) _
			)_
		),
	select4(text(You may select from among the following Perks:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		#newitem(PE:Improvised Weapons (Striking), 1, cat(Style Perks - Realistic), page(CR?)) _
			)_
		),
	select5(text(You may select from among the following Optional Traits:), pointswanted(atleast -1000, upto 1000), itemswanted(upto 1000), multitype(yes), list(_, 
		AD:Combat Reflexes,
		#newitem(DI:Intolerance (C.I.S. Droids), -5, page(CR?),levelnames(One group)),
		DI:Overconfidence,
		SK:Garrote,
		SK:Holdout,
		SK:Knot-Tying,
		SK:Beam Weapons (Pistol) _
			)_
		)

Wrestling - Combat Wrestling (Martial Arts), displaycost(5),
	description(Combat Wrestling - sometimes known as "all-in fighting" - was a pragmatic combat art. Professional armsmen routinely learned it to supplement their armed skills. It had neither rules nor a sense of fair play. All holds were "legal", and any tactic that could damage, dismay, or disable the enemy was considered good.),
	page(CR?),
	cat(Styles, Styles - Realistic Styles, Styles - Realistic Styles - Martial Arts),
	select1(text(Primary Skills: Select from the following skills and Style Familiarity Perk. In order to take the Style Familiarity Perk you must take at least 1 point in each of the skills.), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		PE:Style Familiarity (Wrestling - Combat Wrestling),
		#newitem(PE:Special Exercises (Lifting ST +1), 1, cat(Style Perks - Realistic), page(CR?), adds(AD:Lifting ST)),
		SK:Brawling,
		SK:Grappling & Pinning,
		SK:Grappling & Throwing _
			)_
		),
	select2(text(You may select from among the following Techniques:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		SK:Arm Lock (Grappling & Throwing),
		SK:Arm Lock (Grappling & Pinning),
		SK:Breakfall (Grappling & Throwing),
		SK:Breakfall (Grappling & Pinning),
		SK:Choke Hold (Grappling & Throwing),
		SK:Choke Hold (Grappling & Pinning),
		SK:Disarming ([Melee Combat Skill]),
		SK:Elbow Strike (Brawling),
		SK:Eye-Gouge (Brawling),
		SK:Eye-Gouge (Grappling & Throwing),
		SK:Eye-Gouge (Grappling & Pinning),
		SK:Eye-Rake (Brawling),
		SK:Finger Lock (Arm Lock (Grappling & Throwing)),
		SK:Finger Lock (Arm Lock (Grappling & Pinning)),
		SK:Hammer Fist (Brawling),
		SK:Head Lock (Grappling & Throwing),
		SK:Head Lock (Grappling & Pinning),
		SK:Kicking (Brawling),
		SK:Knee Drop (Brawling),
		SK:Knee Drop (Grappling & Pinning),
		SK:Knee Strike (Brawling),
		SK:Neck Snap (ST),
		#newitem(SK:Targeted Attack (Brawling Kick/Groin), Tech/H, default("SK:Kicking (Brawling)::level" - 3), needs(SK:Brawling), upto(prereq - 1), page(CR?)),
		#newitem(SK:Targeted Attack (Brawling Punch/Face), Tech/H, default("SK:Brawling::level" - 5), needs(SK:Brawling), upto(prereq - 2), page(CR?)),
		SK:Sweep ([Melee Combat Skill]),
		SK:Wrench [Limb] (ST),
		SK:Wrench Arm (ST),
		SK:Wrench Leg (ST),
		SK:Wrench Spine (ST),
		SK:Wrench Spine (Grappling & Pinning) _
			)_
		),
	select3(text(You may select from among the following Cinematic Skills and Techniques:), pointswanted(upto 1000), itemswanted(upto 1000), list(_
		SK:Immovable Stance,
		SK:Mental Strength,
		SK:Pressure Points,
		SK:Backbreaker (Grappling & Pinning),
		SK:Fighting While Seated ([Melee Combat Skill]),
		SK:Pressure-Point Strike ([Melee Combat Skill]) _
			)_
		),
	select4(text(You may select from among the following Optional Traits:), pointswanted(atleast -1000, upto 1000), itemswanted(upto 1000), multitype(yes), list(_, 
		AD:Combat Reflexes,
		AD:Fit,
		AD:Very Fit,
		DI:Bloodlust,
		DI:Bully,
		DI:Overconfidence,
		SK:Striking,
		SK:Elbow Drop (Brawling),
		SK:Elbow Drop (Grappling & Pinning),
		SK:Ground Fighting ([Melee Combat Skill]),
		SK:Kicking (Brawling),
		SK:Stamp Kick (Brawling) _
			)_
		)
*********************************************************************************************************************